
F405_LQFP64.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c60  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08005de8  08005de8  00015de8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e78  08005e78  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005e78  08005e78  00015e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e80  08005e80  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e80  08005e80  00015e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e84  08005e84  00015e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005e88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001164  2000000c  08005e94  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001170  08005e94  00021170  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b254  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000220b  00000000  00000000  0002b290  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008f0  00000000  00000000  0002d4a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007b8  00000000  00000000  0002dd90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024560  00000000  00000000  0002e548  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b357  00000000  00000000  00052aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e2cda  00000000  00000000  0005ddff  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00140ad9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002428  00000000  00000000  00140b54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005dd0 	.word	0x08005dd0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005dd0 	.word	0x08005dd0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_uldivmod>:
 8000b04:	b953      	cbnz	r3, 8000b1c <__aeabi_uldivmod+0x18>
 8000b06:	b94a      	cbnz	r2, 8000b1c <__aeabi_uldivmod+0x18>
 8000b08:	2900      	cmp	r1, #0
 8000b0a:	bf08      	it	eq
 8000b0c:	2800      	cmpeq	r0, #0
 8000b0e:	bf1c      	itt	ne
 8000b10:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b14:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b18:	f000 b972 	b.w	8000e00 <__aeabi_idiv0>
 8000b1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b24:	f000 f806 	bl	8000b34 <__udivmoddi4>
 8000b28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b30:	b004      	add	sp, #16
 8000b32:	4770      	bx	lr

08000b34 <__udivmoddi4>:
 8000b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b38:	9e08      	ldr	r6, [sp, #32]
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	4688      	mov	r8, r1
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d14b      	bne.n	8000bda <__udivmoddi4+0xa6>
 8000b42:	428a      	cmp	r2, r1
 8000b44:	4615      	mov	r5, r2
 8000b46:	d967      	bls.n	8000c18 <__udivmoddi4+0xe4>
 8000b48:	fab2 f282 	clz	r2, r2
 8000b4c:	b14a      	cbz	r2, 8000b62 <__udivmoddi4+0x2e>
 8000b4e:	f1c2 0720 	rsb	r7, r2, #32
 8000b52:	fa01 f302 	lsl.w	r3, r1, r2
 8000b56:	fa20 f707 	lsr.w	r7, r0, r7
 8000b5a:	4095      	lsls	r5, r2
 8000b5c:	ea47 0803 	orr.w	r8, r7, r3
 8000b60:	4094      	lsls	r4, r2
 8000b62:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b66:	0c23      	lsrs	r3, r4, #16
 8000b68:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b6c:	fa1f fc85 	uxth.w	ip, r5
 8000b70:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b74:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b78:	fb07 f10c 	mul.w	r1, r7, ip
 8000b7c:	4299      	cmp	r1, r3
 8000b7e:	d909      	bls.n	8000b94 <__udivmoddi4+0x60>
 8000b80:	18eb      	adds	r3, r5, r3
 8000b82:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000b86:	f080 811b 	bcs.w	8000dc0 <__udivmoddi4+0x28c>
 8000b8a:	4299      	cmp	r1, r3
 8000b8c:	f240 8118 	bls.w	8000dc0 <__udivmoddi4+0x28c>
 8000b90:	3f02      	subs	r7, #2
 8000b92:	442b      	add	r3, r5
 8000b94:	1a5b      	subs	r3, r3, r1
 8000b96:	b2a4      	uxth	r4, r4
 8000b98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ba0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ba8:	45a4      	cmp	ip, r4
 8000baa:	d909      	bls.n	8000bc0 <__udivmoddi4+0x8c>
 8000bac:	192c      	adds	r4, r5, r4
 8000bae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bb2:	f080 8107 	bcs.w	8000dc4 <__udivmoddi4+0x290>
 8000bb6:	45a4      	cmp	ip, r4
 8000bb8:	f240 8104 	bls.w	8000dc4 <__udivmoddi4+0x290>
 8000bbc:	3802      	subs	r0, #2
 8000bbe:	442c      	add	r4, r5
 8000bc0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bc4:	eba4 040c 	sub.w	r4, r4, ip
 8000bc8:	2700      	movs	r7, #0
 8000bca:	b11e      	cbz	r6, 8000bd4 <__udivmoddi4+0xa0>
 8000bcc:	40d4      	lsrs	r4, r2
 8000bce:	2300      	movs	r3, #0
 8000bd0:	e9c6 4300 	strd	r4, r3, [r6]
 8000bd4:	4639      	mov	r1, r7
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	428b      	cmp	r3, r1
 8000bdc:	d909      	bls.n	8000bf2 <__udivmoddi4+0xbe>
 8000bde:	2e00      	cmp	r6, #0
 8000be0:	f000 80eb 	beq.w	8000dba <__udivmoddi4+0x286>
 8000be4:	2700      	movs	r7, #0
 8000be6:	e9c6 0100 	strd	r0, r1, [r6]
 8000bea:	4638      	mov	r0, r7
 8000bec:	4639      	mov	r1, r7
 8000bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf2:	fab3 f783 	clz	r7, r3
 8000bf6:	2f00      	cmp	r7, #0
 8000bf8:	d147      	bne.n	8000c8a <__udivmoddi4+0x156>
 8000bfa:	428b      	cmp	r3, r1
 8000bfc:	d302      	bcc.n	8000c04 <__udivmoddi4+0xd0>
 8000bfe:	4282      	cmp	r2, r0
 8000c00:	f200 80fa 	bhi.w	8000df8 <__udivmoddi4+0x2c4>
 8000c04:	1a84      	subs	r4, r0, r2
 8000c06:	eb61 0303 	sbc.w	r3, r1, r3
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	4698      	mov	r8, r3
 8000c0e:	2e00      	cmp	r6, #0
 8000c10:	d0e0      	beq.n	8000bd4 <__udivmoddi4+0xa0>
 8000c12:	e9c6 4800 	strd	r4, r8, [r6]
 8000c16:	e7dd      	b.n	8000bd4 <__udivmoddi4+0xa0>
 8000c18:	b902      	cbnz	r2, 8000c1c <__udivmoddi4+0xe8>
 8000c1a:	deff      	udf	#255	; 0xff
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	2a00      	cmp	r2, #0
 8000c22:	f040 808f 	bne.w	8000d44 <__udivmoddi4+0x210>
 8000c26:	1b49      	subs	r1, r1, r5
 8000c28:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c2c:	fa1f f885 	uxth.w	r8, r5
 8000c30:	2701      	movs	r7, #1
 8000c32:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c36:	0c23      	lsrs	r3, r4, #16
 8000c38:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c3c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c40:	fb08 f10c 	mul.w	r1, r8, ip
 8000c44:	4299      	cmp	r1, r3
 8000c46:	d907      	bls.n	8000c58 <__udivmoddi4+0x124>
 8000c48:	18eb      	adds	r3, r5, r3
 8000c4a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x122>
 8000c50:	4299      	cmp	r1, r3
 8000c52:	f200 80cd 	bhi.w	8000df0 <__udivmoddi4+0x2bc>
 8000c56:	4684      	mov	ip, r0
 8000c58:	1a59      	subs	r1, r3, r1
 8000c5a:	b2a3      	uxth	r3, r4
 8000c5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c60:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c64:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c68:	fb08 f800 	mul.w	r8, r8, r0
 8000c6c:	45a0      	cmp	r8, r4
 8000c6e:	d907      	bls.n	8000c80 <__udivmoddi4+0x14c>
 8000c70:	192c      	adds	r4, r5, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0x14a>
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	f200 80b6 	bhi.w	8000dea <__udivmoddi4+0x2b6>
 8000c7e:	4618      	mov	r0, r3
 8000c80:	eba4 0408 	sub.w	r4, r4, r8
 8000c84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c88:	e79f      	b.n	8000bca <__udivmoddi4+0x96>
 8000c8a:	f1c7 0c20 	rsb	ip, r7, #32
 8000c8e:	40bb      	lsls	r3, r7
 8000c90:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c94:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c98:	fa01 f407 	lsl.w	r4, r1, r7
 8000c9c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ca0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ca4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ca8:	4325      	orrs	r5, r4
 8000caa:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cae:	0c2c      	lsrs	r4, r5, #16
 8000cb0:	fb08 3319 	mls	r3, r8, r9, r3
 8000cb4:	fa1f fa8e 	uxth.w	sl, lr
 8000cb8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cbc:	fb09 f40a 	mul.w	r4, r9, sl
 8000cc0:	429c      	cmp	r4, r3
 8000cc2:	fa02 f207 	lsl.w	r2, r2, r7
 8000cc6:	fa00 f107 	lsl.w	r1, r0, r7
 8000cca:	d90b      	bls.n	8000ce4 <__udivmoddi4+0x1b0>
 8000ccc:	eb1e 0303 	adds.w	r3, lr, r3
 8000cd0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000cd4:	f080 8087 	bcs.w	8000de6 <__udivmoddi4+0x2b2>
 8000cd8:	429c      	cmp	r4, r3
 8000cda:	f240 8084 	bls.w	8000de6 <__udivmoddi4+0x2b2>
 8000cde:	f1a9 0902 	sub.w	r9, r9, #2
 8000ce2:	4473      	add	r3, lr
 8000ce4:	1b1b      	subs	r3, r3, r4
 8000ce6:	b2ad      	uxth	r5, r5
 8000ce8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cec:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cf4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cf8:	45a2      	cmp	sl, r4
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x1da>
 8000cfc:	eb1e 0404 	adds.w	r4, lr, r4
 8000d00:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d04:	d26b      	bcs.n	8000dde <__udivmoddi4+0x2aa>
 8000d06:	45a2      	cmp	sl, r4
 8000d08:	d969      	bls.n	8000dde <__udivmoddi4+0x2aa>
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	4474      	add	r4, lr
 8000d0e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d12:	fba0 8902 	umull	r8, r9, r0, r2
 8000d16:	eba4 040a 	sub.w	r4, r4, sl
 8000d1a:	454c      	cmp	r4, r9
 8000d1c:	46c2      	mov	sl, r8
 8000d1e:	464b      	mov	r3, r9
 8000d20:	d354      	bcc.n	8000dcc <__udivmoddi4+0x298>
 8000d22:	d051      	beq.n	8000dc8 <__udivmoddi4+0x294>
 8000d24:	2e00      	cmp	r6, #0
 8000d26:	d069      	beq.n	8000dfc <__udivmoddi4+0x2c8>
 8000d28:	ebb1 050a 	subs.w	r5, r1, sl
 8000d2c:	eb64 0403 	sbc.w	r4, r4, r3
 8000d30:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d34:	40fd      	lsrs	r5, r7
 8000d36:	40fc      	lsrs	r4, r7
 8000d38:	ea4c 0505 	orr.w	r5, ip, r5
 8000d3c:	e9c6 5400 	strd	r5, r4, [r6]
 8000d40:	2700      	movs	r7, #0
 8000d42:	e747      	b.n	8000bd4 <__udivmoddi4+0xa0>
 8000d44:	f1c2 0320 	rsb	r3, r2, #32
 8000d48:	fa20 f703 	lsr.w	r7, r0, r3
 8000d4c:	4095      	lsls	r5, r2
 8000d4e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d52:	fa21 f303 	lsr.w	r3, r1, r3
 8000d56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d5a:	4338      	orrs	r0, r7
 8000d5c:	0c01      	lsrs	r1, r0, #16
 8000d5e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d62:	fa1f f885 	uxth.w	r8, r5
 8000d66:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6e:	fb07 f308 	mul.w	r3, r7, r8
 8000d72:	428b      	cmp	r3, r1
 8000d74:	fa04 f402 	lsl.w	r4, r4, r2
 8000d78:	d907      	bls.n	8000d8a <__udivmoddi4+0x256>
 8000d7a:	1869      	adds	r1, r5, r1
 8000d7c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000d80:	d22f      	bcs.n	8000de2 <__udivmoddi4+0x2ae>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d92d      	bls.n	8000de2 <__udivmoddi4+0x2ae>
 8000d86:	3f02      	subs	r7, #2
 8000d88:	4429      	add	r1, r5
 8000d8a:	1acb      	subs	r3, r1, r3
 8000d8c:	b281      	uxth	r1, r0
 8000d8e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d92:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d96:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d9a:	fb00 f308 	mul.w	r3, r0, r8
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d907      	bls.n	8000db2 <__udivmoddi4+0x27e>
 8000da2:	1869      	adds	r1, r5, r1
 8000da4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000da8:	d217      	bcs.n	8000dda <__udivmoddi4+0x2a6>
 8000daa:	428b      	cmp	r3, r1
 8000dac:	d915      	bls.n	8000dda <__udivmoddi4+0x2a6>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4429      	add	r1, r5
 8000db2:	1ac9      	subs	r1, r1, r3
 8000db4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000db8:	e73b      	b.n	8000c32 <__udivmoddi4+0xfe>
 8000dba:	4637      	mov	r7, r6
 8000dbc:	4630      	mov	r0, r6
 8000dbe:	e709      	b.n	8000bd4 <__udivmoddi4+0xa0>
 8000dc0:	4607      	mov	r7, r0
 8000dc2:	e6e7      	b.n	8000b94 <__udivmoddi4+0x60>
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	e6fb      	b.n	8000bc0 <__udivmoddi4+0x8c>
 8000dc8:	4541      	cmp	r1, r8
 8000dca:	d2ab      	bcs.n	8000d24 <__udivmoddi4+0x1f0>
 8000dcc:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dd0:	eb69 020e 	sbc.w	r2, r9, lr
 8000dd4:	3801      	subs	r0, #1
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	e7a4      	b.n	8000d24 <__udivmoddi4+0x1f0>
 8000dda:	4660      	mov	r0, ip
 8000ddc:	e7e9      	b.n	8000db2 <__udivmoddi4+0x27e>
 8000dde:	4618      	mov	r0, r3
 8000de0:	e795      	b.n	8000d0e <__udivmoddi4+0x1da>
 8000de2:	4667      	mov	r7, ip
 8000de4:	e7d1      	b.n	8000d8a <__udivmoddi4+0x256>
 8000de6:	4681      	mov	r9, r0
 8000de8:	e77c      	b.n	8000ce4 <__udivmoddi4+0x1b0>
 8000dea:	3802      	subs	r0, #2
 8000dec:	442c      	add	r4, r5
 8000dee:	e747      	b.n	8000c80 <__udivmoddi4+0x14c>
 8000df0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000df4:	442b      	add	r3, r5
 8000df6:	e72f      	b.n	8000c58 <__udivmoddi4+0x124>
 8000df8:	4638      	mov	r0, r7
 8000dfa:	e708      	b.n	8000c0e <__udivmoddi4+0xda>
 8000dfc:	4637      	mov	r7, r6
 8000dfe:	e6e9      	b.n	8000bd4 <__udivmoddi4+0xa0>

08000e00 <__aeabi_idiv0>:
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop

08000e04 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e0a:	463b      	mov	r3, r7
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e16:	4b21      	ldr	r3, [pc, #132]	; (8000e9c <MX_ADC1_Init+0x98>)
 8000e18:	4a21      	ldr	r2, [pc, #132]	; (8000ea0 <MX_ADC1_Init+0x9c>)
 8000e1a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e1c:	4b1f      	ldr	r3, [pc, #124]	; (8000e9c <MX_ADC1_Init+0x98>)
 8000e1e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e22:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e24:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <MX_ADC1_Init+0x98>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e2a:	4b1c      	ldr	r3, [pc, #112]	; (8000e9c <MX_ADC1_Init+0x98>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e30:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <MX_ADC1_Init+0x98>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e36:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <MX_ADC1_Init+0x98>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e3e:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <MX_ADC1_Init+0x98>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e44:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <MX_ADC1_Init+0x98>)
 8000e46:	4a17      	ldr	r2, [pc, #92]	; (8000ea4 <MX_ADC1_Init+0xa0>)
 8000e48:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e4a:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <MX_ADC1_Init+0x98>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <MX_ADC1_Init+0x98>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e56:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <MX_ADC1_Init+0x98>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e5e:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <MX_ADC1_Init+0x98>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e64:	480d      	ldr	r0, [pc, #52]	; (8000e9c <MX_ADC1_Init+0x98>)
 8000e66:	f000 fdf5 	bl	8001a54 <HAL_ADC_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e70:	f000 fccc 	bl	800180c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e80:	463b      	mov	r3, r7
 8000e82:	4619      	mov	r1, r3
 8000e84:	4805      	ldr	r0, [pc, #20]	; (8000e9c <MX_ADC1_Init+0x98>)
 8000e86:	f000 fe29 	bl	8001adc <HAL_ADC_ConfigChannel>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e90:	f000 fcbc 	bl	800180c <Error_Handler>
  }

}
 8000e94:	bf00      	nop
 8000e96:	3710      	adds	r7, #16
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20000028 	.word	0x20000028
 8000ea0:	40012000 	.word	0x40012000
 8000ea4:	0f000001 	.word	0x0f000001

08000ea8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	; 0x28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a17      	ldr	r2, [pc, #92]	; (8000f24 <HAL_ADC_MspInit+0x7c>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d127      	bne.n	8000f1a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <HAL_ADC_MspInit+0x80>)
 8000ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed2:	4a15      	ldr	r2, [pc, #84]	; (8000f28 <HAL_ADC_MspInit+0x80>)
 8000ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eda:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <HAL_ADC_MspInit+0x80>)
 8000edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <HAL_ADC_MspInit+0x80>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a0e      	ldr	r2, [pc, #56]	; (8000f28 <HAL_ADC_MspInit+0x80>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <HAL_ADC_MspInit+0x80>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = FootExp_IN_Pin|UserPotA_IN_Pin|UserPotB_IN_Pin;
 8000f02:	2307      	movs	r3, #7
 8000f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f06:	2303      	movs	r3, #3
 8000f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0e:	f107 0314 	add.w	r3, r7, #20
 8000f12:	4619      	mov	r1, r3
 8000f14:	4805      	ldr	r0, [pc, #20]	; (8000f2c <HAL_ADC_MspInit+0x84>)
 8000f16:	f001 fc7f 	bl	8002818 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f1a:	bf00      	nop
 8000f1c:	3728      	adds	r7, #40	; 0x28
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40012000 	.word	0x40012000
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	40020000 	.word	0x40020000

08000f30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <MX_DMA_Init+0x4c>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a0f      	ldr	r2, [pc, #60]	; (8000f7c <MX_DMA_Init+0x4c>)
 8000f40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <MX_DMA_Init+0x4c>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2100      	movs	r1, #0
 8000f56:	200e      	movs	r0, #14
 8000f58:	f001 f8b9 	bl	80020ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000f5c:	200e      	movs	r0, #14
 8000f5e:	f001 f8d2 	bl	8002106 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2100      	movs	r1, #0
 8000f66:	200f      	movs	r0, #15
 8000f68:	f001 f8b1 	bl	80020ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000f6c:	200f      	movs	r0, #15
 8000f6e:	f001 f8ca 	bl	8002106 <HAL_NVIC_EnableIRQ>

}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40023800 	.word	0x40023800

08000f80 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b088      	sub	sp, #32
 8000f84:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f86:	f107 030c 	add.w	r3, r7, #12
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	60da      	str	r2, [r3, #12]
 8000f94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	4b3a      	ldr	r3, [pc, #232]	; (8001084 <MX_GPIO_Init+0x104>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a39      	ldr	r2, [pc, #228]	; (8001084 <MX_GPIO_Init+0x104>)
 8000fa0:	f043 0304 	orr.w	r3, r3, #4
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b37      	ldr	r3, [pc, #220]	; (8001084 <MX_GPIO_Init+0x104>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0304 	and.w	r3, r3, #4
 8000fae:	60bb      	str	r3, [r7, #8]
 8000fb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	4b33      	ldr	r3, [pc, #204]	; (8001084 <MX_GPIO_Init+0x104>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a32      	ldr	r2, [pc, #200]	; (8001084 <MX_GPIO_Init+0x104>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b30      	ldr	r3, [pc, #192]	; (8001084 <MX_GPIO_Init+0x104>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	603b      	str	r3, [r7, #0]
 8000fd2:	4b2c      	ldr	r3, [pc, #176]	; (8001084 <MX_GPIO_Init+0x104>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a2b      	ldr	r2, [pc, #172]	; (8001084 <MX_GPIO_Init+0x104>)
 8000fd8:	f043 0302 	orr.w	r3, r3, #2
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b29      	ldr	r3, [pc, #164]	; (8001084 <MX_GPIO_Init+0x104>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	603b      	str	r3, [r7, #0]
 8000fe8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RelayCoil_OUT_GPIO_Port, RelayCoil_OUT_Pin, GPIO_PIN_RESET);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2101      	movs	r1, #1
 8000fee:	4826      	ldr	r0, [pc, #152]	; (8001088 <MX_GPIO_Init+0x108>)
 8000ff0:	f001 fdac 	bl	8002b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDA_RED_Pin|LEDA_GREEN_Pin|LEDA_BLUE_Pin, GPIO_PIN_RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2107      	movs	r1, #7
 8000ff8:	4824      	ldr	r0, [pc, #144]	; (800108c <MX_GPIO_Init+0x10c>)
 8000ffa:	f001 fda7 	bl	8002b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LEDB_RED_Pin|LEDB_GREEN_Pin|LEDB_BLUE_Pin, GPIO_PIN_RESET);
 8000ffe:	2200      	movs	r2, #0
 8001000:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001004:	4822      	ldr	r0, [pc, #136]	; (8001090 <MX_GPIO_Init+0x110>)
 8001006:	f001 fda1 	bl	8002b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = FootSwitchA_IN_Pin|FootSwitchB_IN_Pin|UserSwitchA_IN_Pin|UserSwitchB_IN_Pin;
 800100a:	f246 0306 	movw	r3, #24582	; 0x6006
 800100e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001018:	f107 030c 	add.w	r3, r7, #12
 800101c:	4619      	mov	r1, r3
 800101e:	481a      	ldr	r0, [pc, #104]	; (8001088 <MX_GPIO_Init+0x108>)
 8001020:	f001 fbfa 	bl	8002818 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RelayCoil_OUT_Pin;
 8001024:	2301      	movs	r3, #1
 8001026:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001028:	2301      	movs	r3, #1
 800102a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001030:	2300      	movs	r3, #0
 8001032:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RelayCoil_OUT_GPIO_Port, &GPIO_InitStruct);
 8001034:	f107 030c 	add.w	r3, r7, #12
 8001038:	4619      	mov	r1, r3
 800103a:	4813      	ldr	r0, [pc, #76]	; (8001088 <MX_GPIO_Init+0x108>)
 800103c:	f001 fbec 	bl	8002818 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LEDA_RED_Pin|LEDA_GREEN_Pin|LEDA_BLUE_Pin;
 8001040:	2307      	movs	r3, #7
 8001042:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001044:	2301      	movs	r3, #1
 8001046:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104c:	2300      	movs	r3, #0
 800104e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001050:	f107 030c 	add.w	r3, r7, #12
 8001054:	4619      	mov	r1, r3
 8001056:	480d      	ldr	r0, [pc, #52]	; (800108c <MX_GPIO_Init+0x10c>)
 8001058:	f001 fbde 	bl	8002818 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LEDB_RED_Pin|LEDB_GREEN_Pin|LEDB_BLUE_Pin;
 800105c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001060:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001062:	2301      	movs	r3, #1
 8001064:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106e:	f107 030c 	add.w	r3, r7, #12
 8001072:	4619      	mov	r1, r3
 8001074:	4806      	ldr	r0, [pc, #24]	; (8001090 <MX_GPIO_Init+0x110>)
 8001076:	f001 fbcf 	bl	8002818 <HAL_GPIO_Init>

}
 800107a:	bf00      	nop
 800107c:	3720      	adds	r7, #32
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40023800 	.word	0x40023800
 8001088:	40020800 	.word	0x40020800
 800108c:	40020400 	.word	0x40020400
 8001090:	40020000 	.word	0x40020000

08001094 <MX_I2S2_Init>:
DMA_HandleTypeDef hdma_i2s2_ext_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0

  hi2s2.Instance = SPI2;
 8001098:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <MX_I2S2_Init+0x54>)
 800109a:	4a14      	ldr	r2, [pc, #80]	; (80010ec <MX_I2S2_Init+0x58>)
 800109c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800109e:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <MX_I2S2_Init+0x54>)
 80010a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010a4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80010a6:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <MX_I2S2_Init+0x54>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 80010ac:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <MX_I2S2_Init+0x54>)
 80010ae:	2203      	movs	r2, #3
 80010b0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80010b2:	4b0d      	ldr	r3, [pc, #52]	; (80010e8 <MX_I2S2_Init+0x54>)
 80010b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010b8:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <MX_I2S2_Init+0x54>)
 80010bc:	4a0c      	ldr	r2, [pc, #48]	; (80010f0 <MX_I2S2_Init+0x5c>)
 80010be:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80010c0:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <MX_I2S2_Init+0x54>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80010c6:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <MX_I2S2_Init+0x54>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <MX_I2S2_Init+0x54>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80010d2:	4805      	ldr	r0, [pc, #20]	; (80010e8 <MX_I2S2_Init+0x54>)
 80010d4:	f001 fd54 	bl	8002b80 <HAL_I2S_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 80010de:	f000 fb95 	bl	800180c <Error_Handler>
  }

}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000130 	.word	0x20000130
 80010ec:	40003800 	.word	0x40003800
 80010f0:	00017700 	.word	0x00017700

080010f4 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08a      	sub	sp, #40	; 0x28
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a62      	ldr	r2, [pc, #392]	; (800129c <HAL_I2S_MspInit+0x1a8>)
 8001112:	4293      	cmp	r3, r2
 8001114:	f040 80bd 	bne.w	8001292 <HAL_I2S_MspInit+0x19e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001118:	2300      	movs	r3, #0
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	4b60      	ldr	r3, [pc, #384]	; (80012a0 <HAL_I2S_MspInit+0x1ac>)
 800111e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001120:	4a5f      	ldr	r2, [pc, #380]	; (80012a0 <HAL_I2S_MspInit+0x1ac>)
 8001122:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001126:	6413      	str	r3, [r2, #64]	; 0x40
 8001128:	4b5d      	ldr	r3, [pc, #372]	; (80012a0 <HAL_I2S_MspInit+0x1ac>)
 800112a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001130:	613b      	str	r3, [r7, #16]
 8001132:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001134:	2300      	movs	r3, #0
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	4b59      	ldr	r3, [pc, #356]	; (80012a0 <HAL_I2S_MspInit+0x1ac>)
 800113a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113c:	4a58      	ldr	r2, [pc, #352]	; (80012a0 <HAL_I2S_MspInit+0x1ac>)
 800113e:	f043 0302 	orr.w	r3, r3, #2
 8001142:	6313      	str	r3, [r2, #48]	; 0x30
 8001144:	4b56      	ldr	r3, [pc, #344]	; (80012a0 <HAL_I2S_MspInit+0x1ac>)
 8001146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001148:	f003 0302 	and.w	r3, r3, #2
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001150:	2300      	movs	r3, #0
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	4b52      	ldr	r3, [pc, #328]	; (80012a0 <HAL_I2S_MspInit+0x1ac>)
 8001156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001158:	4a51      	ldr	r2, [pc, #324]	; (80012a0 <HAL_I2S_MspInit+0x1ac>)
 800115a:	f043 0304 	orr.w	r3, r3, #4
 800115e:	6313      	str	r3, [r2, #48]	; 0x30
 8001160:	4b4f      	ldr	r3, [pc, #316]	; (80012a0 <HAL_I2S_MspInit+0x1ac>)
 8001162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001164:	f003 0304 	and.w	r3, r3, #4
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]
    PB13     ------> I2S2_CK
    PB14     ------> I2S2_ext_SD
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800116c:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001170:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	2302      	movs	r3, #2
 8001174:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	2300      	movs	r3, #0
 800117c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800117e:	2305      	movs	r3, #5
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	4619      	mov	r1, r3
 8001188:	4846      	ldr	r0, [pc, #280]	; (80012a4 <HAL_I2S_MspInit+0x1b0>)
 800118a:	f001 fb45 	bl	8002818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800118e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001192:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001194:	2302      	movs	r3, #2
 8001196:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	2300      	movs	r3, #0
 800119e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80011a0:	2306      	movs	r3, #6
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	4619      	mov	r1, r3
 80011aa:	483e      	ldr	r0, [pc, #248]	; (80012a4 <HAL_I2S_MspInit+0x1b0>)
 80011ac:	f001 fb34 	bl	8002818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011b0:	2340      	movs	r3, #64	; 0x40
 80011b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2300      	movs	r3, #0
 80011be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011c0:	2305      	movs	r3, #5
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	4619      	mov	r1, r3
 80011ca:	4837      	ldr	r0, [pc, #220]	; (80012a8 <HAL_I2S_MspInit+0x1b4>)
 80011cc:	f001 fb24 	bl	8002818 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 80011d0:	4b36      	ldr	r3, [pc, #216]	; (80012ac <HAL_I2S_MspInit+0x1b8>)
 80011d2:	4a37      	ldr	r2, [pc, #220]	; (80012b0 <HAL_I2S_MspInit+0x1bc>)
 80011d4:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 80011d6:	4b35      	ldr	r3, [pc, #212]	; (80012ac <HAL_I2S_MspInit+0x1b8>)
 80011d8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80011dc:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011de:	4b33      	ldr	r3, [pc, #204]	; (80012ac <HAL_I2S_MspInit+0x1b8>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011e4:	4b31      	ldr	r3, [pc, #196]	; (80012ac <HAL_I2S_MspInit+0x1b8>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011ea:	4b30      	ldr	r3, [pc, #192]	; (80012ac <HAL_I2S_MspInit+0x1b8>)
 80011ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011f0:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011f2:	4b2e      	ldr	r3, [pc, #184]	; (80012ac <HAL_I2S_MspInit+0x1b8>)
 80011f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011f8:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011fa:	4b2c      	ldr	r3, [pc, #176]	; (80012ac <HAL_I2S_MspInit+0x1b8>)
 80011fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001200:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 8001202:	4b2a      	ldr	r3, [pc, #168]	; (80012ac <HAL_I2S_MspInit+0x1b8>)
 8001204:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001208:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_LOW;
 800120a:	4b28      	ldr	r3, [pc, #160]	; (80012ac <HAL_I2S_MspInit+0x1b8>)
 800120c:	2200      	movs	r2, #0
 800120e:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001210:	4b26      	ldr	r3, [pc, #152]	; (80012ac <HAL_I2S_MspInit+0x1b8>)
 8001212:	2200      	movs	r2, #0
 8001214:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 8001216:	4825      	ldr	r0, [pc, #148]	; (80012ac <HAL_I2S_MspInit+0x1b8>)
 8001218:	f000 ff90 	bl	800213c <HAL_DMA_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <HAL_I2S_MspInit+0x132>
    {
      Error_Handler();
 8001222:	f000 faf3 	bl	800180c <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_i2s2_ext_rx);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a20      	ldr	r2, [pc, #128]	; (80012ac <HAL_I2S_MspInit+0x1b8>)
 800122a:	63da      	str	r2, [r3, #60]	; 0x3c
 800122c:	4a1f      	ldr	r2, [pc, #124]	; (80012ac <HAL_I2S_MspInit+0x1b8>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001232:	4b20      	ldr	r3, [pc, #128]	; (80012b4 <HAL_I2S_MspInit+0x1c0>)
 8001234:	4a20      	ldr	r2, [pc, #128]	; (80012b8 <HAL_I2S_MspInit+0x1c4>)
 8001236:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001238:	4b1e      	ldr	r3, [pc, #120]	; (80012b4 <HAL_I2S_MspInit+0x1c0>)
 800123a:	2200      	movs	r2, #0
 800123c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800123e:	4b1d      	ldr	r3, [pc, #116]	; (80012b4 <HAL_I2S_MspInit+0x1c0>)
 8001240:	2240      	movs	r2, #64	; 0x40
 8001242:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001244:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <HAL_I2S_MspInit+0x1c0>)
 8001246:	2200      	movs	r2, #0
 8001248:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800124a:	4b1a      	ldr	r3, [pc, #104]	; (80012b4 <HAL_I2S_MspInit+0x1c0>)
 800124c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001250:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001252:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <HAL_I2S_MspInit+0x1c0>)
 8001254:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001258:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800125a:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <HAL_I2S_MspInit+0x1c0>)
 800125c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001260:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001262:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <HAL_I2S_MspInit+0x1c0>)
 8001264:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001268:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800126a:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <HAL_I2S_MspInit+0x1c0>)
 800126c:	2200      	movs	r2, #0
 800126e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001270:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <HAL_I2S_MspInit+0x1c0>)
 8001272:	2200      	movs	r2, #0
 8001274:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001276:	480f      	ldr	r0, [pc, #60]	; (80012b4 <HAL_I2S_MspInit+0x1c0>)
 8001278:	f000 ff60 	bl	800213c <HAL_DMA_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <HAL_I2S_MspInit+0x192>
    {
      Error_Handler();
 8001282:	f000 fac3 	bl	800180c <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi2_tx);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a0a      	ldr	r2, [pc, #40]	; (80012b4 <HAL_I2S_MspInit+0x1c0>)
 800128a:	639a      	str	r2, [r3, #56]	; 0x38
 800128c:	4a09      	ldr	r2, [pc, #36]	; (80012b4 <HAL_I2S_MspInit+0x1c0>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001292:	bf00      	nop
 8001294:	3728      	adds	r7, #40	; 0x28
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40003800 	.word	0x40003800
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40020400 	.word	0x40020400
 80012a8:	40020800 	.word	0x40020800
 80012ac:	20000070 	.word	0x20000070
 80012b0:	40026058 	.word	0x40026058
 80012b4:	200000d0 	.word	0x200000d0
 80012b8:	40026070 	.word	0x40026070

080012bc <Do_HighPass>:
	adc_samples_avg = adc_samples_sum / ADC_DATA_LEN;

	return adc_samples_avg;
}

int Do_HighPass (int inSample) {
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]

	//Shift = adc_data_in/100;
	//300Hz high-pass, 96k
	a0 = 0.9862117951198142f;
 80012c4:	4b30      	ldr	r3, [pc, #192]	; (8001388 <Do_HighPass+0xcc>)
 80012c6:	4a31      	ldr	r2, [pc, #196]	; (800138c <Do_HighPass+0xd0>)
 80012c8:	601a      	str	r2, [r3, #0]
	a1 = -1.9724235902396283f;
 80012ca:	4b31      	ldr	r3, [pc, #196]	; (8001390 <Do_HighPass+0xd4>)
 80012cc:	4a31      	ldr	r2, [pc, #196]	; (8001394 <Do_HighPass+0xd8>)
 80012ce:	601a      	str	r2, [r3, #0]
	a2 = 0.9862117951198142f;
 80012d0:	4b31      	ldr	r3, [pc, #196]	; (8001398 <Do_HighPass+0xdc>)
 80012d2:	4a2e      	ldr	r2, [pc, #184]	; (800138c <Do_HighPass+0xd0>)
 80012d4:	601a      	str	r2, [r3, #0]
	b1 = -1.972233470205696f;
 80012d6:	4b31      	ldr	r3, [pc, #196]	; (800139c <Do_HighPass+0xe0>)
 80012d8:	4a31      	ldr	r2, [pc, #196]	; (80013a0 <Do_HighPass+0xe4>)
 80012da:	601a      	str	r2, [r3, #0]
	b2 = 0.9726137102735608f;
 80012dc:	4b31      	ldr	r3, [pc, #196]	; (80013a4 <Do_HighPass+0xe8>)
 80012de:	4a32      	ldr	r2, [pc, #200]	; (80013a8 <Do_HighPass+0xec>)
 80012e0:	601a      	str	r2, [r3, #0]
	a2 = 0.9930819695180432;
	b1 = -1.9861160802293198;
	b2 = 0.986211797842853;
*/

	float inSampleF = (float)inSample;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	ee07 3a90 	vmov	s15, r3
 80012e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ec:	edc7 7a03 	vstr	s15, [r7, #12]
	float outSampleF =
			a0 * inSampleF
 80012f0:	4b25      	ldr	r3, [pc, #148]	; (8001388 <Do_HighPass+0xcc>)
 80012f2:	ed93 7a00 	vldr	s14, [r3]
 80012f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80012fa:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ a1 * hp_in_z1
 80012fe:	4b24      	ldr	r3, [pc, #144]	; (8001390 <Do_HighPass+0xd4>)
 8001300:	edd3 6a00 	vldr	s13, [r3]
 8001304:	4b29      	ldr	r3, [pc, #164]	; (80013ac <Do_HighPass+0xf0>)
 8001306:	edd3 7a00 	vldr	s15, [r3]
 800130a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800130e:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ a2 * hp_in_z2
 8001312:	4b21      	ldr	r3, [pc, #132]	; (8001398 <Do_HighPass+0xdc>)
 8001314:	edd3 6a00 	vldr	s13, [r3]
 8001318:	4b25      	ldr	r3, [pc, #148]	; (80013b0 <Do_HighPass+0xf4>)
 800131a:	edd3 7a00 	vldr	s15, [r3]
 800131e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001322:	ee37 7a27 	vadd.f32	s14, s14, s15
			- b1 * hp_out_z1
 8001326:	4b1d      	ldr	r3, [pc, #116]	; (800139c <Do_HighPass+0xe0>)
 8001328:	edd3 6a00 	vldr	s13, [r3]
 800132c:	4b21      	ldr	r3, [pc, #132]	; (80013b4 <Do_HighPass+0xf8>)
 800132e:	edd3 7a00 	vldr	s15, [r3]
 8001332:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001336:	ee37 7a67 	vsub.f32	s14, s14, s15
			- b2 * hp_out_z2;
 800133a:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <Do_HighPass+0xe8>)
 800133c:	edd3 6a00 	vldr	s13, [r3]
 8001340:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <Do_HighPass+0xfc>)
 8001342:	edd3 7a00 	vldr	s15, [r3]
 8001346:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float outSampleF =
 800134a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800134e:	edc7 7a02 	vstr	s15, [r7, #8]
	hp_in_z2 = hp_in_z1;
 8001352:	4b16      	ldr	r3, [pc, #88]	; (80013ac <Do_HighPass+0xf0>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a16      	ldr	r2, [pc, #88]	; (80013b0 <Do_HighPass+0xf4>)
 8001358:	6013      	str	r3, [r2, #0]
	hp_in_z1 = inSampleF;
 800135a:	4a14      	ldr	r2, [pc, #80]	; (80013ac <Do_HighPass+0xf0>)
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	6013      	str	r3, [r2, #0]
	hp_out_z2 = hp_out_z1;
 8001360:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <Do_HighPass+0xf8>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a14      	ldr	r2, [pc, #80]	; (80013b8 <Do_HighPass+0xfc>)
 8001366:	6013      	str	r3, [r2, #0]
	hp_out_z1 = outSampleF;
 8001368:	4a12      	ldr	r2, [pc, #72]	; (80013b4 <Do_HighPass+0xf8>)
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	6013      	str	r3, [r2, #0]

	// TODO
	//outSampleF = outSampleF * 0.1f;

	return (int) outSampleF;
 800136e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001372:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001376:	ee17 3a90 	vmov	r3, s15
}
 800137a:	4618      	mov	r0, r3
 800137c:	3714      	adds	r7, #20
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	20001164 	.word	0x20001164
 800138c:	3f7c7860 	.word	0x3f7c7860
 8001390:	20000188 	.word	0x20000188
 8001394:	bffc7860 	.word	0xbffc7860
 8001398:	20001158 	.word	0x20001158
 800139c:	20000180 	.word	0x20000180
 80013a0:	bffc7225 	.word	0xbffc7225
 80013a4:	2000017c 	.word	0x2000017c
 80013a8:	3f78fd36 	.word	0x3f78fd36
 80013ac:	20001168 	.word	0x20001168
 80013b0:	2000019c 	.word	0x2000019c
 80013b4:	20001160 	.word	0x20001160
 80013b8:	20001154 	.word	0x20001154

080013bc <Do_PitchShift>:


int Do_PitchShift(int lSample, int rSample) {
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08a      	sub	sp, #40	; 0x28
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
	int sum = lSample + rSample;
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	4413      	add	r3, r2
 80013cc:	623b      	str	r3, [r7, #32]
	//sum up and do high-pass
	sum=Do_HighPass(sum);
 80013ce:	6a38      	ldr	r0, [r7, #32]
 80013d0:	f7ff ff74 	bl	80012bc <Do_HighPass>
 80013d4:	6238      	str	r0, [r7, #32]

	//write to ringbuffer
	Buf[WtrP] = sum;
 80013d6:	4b73      	ldr	r3, [pc, #460]	; (80015a4 <Do_PitchShift+0x1e8>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4973      	ldr	r1, [pc, #460]	; (80015a8 <Do_PitchShift+0x1ec>)
 80013dc:	6a3a      	ldr	r2, [r7, #32]
 80013de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//read fractional readpointer and generate 0° and 180° read-pointer in integer
	int RdPtr_Int = roundf(Rd_P);
 80013e2:	4b72      	ldr	r3, [pc, #456]	; (80015ac <Do_PitchShift+0x1f0>)
 80013e4:	edd3 7a00 	vldr	s15, [r3]
 80013e8:	eeb0 0a67 	vmov.f32	s0, s15
 80013ec:	f004 fcca 	bl	8005d84 <roundf>
 80013f0:	eef0 7a40 	vmov.f32	s15, s0
 80013f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013f8:	ee17 3a90 	vmov	r3, s15
 80013fc:	61fb      	str	r3, [r7, #28]
	int RdPtr_Int2 = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
	if (RdPtr_Int >= BufSize/2) RdPtr_Int2 = RdPtr_Int - (BufSize/2);
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001408:	db04      	blt.n	8001414 <Do_PitchShift+0x58>
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
 8001412:	e003      	b.n	800141c <Do_PitchShift+0x60>
	else RdPtr_Int2 = RdPtr_Int + (BufSize/2);
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800141a:	627b      	str	r3, [r7, #36]	; 0x24

	//read the two samples...
	float Rd0 = (float) Buf[RdPtr_Int];
 800141c:	4a62      	ldr	r2, [pc, #392]	; (80015a8 <Do_PitchShift+0x1ec>)
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001424:	ee07 3a90 	vmov	s15, r3
 8001428:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800142c:	edc7 7a06 	vstr	s15, [r7, #24]
	float Rd1 = (float) Buf[RdPtr_Int2];
 8001430:	4a5d      	ldr	r2, [pc, #372]	; (80015a8 <Do_PitchShift+0x1ec>)
 8001432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001438:	ee07 3a90 	vmov	s15, r3
 800143c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001440:	edc7 7a05 	vstr	s15, [r7, #20]

	//Check if first readpointer starts overlap with write pointer?
	// if yes -> do cross-fade to second read-pointer
	if (Overlap >= (WtrP-RdPtr_Int) && (WtrP-RdPtr_Int) >= 0 && Shift!=1.0f) {
 8001444:	4b57      	ldr	r3, [pc, #348]	; (80015a4 <Do_PitchShift+0x1e8>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b64      	cmp	r3, #100	; 0x64
 800144e:	dc21      	bgt.n	8001494 <Do_PitchShift+0xd8>
 8001450:	4b54      	ldr	r3, [pc, #336]	; (80015a4 <Do_PitchShift+0x1e8>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b00      	cmp	r3, #0
 800145a:	db1b      	blt.n	8001494 <Do_PitchShift+0xd8>
 800145c:	4b54      	ldr	r3, [pc, #336]	; (80015b0 <Do_PitchShift+0x1f4>)
 800145e:	edd3 7a00 	vldr	s15, [r3]
 8001462:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001466:	eef4 7a47 	vcmp.f32	s15, s14
 800146a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800146e:	d011      	beq.n	8001494 <Do_PitchShift+0xd8>
		int rel = WtrP-RdPtr_Int;
 8001470:	4b4c      	ldr	r3, [pc, #304]	; (80015a4 <Do_PitchShift+0x1e8>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	613b      	str	r3, [r7, #16]
		CrossFade = ((float)rel)/(float)Overlap;
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	ee07 3a90 	vmov	s15, r3
 8001480:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001484:	eddf 6a4b 	vldr	s13, [pc, #300]	; 80015b4 <Do_PitchShift+0x1f8>
 8001488:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800148c:	4b4a      	ldr	r3, [pc, #296]	; (80015b8 <Do_PitchShift+0x1fc>)
 800148e:	edc3 7a00 	vstr	s15, [r3]
	if (Overlap >= (WtrP-RdPtr_Int) && (WtrP-RdPtr_Int) >= 0 && Shift!=1.0f) {
 8001492:	e008      	b.n	80014a6 <Do_PitchShift+0xea>
	}
	else if (WtrP-RdPtr_Int == 0) CrossFade = 0.0f;
 8001494:	4b43      	ldr	r3, [pc, #268]	; (80015a4 <Do_PitchShift+0x1e8>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	69fa      	ldr	r2, [r7, #28]
 800149a:	429a      	cmp	r2, r3
 800149c:	d103      	bne.n	80014a6 <Do_PitchShift+0xea>
 800149e:	4b46      	ldr	r3, [pc, #280]	; (80015b8 <Do_PitchShift+0x1fc>)
 80014a0:	f04f 0200 	mov.w	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]

	//Check if second readpointer starts overlap with write pointer?
	// if yes -> do cross-fade to first read-pointer
	if (Overlap >= (WtrP-RdPtr_Int2) && (WtrP-RdPtr_Int2) >= 0 && Shift!=1.0f) {
 80014a6:	4b3f      	ldr	r3, [pc, #252]	; (80015a4 <Do_PitchShift+0x1e8>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b64      	cmp	r3, #100	; 0x64
 80014b0:	dc25      	bgt.n	80014fe <Do_PitchShift+0x142>
 80014b2:	4b3c      	ldr	r3, [pc, #240]	; (80015a4 <Do_PitchShift+0x1e8>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	db1f      	blt.n	80014fe <Do_PitchShift+0x142>
 80014be:	4b3c      	ldr	r3, [pc, #240]	; (80015b0 <Do_PitchShift+0x1f4>)
 80014c0:	edd3 7a00 	vldr	s15, [r3]
 80014c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80014c8:	eef4 7a47 	vcmp.f32	s15, s14
 80014cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d0:	d015      	beq.n	80014fe <Do_PitchShift+0x142>
			int rel = WtrP-RdPtr_Int2;
 80014d2:	4b34      	ldr	r3, [pc, #208]	; (80015a4 <Do_PitchShift+0x1e8>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	60fb      	str	r3, [r7, #12]
			CrossFade = 1.0f - ((float)rel)/(float)Overlap;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	ee07 3a90 	vmov	s15, r3
 80014e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014e6:	eddf 6a33 	vldr	s13, [pc, #204]	; 80015b4 <Do_PitchShift+0x1f8>
 80014ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80014f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014f6:	4b30      	ldr	r3, [pc, #192]	; (80015b8 <Do_PitchShift+0x1fc>)
 80014f8:	edc3 7a00 	vstr	s15, [r3]
	if (Overlap >= (WtrP-RdPtr_Int2) && (WtrP-RdPtr_Int2) >= 0 && Shift!=1.0f) {
 80014fc:	e008      	b.n	8001510 <Do_PitchShift+0x154>
		}
	else if (WtrP-RdPtr_Int2 == 0) CrossFade = 1.0f;
 80014fe:	4b29      	ldr	r3, [pc, #164]	; (80015a4 <Do_PitchShift+0x1e8>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001504:	429a      	cmp	r2, r3
 8001506:	d103      	bne.n	8001510 <Do_PitchShift+0x154>
 8001508:	4b2b      	ldr	r3, [pc, #172]	; (80015b8 <Do_PitchShift+0x1fc>)
 800150a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800150e:	601a      	str	r2, [r3, #0]


	//do cross-fading and sum up
	sum = (Rd0*CrossFade + Rd1*(1.0f-CrossFade));
 8001510:	4b29      	ldr	r3, [pc, #164]	; (80015b8 <Do_PitchShift+0x1fc>)
 8001512:	ed93 7a00 	vldr	s14, [r3]
 8001516:	edd7 7a06 	vldr	s15, [r7, #24]
 800151a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800151e:	4b26      	ldr	r3, [pc, #152]	; (80015b8 <Do_PitchShift+0x1fc>)
 8001520:	edd3 7a00 	vldr	s15, [r3]
 8001524:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001528:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800152c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001530:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001534:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001538:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800153c:	ee17 3a90 	vmov	r3, s15
 8001540:	623b      	str	r3, [r7, #32]

	//increment fractional read-pointer and write-pointer
	Rd_P += Shift;
 8001542:	4b1a      	ldr	r3, [pc, #104]	; (80015ac <Do_PitchShift+0x1f0>)
 8001544:	ed93 7a00 	vldr	s14, [r3]
 8001548:	4b19      	ldr	r3, [pc, #100]	; (80015b0 <Do_PitchShift+0x1f4>)
 800154a:	edd3 7a00 	vldr	s15, [r3]
 800154e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001552:	4b16      	ldr	r3, [pc, #88]	; (80015ac <Do_PitchShift+0x1f0>)
 8001554:	edc3 7a00 	vstr	s15, [r3]
	WtrP++;
 8001558:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <Do_PitchShift+0x1e8>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	3301      	adds	r3, #1
 800155e:	4a11      	ldr	r2, [pc, #68]	; (80015a4 <Do_PitchShift+0x1e8>)
 8001560:	6013      	str	r3, [r2, #0]
	if (WtrP == BufSize) WtrP = 0;
 8001562:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <Do_PitchShift+0x1e8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800156a:	d102      	bne.n	8001572 <Do_PitchShift+0x1b6>
 800156c:	4b0d      	ldr	r3, [pc, #52]	; (80015a4 <Do_PitchShift+0x1e8>)
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
	if (roundf(Rd_P) >= BufSize) Rd_P = 0.0f;
 8001572:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <Do_PitchShift+0x1f0>)
 8001574:	edd3 7a00 	vldr	s15, [r3]
 8001578:	eeb0 0a67 	vmov.f32	s0, s15
 800157c:	f004 fc02 	bl	8005d84 <roundf>
 8001580:	eeb0 7a40 	vmov.f32	s14, s0
 8001584:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80015bc <Do_PitchShift+0x200>
 8001588:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800158c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001590:	db03      	blt.n	800159a <Do_PitchShift+0x1de>
 8001592:	4b06      	ldr	r3, [pc, #24]	; (80015ac <Do_PitchShift+0x1f0>)
 8001594:	f04f 0200 	mov.w	r2, #0
 8001598:	601a      	str	r2, [r3, #0]

	return sum;
 800159a:	6a3b      	ldr	r3, [r7, #32]


}
 800159c:	4618      	mov	r0, r3
 800159e:	3728      	adds	r7, #40	; 0x28
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000184 	.word	0x20000184
 80015a8:	200001b0 	.word	0x200001b0
 80015ac:	2000115c 	.word	0x2000115c
 80015b0:	20000178 	.word	0x20000178
 80015b4:	42c80000 	.word	0x42c80000
 80015b8:	20001150 	.word	0x20001150
 80015bc:	447a0000 	.word	0x447a0000

080015c0 <HAL_I2SEx_TxRxHalfCpltCallback>:

void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]

	//restore signed 24 bit sample from 16-bit buffers
	int lSample = (int) (rxBuf[0]<<16)|rxBuf[1];
 80015c8:	4b16      	ldr	r3, [pc, #88]	; (8001624 <HAL_I2SEx_TxRxHalfCpltCallback+0x64>)
 80015ca:	881b      	ldrh	r3, [r3, #0]
 80015cc:	041b      	lsls	r3, r3, #16
 80015ce:	4a15      	ldr	r2, [pc, #84]	; (8001624 <HAL_I2SEx_TxRxHalfCpltCallback+0x64>)
 80015d0:	8852      	ldrh	r2, [r2, #2]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	617b      	str	r3, [r7, #20]
	int rSample = (int) (rxBuf[2]<<16)|rxBuf[3];
 80015d6:	4b13      	ldr	r3, [pc, #76]	; (8001624 <HAL_I2SEx_TxRxHalfCpltCallback+0x64>)
 80015d8:	889b      	ldrh	r3, [r3, #4]
 80015da:	041b      	lsls	r3, r3, #16
 80015dc:	4a11      	ldr	r2, [pc, #68]	; (8001624 <HAL_I2SEx_TxRxHalfCpltCallback+0x64>)
 80015de:	88d2      	ldrh	r2, [r2, #6]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]

	int ret_sample = Do_PitchShift(lSample, rSample);
 80015e4:	6939      	ldr	r1, [r7, #16]
 80015e6:	6978      	ldr	r0, [r7, #20]
 80015e8:	f7ff fee8 	bl	80013bc <Do_PitchShift>
 80015ec:	60f8      	str	r0, [r7, #12]
	lSample = ret_sample;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	617b      	str	r3, [r7, #20]
	rSample = ret_sample;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	613b      	str	r3, [r7, #16]

	//restore to buffer
	txBuf[0] = (lSample>>16)&0xFFFF;
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	0c1b      	lsrs	r3, r3, #16
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <HAL_I2SEx_TxRxHalfCpltCallback+0x68>)
 80015fe:	801a      	strh	r2, [r3, #0]
	txBuf[1] = lSample&0xFFFF;
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	b29a      	uxth	r2, r3
 8001604:	4b08      	ldr	r3, [pc, #32]	; (8001628 <HAL_I2SEx_TxRxHalfCpltCallback+0x68>)
 8001606:	805a      	strh	r2, [r3, #2]
	txBuf[2] = (rSample>>16)&0xFFFF;
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	0c1b      	lsrs	r3, r3, #16
 800160c:	b29a      	uxth	r2, r3
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <HAL_I2SEx_TxRxHalfCpltCallback+0x68>)
 8001610:	809a      	strh	r2, [r3, #4]
	txBuf[3] = rSample&0xFFFF;
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	b29a      	uxth	r2, r3
 8001616:	4b04      	ldr	r3, [pc, #16]	; (8001628 <HAL_I2SEx_TxRxHalfCpltCallback+0x68>)
 8001618:	80da      	strh	r2, [r3, #6]

}
 800161a:	bf00      	nop
 800161c:	3718      	adds	r7, #24
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	200001a0 	.word	0x200001a0
 8001628:	2000018c 	.word	0x2000018c

0800162c <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s){
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]

	//restore signed 24 bit sample from 16-bit buffers
	int lSample = (int) (rxBuf[4]<<16)|rxBuf[5];
 8001634:	4b16      	ldr	r3, [pc, #88]	; (8001690 <HAL_I2SEx_TxRxCpltCallback+0x64>)
 8001636:	891b      	ldrh	r3, [r3, #8]
 8001638:	041b      	lsls	r3, r3, #16
 800163a:	4a15      	ldr	r2, [pc, #84]	; (8001690 <HAL_I2SEx_TxRxCpltCallback+0x64>)
 800163c:	8952      	ldrh	r2, [r2, #10]
 800163e:	4313      	orrs	r3, r2
 8001640:	617b      	str	r3, [r7, #20]
	int rSample = (int) (rxBuf[6]<<16)|rxBuf[7];
 8001642:	4b13      	ldr	r3, [pc, #76]	; (8001690 <HAL_I2SEx_TxRxCpltCallback+0x64>)
 8001644:	899b      	ldrh	r3, [r3, #12]
 8001646:	041b      	lsls	r3, r3, #16
 8001648:	4a11      	ldr	r2, [pc, #68]	; (8001690 <HAL_I2SEx_TxRxCpltCallback+0x64>)
 800164a:	89d2      	ldrh	r2, [r2, #14]
 800164c:	4313      	orrs	r3, r2
 800164e:	613b      	str	r3, [r7, #16]

	//printf("%i\n", lSample);

	int ret_sample = Do_PitchShift(lSample, rSample);
 8001650:	6939      	ldr	r1, [r7, #16]
 8001652:	6978      	ldr	r0, [r7, #20]
 8001654:	f7ff feb2 	bl	80013bc <Do_PitchShift>
 8001658:	60f8      	str	r0, [r7, #12]
	lSample = ret_sample;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	617b      	str	r3, [r7, #20]
	rSample = ret_sample;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	613b      	str	r3, [r7, #16]

	//restore to buffer
	txBuf[4] = (lSample>>16)&0xFFFF;
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	0c1b      	lsrs	r3, r3, #16
 8001666:	b29a      	uxth	r2, r3
 8001668:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <HAL_I2SEx_TxRxCpltCallback+0x68>)
 800166a:	811a      	strh	r2, [r3, #8]
	txBuf[5] = lSample&0xFFFF;
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	b29a      	uxth	r2, r3
 8001670:	4b08      	ldr	r3, [pc, #32]	; (8001694 <HAL_I2SEx_TxRxCpltCallback+0x68>)
 8001672:	815a      	strh	r2, [r3, #10]
	txBuf[6] = (rSample>>16)&0xFFFF;
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	0c1b      	lsrs	r3, r3, #16
 8001678:	b29a      	uxth	r2, r3
 800167a:	4b06      	ldr	r3, [pc, #24]	; (8001694 <HAL_I2SEx_TxRxCpltCallback+0x68>)
 800167c:	819a      	strh	r2, [r3, #12]
	txBuf[7] = rSample&0xFFFF;
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	b29a      	uxth	r2, r3
 8001682:	4b04      	ldr	r3, [pc, #16]	; (8001694 <HAL_I2SEx_TxRxCpltCallback+0x68>)
 8001684:	81da      	strh	r2, [r3, #14]

}
 8001686:	bf00      	nop
 8001688:	3718      	adds	r7, #24
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	200001a0 	.word	0x200001a0
 8001694:	2000018c 	.word	0x2000018c

08001698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800169c:	f000 f968 	bl	8001970 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016a0:	f000 f832 	bl	8001708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016a4:	f7ff fc6c 	bl	8000f80 <MX_GPIO_Init>
  MX_DMA_Init();
 80016a8:	f7ff fc42 	bl	8000f30 <MX_DMA_Init>
  MX_ADC1_Init();
 80016ac:	f7ff fbaa 	bl	8000e04 <MX_ADC1_Init>
  MX_I2S2_Init();
 80016b0:	f7ff fcf0 	bl	8001094 <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */
  printf("Starting/n");
 80016b4:	480c      	ldr	r0, [pc, #48]	; (80016e8 <main+0x50>)
 80016b6:	f004 fae9 	bl	8005c8c <printf_>
  //int res = testfunc();
  HAL_I2SEx_TransmitReceive_DMA (&hi2s2, txBuf, rxBuf, 4);
 80016ba:	2304      	movs	r3, #4
 80016bc:	4a0b      	ldr	r2, [pc, #44]	; (80016ec <main+0x54>)
 80016be:	490c      	ldr	r1, [pc, #48]	; (80016f0 <main+0x58>)
 80016c0:	480c      	ldr	r0, [pc, #48]	; (80016f4 <main+0x5c>)
 80016c2:	f001 fca3 	bl	800300c <HAL_I2SEx_TransmitReceive_DMA>

	//0°
	WtrP = 0;
 80016c6:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <main+0x60>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]

	Rd_P = 0.0f;
 80016cc:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <main+0x64>)
 80016ce:	f04f 0200 	mov.w	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
	Shift = 1.0f;
 80016d4:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <main+0x68>)
 80016d6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80016da:	601a      	str	r2, [r3, #0]
	CrossFade = 1.0f;
 80016dc:	4b09      	ldr	r3, [pc, #36]	; (8001704 <main+0x6c>)
 80016de:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80016e2:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016e4:	e7fe      	b.n	80016e4 <main+0x4c>
 80016e6:	bf00      	nop
 80016e8:	08005de8 	.word	0x08005de8
 80016ec:	200001a0 	.word	0x200001a0
 80016f0:	2000018c 	.word	0x2000018c
 80016f4:	20000130 	.word	0x20000130
 80016f8:	20000184 	.word	0x20000184
 80016fc:	2000115c 	.word	0x2000115c
 8001700:	20000178 	.word	0x20000178
 8001704:	20001150 	.word	0x20001150

08001708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b098      	sub	sp, #96	; 0x60
 800170c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800170e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001712:	2230      	movs	r2, #48	; 0x30
 8001714:	2100      	movs	r1, #0
 8001716:	4618      	mov	r0, r3
 8001718:	f004 fb2c 	bl	8005d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800171c:	f107 031c 	add.w	r3, r7, #28
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800172c:	f107 030c 	add.w	r3, r7, #12
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	60bb      	str	r3, [r7, #8]
 800173e:	4b31      	ldr	r3, [pc, #196]	; (8001804 <SystemClock_Config+0xfc>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	4a30      	ldr	r2, [pc, #192]	; (8001804 <SystemClock_Config+0xfc>)
 8001744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001748:	6413      	str	r3, [r2, #64]	; 0x40
 800174a:	4b2e      	ldr	r3, [pc, #184]	; (8001804 <SystemClock_Config+0xfc>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001752:	60bb      	str	r3, [r7, #8]
 8001754:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001756:	2300      	movs	r3, #0
 8001758:	607b      	str	r3, [r7, #4]
 800175a:	4b2b      	ldr	r3, [pc, #172]	; (8001808 <SystemClock_Config+0x100>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a2a      	ldr	r2, [pc, #168]	; (8001808 <SystemClock_Config+0x100>)
 8001760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	4b28      	ldr	r3, [pc, #160]	; (8001808 <SystemClock_Config+0x100>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800176e:	607b      	str	r3, [r7, #4]
 8001770:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001772:	2302      	movs	r3, #2
 8001774:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001776:	2301      	movs	r3, #1
 8001778:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800177a:	2310      	movs	r3, #16
 800177c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800177e:	2302      	movs	r3, #2
 8001780:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001782:	2300      	movs	r3, #0
 8001784:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001786:	2310      	movs	r3, #16
 8001788:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800178a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800178e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001790:	2302      	movs	r3, #2
 8001792:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001794:	2304      	movs	r3, #4
 8001796:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001798:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800179c:	4618      	mov	r0, r3
 800179e:	f002 f8f9 	bl	8003994 <HAL_RCC_OscConfig>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80017a8:	f000 f830 	bl	800180c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017ac:	230f      	movs	r3, #15
 80017ae:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017b0:	2302      	movs	r3, #2
 80017b2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017b4:	2300      	movs	r3, #0
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80017b8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80017bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017c4:	f107 031c 	add.w	r3, r7, #28
 80017c8:	2105      	movs	r1, #5
 80017ca:	4618      	mov	r0, r3
 80017cc:	f002 fb52 	bl	8003e74 <HAL_RCC_ClockConfig>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80017d6:	f000 f819 	bl	800180c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80017da:	2301      	movs	r3, #1
 80017dc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 384;
 80017de:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80017e2:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80017e4:	2302      	movs	r3, #2
 80017e6:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	4618      	mov	r0, r3
 80017ee:	f002 fcd9 	bl	80041a4 <HAL_RCCEx_PeriphCLKConfig>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80017f8:	f000 f808 	bl	800180c <Error_Handler>
  }
}
 80017fc:	bf00      	nop
 80017fe:	3760      	adds	r7, #96	; 0x60
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40023800 	.word	0x40023800
 8001808:	40007000 	.word	0x40007000

0800180c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
	...

0800181c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	607b      	str	r3, [r7, #4]
 8001826:	4b10      	ldr	r3, [pc, #64]	; (8001868 <HAL_MspInit+0x4c>)
 8001828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182a:	4a0f      	ldr	r2, [pc, #60]	; (8001868 <HAL_MspInit+0x4c>)
 800182c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001830:	6453      	str	r3, [r2, #68]	; 0x44
 8001832:	4b0d      	ldr	r3, [pc, #52]	; (8001868 <HAL_MspInit+0x4c>)
 8001834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	603b      	str	r3, [r7, #0]
 8001842:	4b09      	ldr	r3, [pc, #36]	; (8001868 <HAL_MspInit+0x4c>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	4a08      	ldr	r2, [pc, #32]	; (8001868 <HAL_MspInit+0x4c>)
 8001848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800184c:	6413      	str	r3, [r2, #64]	; 0x40
 800184e:	4b06      	ldr	r3, [pc, #24]	; (8001868 <HAL_MspInit+0x4c>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001856:	603b      	str	r3, [r7, #0]
 8001858:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	40023800 	.word	0x40023800

0800186c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800187e:	e7fe      	b.n	800187e <HardFault_Handler+0x4>

08001880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001884:	e7fe      	b.n	8001884 <MemManage_Handler+0x4>

08001886 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800188a:	e7fe      	b.n	800188a <BusFault_Handler+0x4>

0800188c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001890:	e7fe      	b.n	8001890 <UsageFault_Handler+0x4>

08001892 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018c0:	f000 f8a8 	bl	8001a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 80018cc:	4802      	ldr	r0, [pc, #8]	; (80018d8 <DMA1_Stream3_IRQHandler+0x10>)
 80018ce:	f000 fd3b 	bl	8002348 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000070 	.word	0x20000070

080018dc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80018e0:	4802      	ldr	r0, [pc, #8]	; (80018ec <DMA1_Stream4_IRQHandler+0x10>)
 80018e2:	f000 fd31 	bl	8002348 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	200000d0 	.word	0x200000d0

080018f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018f4:	4b08      	ldr	r3, [pc, #32]	; (8001918 <SystemInit+0x28>)
 80018f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018fa:	4a07      	ldr	r2, [pc, #28]	; (8001918 <SystemInit+0x28>)
 80018fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001900:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001904:	4b04      	ldr	r3, [pc, #16]	; (8001918 <SystemInit+0x28>)
 8001906:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800190a:	609a      	str	r2, [r3, #8]
#endif
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800191c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001954 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001920:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001922:	e003      	b.n	800192c <LoopCopyDataInit>

08001924 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001924:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001926:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001928:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800192a:	3104      	adds	r1, #4

0800192c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800192c:	480b      	ldr	r0, [pc, #44]	; (800195c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800192e:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001930:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001932:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001934:	d3f6      	bcc.n	8001924 <CopyDataInit>
  ldr  r2, =_sbss
 8001936:	4a0b      	ldr	r2, [pc, #44]	; (8001964 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001938:	e002      	b.n	8001940 <LoopFillZerobss>

0800193a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800193a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800193c:	f842 3b04 	str.w	r3, [r2], #4

08001940 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001940:	4b09      	ldr	r3, [pc, #36]	; (8001968 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001942:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001944:	d3f9      	bcc.n	800193a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001946:	f7ff ffd3 	bl	80018f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800194a:	f004 f9ef 	bl	8005d2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800194e:	f7ff fea3 	bl	8001698 <main>
  bx  lr    
 8001952:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001954:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001958:	08005e88 	.word	0x08005e88
  ldr  r0, =_sdata
 800195c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001960:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001964:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001968:	20001170 	.word	0x20001170

0800196c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800196c:	e7fe      	b.n	800196c <ADC_IRQHandler>
	...

08001970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001974:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <HAL_Init+0x40>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a0d      	ldr	r2, [pc, #52]	; (80019b0 <HAL_Init+0x40>)
 800197a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800197e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001980:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <HAL_Init+0x40>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a0a      	ldr	r2, [pc, #40]	; (80019b0 <HAL_Init+0x40>)
 8001986:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800198a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800198c:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <HAL_Init+0x40>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a07      	ldr	r2, [pc, #28]	; (80019b0 <HAL_Init+0x40>)
 8001992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001996:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001998:	2003      	movs	r0, #3
 800199a:	f000 fb8d 	bl	80020b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800199e:	2000      	movs	r0, #0
 80019a0:	f000 f808 	bl	80019b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019a4:	f7ff ff3a 	bl	800181c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40023c00 	.word	0x40023c00

080019b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019bc:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <HAL_InitTick+0x54>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <HAL_InitTick+0x58>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	4619      	mov	r1, r3
 80019c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d2:	4618      	mov	r0, r3
 80019d4:	f000 fba5 	bl	8002122 <HAL_SYSTICK_Config>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e00e      	b.n	8001a00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2b0f      	cmp	r3, #15
 80019e6:	d80a      	bhi.n	80019fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019e8:	2200      	movs	r2, #0
 80019ea:	6879      	ldr	r1, [r7, #4]
 80019ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019f0:	f000 fb6d 	bl	80020ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019f4:	4a06      	ldr	r2, [pc, #24]	; (8001a10 <HAL_InitTick+0x5c>)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
 80019fc:	e000      	b.n	8001a00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	20000008 	.word	0x20000008
 8001a10:	20000004 	.word	0x20000004

08001a14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a18:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_IncTick+0x20>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <HAL_IncTick+0x24>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4413      	add	r3, r2
 8001a24:	4a04      	ldr	r2, [pc, #16]	; (8001a38 <HAL_IncTick+0x24>)
 8001a26:	6013      	str	r3, [r2, #0]
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	20000008 	.word	0x20000008
 8001a38:	2000116c 	.word	0x2000116c

08001a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a40:	4b03      	ldr	r3, [pc, #12]	; (8001a50 <HAL_GetTick+0x14>)
 8001a42:	681b      	ldr	r3, [r3, #0]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	2000116c 	.word	0x2000116c

08001a54 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e033      	b.n	8001ad2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d109      	bne.n	8001a86 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff fa18 	bl	8000ea8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	f003 0310 	and.w	r3, r3, #16
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d118      	bne.n	8001ac4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a9a:	f023 0302 	bic.w	r3, r3, #2
 8001a9e:	f043 0202 	orr.w	r2, r3, #2
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 f93a 	bl	8001d20 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	f023 0303 	bic.w	r3, r3, #3
 8001aba:	f043 0201 	orr.w	r2, r3, #1
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	641a      	str	r2, [r3, #64]	; 0x40
 8001ac2:	e001      	b.n	8001ac8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d101      	bne.n	8001af8 <HAL_ADC_ConfigChannel+0x1c>
 8001af4:	2302      	movs	r3, #2
 8001af6:	e105      	b.n	8001d04 <HAL_ADC_ConfigChannel+0x228>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2b09      	cmp	r3, #9
 8001b06:	d925      	bls.n	8001b54 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	68d9      	ldr	r1, [r3, #12]
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	461a      	mov	r2, r3
 8001b16:	4613      	mov	r3, r2
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	4413      	add	r3, r2
 8001b1c:	3b1e      	subs	r3, #30
 8001b1e:	2207      	movs	r2, #7
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43da      	mvns	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	400a      	ands	r2, r1
 8001b2c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68d9      	ldr	r1, [r3, #12]
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	4618      	mov	r0, r3
 8001b40:	4603      	mov	r3, r0
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	4403      	add	r3, r0
 8001b46:	3b1e      	subs	r3, #30
 8001b48:	409a      	lsls	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	e022      	b.n	8001b9a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6919      	ldr	r1, [r3, #16]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	461a      	mov	r2, r3
 8001b62:	4613      	mov	r3, r2
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	4413      	add	r3, r2
 8001b68:	2207      	movs	r2, #7
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43da      	mvns	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	400a      	ands	r2, r1
 8001b76:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6919      	ldr	r1, [r3, #16]
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	689a      	ldr	r2, [r3, #8]
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	4618      	mov	r0, r3
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	4403      	add	r3, r0
 8001b90:	409a      	lsls	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	430a      	orrs	r2, r1
 8001b98:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b06      	cmp	r3, #6
 8001ba0:	d824      	bhi.n	8001bec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685a      	ldr	r2, [r3, #4]
 8001bac:	4613      	mov	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	3b05      	subs	r3, #5
 8001bb4:	221f      	movs	r2, #31
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43da      	mvns	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	400a      	ands	r2, r1
 8001bc2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685a      	ldr	r2, [r3, #4]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4413      	add	r3, r2
 8001bdc:	3b05      	subs	r3, #5
 8001bde:	fa00 f203 	lsl.w	r2, r0, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	430a      	orrs	r2, r1
 8001be8:	635a      	str	r2, [r3, #52]	; 0x34
 8001bea:	e04c      	b.n	8001c86 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b0c      	cmp	r3, #12
 8001bf2:	d824      	bhi.n	8001c3e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685a      	ldr	r2, [r3, #4]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	3b23      	subs	r3, #35	; 0x23
 8001c06:	221f      	movs	r2, #31
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	43da      	mvns	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	400a      	ands	r2, r1
 8001c14:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	4618      	mov	r0, r3
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	3b23      	subs	r3, #35	; 0x23
 8001c30:	fa00 f203 	lsl.w	r2, r0, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	631a      	str	r2, [r3, #48]	; 0x30
 8001c3c:	e023      	b.n	8001c86 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685a      	ldr	r2, [r3, #4]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	3b41      	subs	r3, #65	; 0x41
 8001c50:	221f      	movs	r2, #31
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43da      	mvns	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	400a      	ands	r2, r1
 8001c5e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	4613      	mov	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	3b41      	subs	r3, #65	; 0x41
 8001c7a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c86:	4b22      	ldr	r3, [pc, #136]	; (8001d10 <HAL_ADC_ConfigChannel+0x234>)
 8001c88:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a21      	ldr	r2, [pc, #132]	; (8001d14 <HAL_ADC_ConfigChannel+0x238>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d109      	bne.n	8001ca8 <HAL_ADC_ConfigChannel+0x1cc>
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2b12      	cmp	r3, #18
 8001c9a:	d105      	bne.n	8001ca8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a19      	ldr	r2, [pc, #100]	; (8001d14 <HAL_ADC_ConfigChannel+0x238>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d123      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x21e>
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2b10      	cmp	r3, #16
 8001cb8:	d003      	beq.n	8001cc2 <HAL_ADC_ConfigChannel+0x1e6>
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2b11      	cmp	r3, #17
 8001cc0:	d11b      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2b10      	cmp	r3, #16
 8001cd4:	d111      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cd6:	4b10      	ldr	r3, [pc, #64]	; (8001d18 <HAL_ADC_ConfigChannel+0x23c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a10      	ldr	r2, [pc, #64]	; (8001d1c <HAL_ADC_ConfigChannel+0x240>)
 8001cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce0:	0c9a      	lsrs	r2, r3, #18
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4413      	add	r3, r2
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001cec:	e002      	b.n	8001cf4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f9      	bne.n	8001cee <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	40012300 	.word	0x40012300
 8001d14:	40012000 	.word	0x40012000
 8001d18:	20000000 	.word	0x20000000
 8001d1c:	431bde83 	.word	0x431bde83

08001d20 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d28:	4b79      	ldr	r3, [pc, #484]	; (8001f10 <ADC_Init+0x1f0>)
 8001d2a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	431a      	orrs	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	685a      	ldr	r2, [r3, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	6859      	ldr	r1, [r3, #4]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	021a      	lsls	r2, r3, #8
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	430a      	orrs	r2, r1
 8001d68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6859      	ldr	r1, [r3, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	689a      	ldr	r2, [r3, #8]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6899      	ldr	r1, [r3, #8]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	68da      	ldr	r2, [r3, #12]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	430a      	orrs	r2, r1
 8001dac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db2:	4a58      	ldr	r2, [pc, #352]	; (8001f14 <ADC_Init+0x1f4>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d022      	beq.n	8001dfe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	689a      	ldr	r2, [r3, #8]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001dc6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6899      	ldr	r1, [r3, #8]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001de8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6899      	ldr	r1, [r3, #8]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	e00f      	b.n	8001e1e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e1c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 0202 	bic.w	r2, r2, #2
 8001e2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6899      	ldr	r1, [r3, #8]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	7e1b      	ldrb	r3, [r3, #24]
 8001e38:	005a      	lsls	r2, r3, #1
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d01b      	beq.n	8001e84 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e5a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	685a      	ldr	r2, [r3, #4]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e6a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6859      	ldr	r1, [r3, #4]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e76:	3b01      	subs	r3, #1
 8001e78:	035a      	lsls	r2, r3, #13
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	605a      	str	r2, [r3, #4]
 8001e82:	e007      	b.n	8001e94 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	685a      	ldr	r2, [r3, #4]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e92:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ea2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	051a      	lsls	r2, r3, #20
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ec8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	6899      	ldr	r1, [r3, #8]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ed6:	025a      	lsls	r2, r3, #9
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	430a      	orrs	r2, r1
 8001ede:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689a      	ldr	r2, [r3, #8]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6899      	ldr	r1, [r3, #8]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	029a      	lsls	r2, r3, #10
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	430a      	orrs	r2, r1
 8001f02:	609a      	str	r2, [r3, #8]
}
 8001f04:	bf00      	nop
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	40012300 	.word	0x40012300
 8001f14:	0f000001 	.word	0x0f000001

08001f18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f28:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <__NVIC_SetPriorityGrouping+0x44>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f2e:	68ba      	ldr	r2, [r7, #8]
 8001f30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f34:	4013      	ands	r3, r2
 8001f36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f4a:	4a04      	ldr	r2, [pc, #16]	; (8001f5c <__NVIC_SetPriorityGrouping+0x44>)
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	60d3      	str	r3, [r2, #12]
}
 8001f50:	bf00      	nop
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f64:	4b04      	ldr	r3, [pc, #16]	; (8001f78 <__NVIC_GetPriorityGrouping+0x18>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	0a1b      	lsrs	r3, r3, #8
 8001f6a:	f003 0307 	and.w	r3, r3, #7
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	e000ed00 	.word	0xe000ed00

08001f7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	db0b      	blt.n	8001fa6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	f003 021f 	and.w	r2, r3, #31
 8001f94:	4907      	ldr	r1, [pc, #28]	; (8001fb4 <__NVIC_EnableIRQ+0x38>)
 8001f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9a:	095b      	lsrs	r3, r3, #5
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	e000e100 	.word	0xe000e100

08001fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	6039      	str	r1, [r7, #0]
 8001fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	db0a      	blt.n	8001fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	490c      	ldr	r1, [pc, #48]	; (8002004 <__NVIC_SetPriority+0x4c>)
 8001fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd6:	0112      	lsls	r2, r2, #4
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	440b      	add	r3, r1
 8001fdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fe0:	e00a      	b.n	8001ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	4908      	ldr	r1, [pc, #32]	; (8002008 <__NVIC_SetPriority+0x50>)
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	3b04      	subs	r3, #4
 8001ff0:	0112      	lsls	r2, r2, #4
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	761a      	strb	r2, [r3, #24]
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	e000e100 	.word	0xe000e100
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800200c:	b480      	push	{r7}
 800200e:	b089      	sub	sp, #36	; 0x24
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	f1c3 0307 	rsb	r3, r3, #7
 8002026:	2b04      	cmp	r3, #4
 8002028:	bf28      	it	cs
 800202a:	2304      	movcs	r3, #4
 800202c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	3304      	adds	r3, #4
 8002032:	2b06      	cmp	r3, #6
 8002034:	d902      	bls.n	800203c <NVIC_EncodePriority+0x30>
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	3b03      	subs	r3, #3
 800203a:	e000      	b.n	800203e <NVIC_EncodePriority+0x32>
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002040:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43da      	mvns	r2, r3
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	401a      	ands	r2, r3
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002054:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	fa01 f303 	lsl.w	r3, r1, r3
 800205e:	43d9      	mvns	r1, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002064:	4313      	orrs	r3, r2
         );
}
 8002066:	4618      	mov	r0, r3
 8002068:	3724      	adds	r7, #36	; 0x24
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
	...

08002074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3b01      	subs	r3, #1
 8002080:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002084:	d301      	bcc.n	800208a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002086:	2301      	movs	r3, #1
 8002088:	e00f      	b.n	80020aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800208a:	4a0a      	ldr	r2, [pc, #40]	; (80020b4 <SysTick_Config+0x40>)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3b01      	subs	r3, #1
 8002090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002092:	210f      	movs	r1, #15
 8002094:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002098:	f7ff ff8e 	bl	8001fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800209c:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <SysTick_Config+0x40>)
 800209e:	2200      	movs	r2, #0
 80020a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020a2:	4b04      	ldr	r3, [pc, #16]	; (80020b4 <SysTick_Config+0x40>)
 80020a4:	2207      	movs	r2, #7
 80020a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	e000e010 	.word	0xe000e010

080020b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7ff ff29 	bl	8001f18 <__NVIC_SetPriorityGrouping>
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b086      	sub	sp, #24
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	4603      	mov	r3, r0
 80020d6:	60b9      	str	r1, [r7, #8]
 80020d8:	607a      	str	r2, [r7, #4]
 80020da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020e0:	f7ff ff3e 	bl	8001f60 <__NVIC_GetPriorityGrouping>
 80020e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	68b9      	ldr	r1, [r7, #8]
 80020ea:	6978      	ldr	r0, [r7, #20]
 80020ec:	f7ff ff8e 	bl	800200c <NVIC_EncodePriority>
 80020f0:	4602      	mov	r2, r0
 80020f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f6:	4611      	mov	r1, r2
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff ff5d 	bl	8001fb8 <__NVIC_SetPriority>
}
 80020fe:	bf00      	nop
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	4603      	mov	r3, r0
 800210e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff ff31 	bl	8001f7c <__NVIC_EnableIRQ>
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7ff ffa2 	bl	8002074 <SysTick_Config>
 8002130:	4603      	mov	r3, r0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
	...

0800213c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002148:	f7ff fc78 	bl	8001a3c <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e099      	b.n	800228c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2202      	movs	r2, #2
 8002164:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0201 	bic.w	r2, r2, #1
 8002176:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002178:	e00f      	b.n	800219a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800217a:	f7ff fc5f 	bl	8001a3c <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b05      	cmp	r3, #5
 8002186:	d908      	bls.n	800219a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2220      	movs	r2, #32
 800218c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2203      	movs	r2, #3
 8002192:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e078      	b.n	800228c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1e8      	bne.n	800217a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	4b38      	ldr	r3, [pc, #224]	; (8002294 <HAL_DMA_Init+0x158>)
 80021b4:	4013      	ands	r3, r2
 80021b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f0:	2b04      	cmp	r3, #4
 80021f2:	d107      	bne.n	8002204 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fc:	4313      	orrs	r3, r2
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	4313      	orrs	r3, r2
 8002202:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	697a      	ldr	r2, [r7, #20]
 800220a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	f023 0307 	bic.w	r3, r3, #7
 800221a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	4313      	orrs	r3, r2
 8002224:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222a:	2b04      	cmp	r3, #4
 800222c:	d117      	bne.n	800225e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	4313      	orrs	r3, r2
 8002236:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00e      	beq.n	800225e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 fa6f 	bl	8002724 <DMA_CheckFifoParam>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d008      	beq.n	800225e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2240      	movs	r2, #64	; 0x40
 8002250:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800225a:	2301      	movs	r3, #1
 800225c:	e016      	b.n	800228c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 fa26 	bl	80026b8 <DMA_CalcBaseAndBitshift>
 800226c:	4603      	mov	r3, r0
 800226e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002274:	223f      	movs	r2, #63	; 0x3f
 8002276:	409a      	lsls	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2201      	movs	r2, #1
 8002286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	f010803f 	.word	0xf010803f

08002298 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
 80022a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022a6:	2300      	movs	r3, #0
 80022a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d101      	bne.n	80022be <HAL_DMA_Start_IT+0x26>
 80022ba:	2302      	movs	r3, #2
 80022bc:	e040      	b.n	8002340 <HAL_DMA_Start_IT+0xa8>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d12f      	bne.n	8002332 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2202      	movs	r2, #2
 80022d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	68b9      	ldr	r1, [r7, #8]
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f000 f9b8 	bl	800265c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f0:	223f      	movs	r2, #63	; 0x3f
 80022f2:	409a      	lsls	r2, r3
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f042 0216 	orr.w	r2, r2, #22
 8002306:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230c:	2b00      	cmp	r3, #0
 800230e:	d007      	beq.n	8002320 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 0208 	orr.w	r2, r2, #8
 800231e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f042 0201 	orr.w	r2, r2, #1
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	e005      	b.n	800233e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800233a:	2302      	movs	r3, #2
 800233c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800233e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002340:	4618      	mov	r0, r3
 8002342:	3718      	adds	r7, #24
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002350:	2300      	movs	r3, #0
 8002352:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002354:	4b92      	ldr	r3, [pc, #584]	; (80025a0 <HAL_DMA_IRQHandler+0x258>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a92      	ldr	r2, [pc, #584]	; (80025a4 <HAL_DMA_IRQHandler+0x25c>)
 800235a:	fba2 2303 	umull	r2, r3, r2, r3
 800235e:	0a9b      	lsrs	r3, r3, #10
 8002360:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002366:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002372:	2208      	movs	r2, #8
 8002374:	409a      	lsls	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	4013      	ands	r3, r2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d01a      	beq.n	80023b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0304 	and.w	r3, r3, #4
 8002388:	2b00      	cmp	r3, #0
 800238a:	d013      	beq.n	80023b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f022 0204 	bic.w	r2, r2, #4
 800239a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a0:	2208      	movs	r2, #8
 80023a2:	409a      	lsls	r2, r3
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ac:	f043 0201 	orr.w	r2, r3, #1
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b8:	2201      	movs	r2, #1
 80023ba:	409a      	lsls	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	4013      	ands	r3, r2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d012      	beq.n	80023ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00b      	beq.n	80023ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d6:	2201      	movs	r2, #1
 80023d8:	409a      	lsls	r2, r3
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e2:	f043 0202 	orr.w	r2, r3, #2
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ee:	2204      	movs	r2, #4
 80023f0:	409a      	lsls	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	4013      	ands	r3, r2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d012      	beq.n	8002420 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00b      	beq.n	8002420 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800240c:	2204      	movs	r2, #4
 800240e:	409a      	lsls	r2, r3
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002418:	f043 0204 	orr.w	r2, r3, #4
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002424:	2210      	movs	r2, #16
 8002426:	409a      	lsls	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4013      	ands	r3, r2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d043      	beq.n	80024b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0308 	and.w	r3, r3, #8
 800243a:	2b00      	cmp	r3, #0
 800243c:	d03c      	beq.n	80024b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002442:	2210      	movs	r2, #16
 8002444:	409a      	lsls	r2, r3
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d018      	beq.n	800248a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d108      	bne.n	8002478 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	2b00      	cmp	r3, #0
 800246c:	d024      	beq.n	80024b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	4798      	blx	r3
 8002476:	e01f      	b.n	80024b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800247c:	2b00      	cmp	r3, #0
 800247e:	d01b      	beq.n	80024b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	4798      	blx	r3
 8002488:	e016      	b.n	80024b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002494:	2b00      	cmp	r3, #0
 8002496:	d107      	bne.n	80024a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f022 0208 	bic.w	r2, r2, #8
 80024a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d003      	beq.n	80024b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024bc:	2220      	movs	r2, #32
 80024be:	409a      	lsls	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4013      	ands	r3, r2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f000 808e 	beq.w	80025e6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0310 	and.w	r3, r3, #16
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f000 8086 	beq.w	80025e6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024de:	2220      	movs	r2, #32
 80024e0:	409a      	lsls	r2, r3
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b05      	cmp	r3, #5
 80024f0:	d136      	bne.n	8002560 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0216 	bic.w	r2, r2, #22
 8002500:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	695a      	ldr	r2, [r3, #20]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002510:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	2b00      	cmp	r3, #0
 8002518:	d103      	bne.n	8002522 <HAL_DMA_IRQHandler+0x1da>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800251e:	2b00      	cmp	r3, #0
 8002520:	d007      	beq.n	8002532 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 0208 	bic.w	r2, r2, #8
 8002530:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002536:	223f      	movs	r2, #63	; 0x3f
 8002538:	409a      	lsls	r2, r3
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002552:	2b00      	cmp	r3, #0
 8002554:	d07d      	beq.n	8002652 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	4798      	blx	r3
        }
        return;
 800255e:	e078      	b.n	8002652 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d01c      	beq.n	80025a8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d108      	bne.n	800258e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002580:	2b00      	cmp	r3, #0
 8002582:	d030      	beq.n	80025e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	4798      	blx	r3
 800258c:	e02b      	b.n	80025e6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002592:	2b00      	cmp	r3, #0
 8002594:	d027      	beq.n	80025e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	4798      	blx	r3
 800259e:	e022      	b.n	80025e6 <HAL_DMA_IRQHandler+0x29e>
 80025a0:	20000000 	.word	0x20000000
 80025a4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10f      	bne.n	80025d6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 0210 	bic.w	r2, r2, #16
 80025c4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d032      	beq.n	8002654 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d022      	beq.n	8002640 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2205      	movs	r2, #5
 80025fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 0201 	bic.w	r2, r2, #1
 8002610:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	3301      	adds	r3, #1
 8002616:	60bb      	str	r3, [r7, #8]
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	429a      	cmp	r2, r3
 800261c:	d307      	bcc.n	800262e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1f2      	bne.n	8002612 <HAL_DMA_IRQHandler+0x2ca>
 800262c:	e000      	b.n	8002630 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800262e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002644:	2b00      	cmp	r3, #0
 8002646:	d005      	beq.n	8002654 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	4798      	blx	r3
 8002650:	e000      	b.n	8002654 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002652:	bf00      	nop
    }
  }
}
 8002654:	3718      	adds	r7, #24
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop

0800265c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
 8002668:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002678:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	2b40      	cmp	r3, #64	; 0x40
 8002688:	d108      	bne.n	800269c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800269a:	e007      	b.n	80026ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68ba      	ldr	r2, [r7, #8]
 80026a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	60da      	str	r2, [r3, #12]
}
 80026ac:	bf00      	nop
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	3b10      	subs	r3, #16
 80026c8:	4a14      	ldr	r2, [pc, #80]	; (800271c <DMA_CalcBaseAndBitshift+0x64>)
 80026ca:	fba2 2303 	umull	r2, r3, r2, r3
 80026ce:	091b      	lsrs	r3, r3, #4
 80026d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026d2:	4a13      	ldr	r2, [pc, #76]	; (8002720 <DMA_CalcBaseAndBitshift+0x68>)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4413      	add	r3, r2
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	461a      	mov	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2b03      	cmp	r3, #3
 80026e4:	d909      	bls.n	80026fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026ee:	f023 0303 	bic.w	r3, r3, #3
 80026f2:	1d1a      	adds	r2, r3, #4
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	659a      	str	r2, [r3, #88]	; 0x58
 80026f8:	e007      	b.n	800270a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002702:	f023 0303 	bic.w	r3, r3, #3
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800270e:	4618      	mov	r0, r3
 8002710:	3714      	adds	r7, #20
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	aaaaaaab 	.word	0xaaaaaaab
 8002720:	08005e1c 	.word	0x08005e1c

08002724 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800272c:	2300      	movs	r3, #0
 800272e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002734:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d11f      	bne.n	800277e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	2b03      	cmp	r3, #3
 8002742:	d855      	bhi.n	80027f0 <DMA_CheckFifoParam+0xcc>
 8002744:	a201      	add	r2, pc, #4	; (adr r2, 800274c <DMA_CheckFifoParam+0x28>)
 8002746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800274a:	bf00      	nop
 800274c:	0800275d 	.word	0x0800275d
 8002750:	0800276f 	.word	0x0800276f
 8002754:	0800275d 	.word	0x0800275d
 8002758:	080027f1 	.word	0x080027f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002760:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d045      	beq.n	80027f4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800276c:	e042      	b.n	80027f4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002772:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002776:	d13f      	bne.n	80027f8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800277c:	e03c      	b.n	80027f8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002786:	d121      	bne.n	80027cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	2b03      	cmp	r3, #3
 800278c:	d836      	bhi.n	80027fc <DMA_CheckFifoParam+0xd8>
 800278e:	a201      	add	r2, pc, #4	; (adr r2, 8002794 <DMA_CheckFifoParam+0x70>)
 8002790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002794:	080027a5 	.word	0x080027a5
 8002798:	080027ab 	.word	0x080027ab
 800279c:	080027a5 	.word	0x080027a5
 80027a0:	080027bd 	.word	0x080027bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	73fb      	strb	r3, [r7, #15]
      break;
 80027a8:	e02f      	b.n	800280a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d024      	beq.n	8002800 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027ba:	e021      	b.n	8002800 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027c4:	d11e      	bne.n	8002804 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027ca:	e01b      	b.n	8002804 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d902      	bls.n	80027d8 <DMA_CheckFifoParam+0xb4>
 80027d2:	2b03      	cmp	r3, #3
 80027d4:	d003      	beq.n	80027de <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027d6:	e018      	b.n	800280a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	73fb      	strb	r3, [r7, #15]
      break;
 80027dc:	e015      	b.n	800280a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00e      	beq.n	8002808 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	73fb      	strb	r3, [r7, #15]
      break;
 80027ee:	e00b      	b.n	8002808 <DMA_CheckFifoParam+0xe4>
      break;
 80027f0:	bf00      	nop
 80027f2:	e00a      	b.n	800280a <DMA_CheckFifoParam+0xe6>
      break;
 80027f4:	bf00      	nop
 80027f6:	e008      	b.n	800280a <DMA_CheckFifoParam+0xe6>
      break;
 80027f8:	bf00      	nop
 80027fa:	e006      	b.n	800280a <DMA_CheckFifoParam+0xe6>
      break;
 80027fc:	bf00      	nop
 80027fe:	e004      	b.n	800280a <DMA_CheckFifoParam+0xe6>
      break;
 8002800:	bf00      	nop
 8002802:	e002      	b.n	800280a <DMA_CheckFifoParam+0xe6>
      break;   
 8002804:	bf00      	nop
 8002806:	e000      	b.n	800280a <DMA_CheckFifoParam+0xe6>
      break;
 8002808:	bf00      	nop
    }
  } 
  
  return status; 
 800280a:	7bfb      	ldrb	r3, [r7, #15]
}
 800280c:	4618      	mov	r0, r3
 800280e:	3714      	adds	r7, #20
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002818:	b480      	push	{r7}
 800281a:	b089      	sub	sp, #36	; 0x24
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002822:	2300      	movs	r3, #0
 8002824:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002826:	2300      	movs	r3, #0
 8002828:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800282a:	2300      	movs	r3, #0
 800282c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800282e:	2300      	movs	r3, #0
 8002830:	61fb      	str	r3, [r7, #28]
 8002832:	e16b      	b.n	8002b0c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002834:	2201      	movs	r2, #1
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	4013      	ands	r3, r2
 8002846:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	429a      	cmp	r2, r3
 800284e:	f040 815a 	bne.w	8002b06 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d00b      	beq.n	8002872 <HAL_GPIO_Init+0x5a>
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b02      	cmp	r3, #2
 8002860:	d007      	beq.n	8002872 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002866:	2b11      	cmp	r3, #17
 8002868:	d003      	beq.n	8002872 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b12      	cmp	r3, #18
 8002870:	d130      	bne.n	80028d4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	2203      	movs	r2, #3
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	43db      	mvns	r3, r3
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	4013      	ands	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	68da      	ldr	r2, [r3, #12]
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4313      	orrs	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028a8:	2201      	movs	r2, #1
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	43db      	mvns	r3, r3
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	4013      	ands	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	091b      	lsrs	r3, r3, #4
 80028be:	f003 0201 	and.w	r2, r3, #1
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	2203      	movs	r2, #3
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	43db      	mvns	r3, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4013      	ands	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	2b02      	cmp	r3, #2
 800290a:	d003      	beq.n	8002914 <HAL_GPIO_Init+0xfc>
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	2b12      	cmp	r3, #18
 8002912:	d123      	bne.n	800295c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	08da      	lsrs	r2, r3, #3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3208      	adds	r2, #8
 800291c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002920:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	220f      	movs	r2, #15
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	43db      	mvns	r3, r3
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4013      	ands	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	691a      	ldr	r2, [r3, #16]
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	f003 0307 	and.w	r3, r3, #7
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	4313      	orrs	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	08da      	lsrs	r2, r3, #3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	3208      	adds	r2, #8
 8002956:	69b9      	ldr	r1, [r7, #24]
 8002958:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	2203      	movs	r2, #3
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	43db      	mvns	r3, r3
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4013      	ands	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 0203 	and.w	r2, r3, #3
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	4313      	orrs	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 80b4 	beq.w	8002b06 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800299e:	2300      	movs	r3, #0
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	4b5f      	ldr	r3, [pc, #380]	; (8002b20 <HAL_GPIO_Init+0x308>)
 80029a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a6:	4a5e      	ldr	r2, [pc, #376]	; (8002b20 <HAL_GPIO_Init+0x308>)
 80029a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029ac:	6453      	str	r3, [r2, #68]	; 0x44
 80029ae:	4b5c      	ldr	r3, [pc, #368]	; (8002b20 <HAL_GPIO_Init+0x308>)
 80029b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029b6:	60fb      	str	r3, [r7, #12]
 80029b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029ba:	4a5a      	ldr	r2, [pc, #360]	; (8002b24 <HAL_GPIO_Init+0x30c>)
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	089b      	lsrs	r3, r3, #2
 80029c0:	3302      	adds	r3, #2
 80029c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	f003 0303 	and.w	r3, r3, #3
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	220f      	movs	r2, #15
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	43db      	mvns	r3, r3
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	4013      	ands	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a51      	ldr	r2, [pc, #324]	; (8002b28 <HAL_GPIO_Init+0x310>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d02b      	beq.n	8002a3e <HAL_GPIO_Init+0x226>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a50      	ldr	r2, [pc, #320]	; (8002b2c <HAL_GPIO_Init+0x314>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d025      	beq.n	8002a3a <HAL_GPIO_Init+0x222>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a4f      	ldr	r2, [pc, #316]	; (8002b30 <HAL_GPIO_Init+0x318>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d01f      	beq.n	8002a36 <HAL_GPIO_Init+0x21e>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a4e      	ldr	r2, [pc, #312]	; (8002b34 <HAL_GPIO_Init+0x31c>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d019      	beq.n	8002a32 <HAL_GPIO_Init+0x21a>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a4d      	ldr	r2, [pc, #308]	; (8002b38 <HAL_GPIO_Init+0x320>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d013      	beq.n	8002a2e <HAL_GPIO_Init+0x216>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a4c      	ldr	r2, [pc, #304]	; (8002b3c <HAL_GPIO_Init+0x324>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d00d      	beq.n	8002a2a <HAL_GPIO_Init+0x212>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a4b      	ldr	r2, [pc, #300]	; (8002b40 <HAL_GPIO_Init+0x328>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d007      	beq.n	8002a26 <HAL_GPIO_Init+0x20e>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a4a      	ldr	r2, [pc, #296]	; (8002b44 <HAL_GPIO_Init+0x32c>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d101      	bne.n	8002a22 <HAL_GPIO_Init+0x20a>
 8002a1e:	2307      	movs	r3, #7
 8002a20:	e00e      	b.n	8002a40 <HAL_GPIO_Init+0x228>
 8002a22:	2308      	movs	r3, #8
 8002a24:	e00c      	b.n	8002a40 <HAL_GPIO_Init+0x228>
 8002a26:	2306      	movs	r3, #6
 8002a28:	e00a      	b.n	8002a40 <HAL_GPIO_Init+0x228>
 8002a2a:	2305      	movs	r3, #5
 8002a2c:	e008      	b.n	8002a40 <HAL_GPIO_Init+0x228>
 8002a2e:	2304      	movs	r3, #4
 8002a30:	e006      	b.n	8002a40 <HAL_GPIO_Init+0x228>
 8002a32:	2303      	movs	r3, #3
 8002a34:	e004      	b.n	8002a40 <HAL_GPIO_Init+0x228>
 8002a36:	2302      	movs	r3, #2
 8002a38:	e002      	b.n	8002a40 <HAL_GPIO_Init+0x228>
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e000      	b.n	8002a40 <HAL_GPIO_Init+0x228>
 8002a3e:	2300      	movs	r3, #0
 8002a40:	69fa      	ldr	r2, [r7, #28]
 8002a42:	f002 0203 	and.w	r2, r2, #3
 8002a46:	0092      	lsls	r2, r2, #2
 8002a48:	4093      	lsls	r3, r2
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a50:	4934      	ldr	r1, [pc, #208]	; (8002b24 <HAL_GPIO_Init+0x30c>)
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	089b      	lsrs	r3, r3, #2
 8002a56:	3302      	adds	r3, #2
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a5e:	4b3a      	ldr	r3, [pc, #232]	; (8002b48 <HAL_GPIO_Init+0x330>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	43db      	mvns	r3, r3
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a82:	4a31      	ldr	r2, [pc, #196]	; (8002b48 <HAL_GPIO_Init+0x330>)
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a88:	4b2f      	ldr	r3, [pc, #188]	; (8002b48 <HAL_GPIO_Init+0x330>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	43db      	mvns	r3, r3
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	4013      	ands	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d003      	beq.n	8002aac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aac:	4a26      	ldr	r2, [pc, #152]	; (8002b48 <HAL_GPIO_Init+0x330>)
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ab2:	4b25      	ldr	r3, [pc, #148]	; (8002b48 <HAL_GPIO_Init+0x330>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	43db      	mvns	r3, r3
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ad6:	4a1c      	ldr	r2, [pc, #112]	; (8002b48 <HAL_GPIO_Init+0x330>)
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002adc:	4b1a      	ldr	r3, [pc, #104]	; (8002b48 <HAL_GPIO_Init+0x330>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d003      	beq.n	8002b00 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b00:	4a11      	ldr	r2, [pc, #68]	; (8002b48 <HAL_GPIO_Init+0x330>)
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	3301      	adds	r3, #1
 8002b0a:	61fb      	str	r3, [r7, #28]
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	2b0f      	cmp	r3, #15
 8002b10:	f67f ae90 	bls.w	8002834 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b14:	bf00      	nop
 8002b16:	3724      	adds	r7, #36	; 0x24
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	40023800 	.word	0x40023800
 8002b24:	40013800 	.word	0x40013800
 8002b28:	40020000 	.word	0x40020000
 8002b2c:	40020400 	.word	0x40020400
 8002b30:	40020800 	.word	0x40020800
 8002b34:	40020c00 	.word	0x40020c00
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	40021400 	.word	0x40021400
 8002b40:	40021800 	.word	0x40021800
 8002b44:	40021c00 	.word	0x40021c00
 8002b48:	40013c00 	.word	0x40013c00

08002b4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	460b      	mov	r3, r1
 8002b56:	807b      	strh	r3, [r7, #2]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b5c:	787b      	ldrb	r3, [r7, #1]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b62:	887a      	ldrh	r2, [r7, #2]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b68:	e003      	b.n	8002b72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b6a:	887b      	ldrh	r3, [r7, #2]
 8002b6c:	041a      	lsls	r2, r3, #16
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	619a      	str	r2, [r3, #24]
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
	...

08002b80 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b088      	sub	sp, #32
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e128      	b.n	8002de4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d109      	bne.n	8002bb2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a90      	ldr	r2, [pc, #576]	; (8002dec <HAL_I2S_Init+0x26c>)
 8002baa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f7fe faa1 	bl	80010f4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6812      	ldr	r2, [r2, #0]
 8002bc4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002bc8:	f023 030f 	bic.w	r3, r3, #15
 8002bcc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d060      	beq.n	8002ca0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d102      	bne.n	8002bec <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002be6:	2310      	movs	r3, #16
 8002be8:	617b      	str	r3, [r7, #20]
 8002bea:	e001      	b.n	8002bf0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002bec:	2320      	movs	r3, #32
 8002bee:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	2b20      	cmp	r3, #32
 8002bf6:	d802      	bhi.n	8002bfe <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002bfe:	2001      	movs	r0, #1
 8002c00:	f001 fbb2 	bl	8004368 <HAL_RCCEx_GetPeriphCLKFreq>
 8002c04:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c0e:	d125      	bne.n	8002c5c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d010      	beq.n	8002c3a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c22:	4613      	mov	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c34:	3305      	adds	r3, #5
 8002c36:	613b      	str	r3, [r7, #16]
 8002c38:	e01f      	b.n	8002c7a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c44:	4613      	mov	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4413      	add	r3, r2
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c56:	3305      	adds	r3, #5
 8002c58:	613b      	str	r3, [r7, #16]
 8002c5a:	e00e      	b.n	8002c7a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c64:	4613      	mov	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	4413      	add	r3, r2
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c76:	3305      	adds	r3, #5
 8002c78:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	4a5c      	ldr	r2, [pc, #368]	; (8002df0 <HAL_I2S_Init+0x270>)
 8002c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c82:	08db      	lsrs	r3, r3, #3
 8002c84:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	085b      	lsrs	r3, r3, #1
 8002c96:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	021b      	lsls	r3, r3, #8
 8002c9c:	61bb      	str	r3, [r7, #24]
 8002c9e:	e003      	b.n	8002ca8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d902      	bls.n	8002cb4 <HAL_I2S_Init+0x134>
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	2bff      	cmp	r3, #255	; 0xff
 8002cb2:	d907      	bls.n	8002cc4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb8:	f043 0210 	orr.w	r2, r3, #16
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e08f      	b.n	8002de4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	691a      	ldr	r2, [r3, #16]
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	ea42 0103 	orr.w	r1, r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	69fa      	ldr	r2, [r7, #28]
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002ce2:	f023 030f 	bic.w	r3, r3, #15
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	6851      	ldr	r1, [r2, #4]
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	6892      	ldr	r2, [r2, #8]
 8002cee:	4311      	orrs	r1, r2
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	68d2      	ldr	r2, [r2, #12]
 8002cf4:	4311      	orrs	r1, r2
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	6992      	ldr	r2, [r2, #24]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d06:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d161      	bne.n	8002dd4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a38      	ldr	r2, [pc, #224]	; (8002df4 <HAL_I2S_Init+0x274>)
 8002d14:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a37      	ldr	r2, [pc, #220]	; (8002df8 <HAL_I2S_Init+0x278>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d101      	bne.n	8002d24 <HAL_I2S_Init+0x1a4>
 8002d20:	4b36      	ldr	r3, [pc, #216]	; (8002dfc <HAL_I2S_Init+0x27c>)
 8002d22:	e001      	b.n	8002d28 <HAL_I2S_Init+0x1a8>
 8002d24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	6812      	ldr	r2, [r2, #0]
 8002d2e:	4932      	ldr	r1, [pc, #200]	; (8002df8 <HAL_I2S_Init+0x278>)
 8002d30:	428a      	cmp	r2, r1
 8002d32:	d101      	bne.n	8002d38 <HAL_I2S_Init+0x1b8>
 8002d34:	4a31      	ldr	r2, [pc, #196]	; (8002dfc <HAL_I2S_Init+0x27c>)
 8002d36:	e001      	b.n	8002d3c <HAL_I2S_Init+0x1bc>
 8002d38:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002d3c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002d40:	f023 030f 	bic.w	r3, r3, #15
 8002d44:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a2b      	ldr	r2, [pc, #172]	; (8002df8 <HAL_I2S_Init+0x278>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d101      	bne.n	8002d54 <HAL_I2S_Init+0x1d4>
 8002d50:	4b2a      	ldr	r3, [pc, #168]	; (8002dfc <HAL_I2S_Init+0x27c>)
 8002d52:	e001      	b.n	8002d58 <HAL_I2S_Init+0x1d8>
 8002d54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d58:	2202      	movs	r2, #2
 8002d5a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a25      	ldr	r2, [pc, #148]	; (8002df8 <HAL_I2S_Init+0x278>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d101      	bne.n	8002d6a <HAL_I2S_Init+0x1ea>
 8002d66:	4b25      	ldr	r3, [pc, #148]	; (8002dfc <HAL_I2S_Init+0x27c>)
 8002d68:	e001      	b.n	8002d6e <HAL_I2S_Init+0x1ee>
 8002d6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d6e:	69db      	ldr	r3, [r3, #28]
 8002d70:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d7a:	d003      	beq.n	8002d84 <HAL_I2S_Init+0x204>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d103      	bne.n	8002d8c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002d84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d88:	613b      	str	r3, [r7, #16]
 8002d8a:	e001      	b.n	8002d90 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	b299      	uxth	r1, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002da6:	4303      	orrs	r3, r0
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	430b      	orrs	r3, r1
 8002dac:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002dae:	4313      	orrs	r3, r2
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	897b      	ldrh	r3, [r7, #10]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002dbc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a0d      	ldr	r2, [pc, #52]	; (8002df8 <HAL_I2S_Init+0x278>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d101      	bne.n	8002dcc <HAL_I2S_Init+0x24c>
 8002dc8:	4b0c      	ldr	r3, [pc, #48]	; (8002dfc <HAL_I2S_Init+0x27c>)
 8002dca:	e001      	b.n	8002dd0 <HAL_I2S_Init+0x250>
 8002dcc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dd0:	897a      	ldrh	r2, [r7, #10]
 8002dd2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3720      	adds	r7, #32
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	08002ef7 	.word	0x08002ef7
 8002df0:	cccccccd 	.word	0xcccccccd
 8002df4:	08003321 	.word	0x08003321
 8002df8:	40003800 	.word	0x40003800
 8002dfc:	40003400 	.word	0x40003400

08002e00 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e48:	881a      	ldrh	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e54:	1c9a      	adds	r2, r3, #2
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	3b01      	subs	r3, #1
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10e      	bne.n	8002e90 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e80:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7ff ffb8 	bl	8002e00 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002e90:	bf00      	nop
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68da      	ldr	r2, [r3, #12]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eaa:	b292      	uxth	r2, r2
 8002eac:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb2:	1c9a      	adds	r2, r3, #2
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10e      	bne.n	8002eee <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	685a      	ldr	r2, [r3, #4]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ede:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f7ff ff93 	bl	8002e14 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002eee:	bf00      	nop
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b086      	sub	sp, #24
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b04      	cmp	r3, #4
 8002f10:	d13a      	bne.n	8002f88 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d109      	bne.n	8002f30 <I2S_IRQHandler+0x3a>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f26:	2b40      	cmp	r3, #64	; 0x40
 8002f28:	d102      	bne.n	8002f30 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7ff ffb4 	bl	8002e98 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f36:	2b40      	cmp	r3, #64	; 0x40
 8002f38:	d126      	bne.n	8002f88 <I2S_IRQHandler+0x92>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f003 0320 	and.w	r3, r3, #32
 8002f44:	2b20      	cmp	r3, #32
 8002f46:	d11f      	bne.n	8002f88 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685a      	ldr	r2, [r3, #4]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f56:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002f58:	2300      	movs	r3, #0
 8002f5a:	613b      	str	r3, [r7, #16]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	613b      	str	r3, [r7, #16]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	613b      	str	r3, [r7, #16]
 8002f6c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7a:	f043 0202 	orr.w	r2, r3, #2
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f7ff ff50 	bl	8002e28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b03      	cmp	r3, #3
 8002f92:	d136      	bne.n	8003002 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d109      	bne.n	8002fb2 <I2S_IRQHandler+0xbc>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa8:	2b80      	cmp	r3, #128	; 0x80
 8002faa:	d102      	bne.n	8002fb2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f7ff ff45 	bl	8002e3c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	f003 0308 	and.w	r3, r3, #8
 8002fb8:	2b08      	cmp	r3, #8
 8002fba:	d122      	bne.n	8003002 <I2S_IRQHandler+0x10c>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f003 0320 	and.w	r3, r3, #32
 8002fc6:	2b20      	cmp	r3, #32
 8002fc8:	d11b      	bne.n	8003002 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002fd8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60fb      	str	r3, [r7, #12]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	60fb      	str	r3, [r7, #12]
 8002fe6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff4:	f043 0204 	orr.w	r2, r3, #4
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f7ff ff13 	bl	8002e28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003002:	bf00      	nop
 8003004:	3718      	adds	r7, #24
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
	...

0800300c <HAL_I2SEx_TransmitReceive_DMA>:
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pTxData, uint16_t *pRxData,
                                                uint16_t Size)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b088      	sub	sp, #32
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
 8003018:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 800301a:	2300      	movs	r3, #0
 800301c:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 800301e:	2300      	movs	r3, #0
 8003020:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003022:	2300      	movs	r3, #0
 8003024:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b01      	cmp	r3, #1
 8003030:	d002      	beq.n	8003038 <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 8003032:	2302      	movs	r3, #2
 8003034:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003036:	e160      	b.n	80032fa <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d005      	beq.n	800304a <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d002      	beq.n	800304a <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8003044:	887b      	ldrh	r3, [r7, #2]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e15a      	b.n	8003304 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b01      	cmp	r3, #1
 8003058:	d101      	bne.n	800305e <HAL_I2SEx_TransmitReceive_DMA+0x52>
 800305a:	2302      	movs	r3, #2
 800305c:	e152      	b.n	8003304 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 8003066:	68ba      	ldr	r2, [r7, #8]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	69db      	ldr	r3, [r3, #28]
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	2b03      	cmp	r3, #3
 8003082:	d002      	beq.n	800308a <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	2b05      	cmp	r3, #5
 8003088:	d114      	bne.n	80030b4 <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 800308a:	887b      	ldrh	r3, [r7, #2]
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	b29a      	uxth	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8003094:	887b      	ldrh	r3, [r7, #2]
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	b29a      	uxth	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 800309e:	887b      	ldrh	r3, [r7, #2]
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 80030a8:	887b      	ldrh	r3, [r7, #2]
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	865a      	strh	r2, [r3, #50]	; 0x32
 80030b2:	e00b      	b.n	80030cc <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	887a      	ldrh	r2, [r7, #2]
 80030b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	887a      	ldrh	r2, [r7, #2]
 80030be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	887a      	ldrh	r2, [r7, #2]
 80030c4:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	887a      	ldrh	r2, [r7, #2]
 80030ca:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2205      	movs	r2, #5
 80030d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030de:	4a8b      	ldr	r2, [pc, #556]	; (800330c <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 80030e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e6:	4a8a      	ldr	r2, [pc, #552]	; (8003310 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 80030e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ee:	4a89      	ldr	r2, [pc, #548]	; (8003314 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 80030f0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback  = I2SEx_TxRxDMAHalfCplt;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f6:	4a85      	ldr	r2, [pc, #532]	; (800330c <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 80030f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fe:	4a84      	ldr	r2, [pc, #528]	; (8003310 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8003100:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003106:	4a83      	ldr	r2, [pc, #524]	; (8003314 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8003108:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	69db      	ldr	r3, [r3, #28]
 8003110:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003114:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800311c:	d002      	beq.n	8003124 <HAL_I2SEx_TransmitReceive_DMA+0x118>
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d16b      	bne.n	80031fc <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8003124:	1d3b      	adds	r3, r7, #4
 8003126:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a79      	ldr	r2, [pc, #484]	; (8003318 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d101      	bne.n	800313a <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 8003136:	4b79      	ldr	r3, [pc, #484]	; (800331c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003138:	e001      	b.n	800313e <HAL_I2SEx_TransmitReceive_DMA+0x132>
 800313a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800313e:	330c      	adds	r3, #12
 8003140:	4619      	mov	r1, r3
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800314a:	b29b      	uxth	r3, r3
 800314c:	f7ff f8a4 	bl	8002298 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a70      	ldr	r2, [pc, #448]	; (8003318 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d101      	bne.n	800315e <HAL_I2SEx_TransmitReceive_DMA+0x152>
 800315a:	4b70      	ldr	r3, [pc, #448]	; (800331c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800315c:	e001      	b.n	8003162 <HAL_I2SEx_TransmitReceive_DMA+0x156>
 800315e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	496b      	ldr	r1, [pc, #428]	; (8003318 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800316a:	428b      	cmp	r3, r1
 800316c:	d101      	bne.n	8003172 <HAL_I2SEx_TransmitReceive_DMA+0x166>
 800316e:	4b6b      	ldr	r3, [pc, #428]	; (800331c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003170:	e001      	b.n	8003176 <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 8003172:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003176:	f042 0201 	orr.w	r2, r2, #1
 800317a:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 800317c:	f107 0308 	add.w	r3, r7, #8
 8003180:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	6819      	ldr	r1, [r3, #0]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	330c      	adds	r3, #12
 8003190:	461a      	mov	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003196:	b29b      	uxth	r3, r3
 8003198:	f7ff f87e 	bl	8002298 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0202 	orr.w	r2, r2, #2
 80031aa:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ba:	f000 809e 	beq.w	80032fa <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a55      	ldr	r2, [pc, #340]	; (8003318 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d101      	bne.n	80031cc <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 80031c8:	4b54      	ldr	r3, [pc, #336]	; (800331c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80031ca:	e001      	b.n	80031d0 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 80031cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031d0:	69da      	ldr	r2, [r3, #28]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4950      	ldr	r1, [pc, #320]	; (8003318 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80031d8:	428b      	cmp	r3, r1
 80031da:	d101      	bne.n	80031e0 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 80031dc:	4b4f      	ldr	r3, [pc, #316]	; (800331c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80031de:	e001      	b.n	80031e4 <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 80031e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031e8:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	69da      	ldr	r2, [r3, #28]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031f8:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80031fa:	e07e      	b.n	80032fa <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003206:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800320a:	d10a      	bne.n	8003222 <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800320c:	2300      	movs	r3, #0
 800320e:	613b      	str	r3, [r7, #16]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	613b      	str	r3, [r7, #16]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	613b      	str	r3, [r7, #16]
 8003220:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8003222:	f107 0308 	add.w	r3, r7, #8
 8003226:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	6819      	ldr	r1, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a38      	ldr	r2, [pc, #224]	; (8003318 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d101      	bne.n	800323e <HAL_I2SEx_TransmitReceive_DMA+0x232>
 800323a:	4b38      	ldr	r3, [pc, #224]	; (800331c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800323c:	e001      	b.n	8003242 <HAL_I2SEx_TransmitReceive_DMA+0x236>
 800323e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003242:	330c      	adds	r3, #12
 8003244:	461a      	mov	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800324a:	b29b      	uxth	r3, r3
 800324c:	f7ff f824 	bl	8002298 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a30      	ldr	r2, [pc, #192]	; (8003318 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d101      	bne.n	800325e <HAL_I2SEx_TransmitReceive_DMA+0x252>
 800325a:	4b30      	ldr	r3, [pc, #192]	; (800331c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800325c:	e001      	b.n	8003262 <HAL_I2SEx_TransmitReceive_DMA+0x256>
 800325e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	492b      	ldr	r1, [pc, #172]	; (8003318 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800326a:	428b      	cmp	r3, r1
 800326c:	d101      	bne.n	8003272 <HAL_I2SEx_TransmitReceive_DMA+0x266>
 800326e:	4b2b      	ldr	r3, [pc, #172]	; (800331c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003270:	e001      	b.n	8003276 <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 8003272:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003276:	f042 0202 	orr.w	r2, r2, #2
 800327a:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 800327c:	1d3b      	adds	r3, r7, #4
 800327e:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	330c      	adds	r3, #12
 800328a:	4619      	mov	r1, r3
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003294:	b29b      	uxth	r3, r3
 8003296:	f7fe ffff 	bl	8002298 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f042 0201 	orr.w	r2, r2, #1
 80032a8:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	69db      	ldr	r3, [r3, #28]
 80032b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032b8:	d01e      	beq.n	80032f8 <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a16      	ldr	r2, [pc, #88]	; (8003318 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d101      	bne.n	80032c8 <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 80032c4:	4b15      	ldr	r3, [pc, #84]	; (800331c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80032c6:	e001      	b.n	80032cc <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 80032c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032cc:	69da      	ldr	r2, [r3, #28]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4911      	ldr	r1, [pc, #68]	; (8003318 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80032d4:	428b      	cmp	r3, r1
 80032d6:	d101      	bne.n	80032dc <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 80032d8:	4b10      	ldr	r3, [pc, #64]	; (800331c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80032da:	e001      	b.n	80032e0 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 80032dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032e4:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	69da      	ldr	r2, [r3, #28]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032f4:	61da      	str	r2, [r3, #28]
 80032f6:	e000      	b.n	80032fa <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 80032f8:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 8003302:	7ffb      	ldrb	r3, [r7, #31]
}
 8003304:	4618      	mov	r0, r3
 8003306:	3720      	adds	r7, #32
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	080035c9 	.word	0x080035c9
 8003310:	080035e5 	.word	0x080035e5
 8003314:	0800371d 	.word	0x0800371d
 8003318:	40003800 	.word	0x40003800
 800331c:	40003400 	.word	0x40003400

08003320 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b088      	sub	sp, #32
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4aa2      	ldr	r2, [pc, #648]	; (80035c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d101      	bne.n	800333e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800333a:	4ba2      	ldr	r3, [pc, #648]	; (80035c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800333c:	e001      	b.n	8003342 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800333e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a9b      	ldr	r2, [pc, #620]	; (80035c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d101      	bne.n	800335c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003358:	4b9a      	ldr	r3, [pc, #616]	; (80035c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800335a:	e001      	b.n	8003360 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800335c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800336c:	d004      	beq.n	8003378 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	f040 8099 	bne.w	80034aa <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b02      	cmp	r3, #2
 8003380:	d107      	bne.n	8003392 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003388:	2b00      	cmp	r3, #0
 800338a:	d002      	beq.n	8003392 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 fa05 	bl	800379c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b01      	cmp	r3, #1
 800339a:	d107      	bne.n	80033ac <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d002      	beq.n	80033ac <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 faa8 	bl	80038fc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b2:	2b40      	cmp	r3, #64	; 0x40
 80033b4:	d13a      	bne.n	800342c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	f003 0320 	and.w	r3, r3, #32
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d035      	beq.n	800342c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a7e      	ldr	r2, [pc, #504]	; (80035c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d101      	bne.n	80033ce <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80033ca:	4b7e      	ldr	r3, [pc, #504]	; (80035c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80033cc:	e001      	b.n	80033d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80033ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4979      	ldr	r1, [pc, #484]	; (80035c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80033da:	428b      	cmp	r3, r1
 80033dc:	d101      	bne.n	80033e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80033de:	4b79      	ldr	r3, [pc, #484]	; (80035c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80033e0:	e001      	b.n	80033e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80033e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033ea:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033fa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80033fc:	2300      	movs	r3, #0
 80033fe:	60fb      	str	r3, [r7, #12]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	60fb      	str	r3, [r7, #12]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341e:	f043 0202 	orr.w	r2, r3, #2
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7ff fcfe 	bl	8002e28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	f003 0308 	and.w	r3, r3, #8
 8003432:	2b08      	cmp	r3, #8
 8003434:	f040 80be 	bne.w	80035b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	f003 0320 	and.w	r3, r3, #32
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 80b8 	beq.w	80035b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003452:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a59      	ldr	r2, [pc, #356]	; (80035c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d101      	bne.n	8003462 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800345e:	4b59      	ldr	r3, [pc, #356]	; (80035c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003460:	e001      	b.n	8003466 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003462:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4954      	ldr	r1, [pc, #336]	; (80035c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800346e:	428b      	cmp	r3, r1
 8003470:	d101      	bne.n	8003476 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003472:	4b54      	ldr	r3, [pc, #336]	; (80035c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003474:	e001      	b.n	800347a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003476:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800347a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800347e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003480:	2300      	movs	r3, #0
 8003482:	60bb      	str	r3, [r7, #8]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	60bb      	str	r3, [r7, #8]
 800348c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349a:	f043 0204 	orr.w	r2, r3, #4
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7ff fcc0 	bl	8002e28 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80034a8:	e084      	b.n	80035b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d107      	bne.n	80034c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d002      	beq.n	80034c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 f99e 	bl	8003800 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d107      	bne.n	80034de <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d002      	beq.n	80034de <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 f9dd 	bl	8003898 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e4:	2b40      	cmp	r3, #64	; 0x40
 80034e6:	d12f      	bne.n	8003548 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	f003 0320 	and.w	r3, r3, #32
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d02a      	beq.n	8003548 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003500:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a2e      	ldr	r2, [pc, #184]	; (80035c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d101      	bne.n	8003510 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800350c:	4b2d      	ldr	r3, [pc, #180]	; (80035c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800350e:	e001      	b.n	8003514 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003510:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4929      	ldr	r1, [pc, #164]	; (80035c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800351c:	428b      	cmp	r3, r1
 800351e:	d101      	bne.n	8003524 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003520:	4b28      	ldr	r3, [pc, #160]	; (80035c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003522:	e001      	b.n	8003528 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003524:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003528:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800352c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353a:	f043 0202 	orr.w	r2, r3, #2
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f7ff fc70 	bl	8002e28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	f003 0308 	and.w	r3, r3, #8
 800354e:	2b08      	cmp	r3, #8
 8003550:	d131      	bne.n	80035b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	f003 0320 	and.w	r3, r3, #32
 8003558:	2b00      	cmp	r3, #0
 800355a:	d02c      	beq.n	80035b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a17      	ldr	r2, [pc, #92]	; (80035c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d101      	bne.n	800356a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003566:	4b17      	ldr	r3, [pc, #92]	; (80035c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003568:	e001      	b.n	800356e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800356a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800356e:	685a      	ldr	r2, [r3, #4]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4912      	ldr	r1, [pc, #72]	; (80035c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003576:	428b      	cmp	r3, r1
 8003578:	d101      	bne.n	800357e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800357a:	4b12      	ldr	r3, [pc, #72]	; (80035c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800357c:	e001      	b.n	8003582 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800357e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003582:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003586:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003596:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a4:	f043 0204 	orr.w	r2, r3, #4
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f7ff fc3b 	bl	8002e28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035b2:	e000      	b.n	80035b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035b4:	bf00      	nop
}
 80035b6:	bf00      	nop
 80035b8:	3720      	adds	r7, #32
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	40003800 	.word	0x40003800
 80035c4:	40003400 	.word	0x40003400

080035c8 <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f7fd fff2 	bl	80015c0 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80035dc:	bf00      	nop
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f040 8084 	bne.w	8003704 <I2SEx_TxRxDMACplt+0x120>
  {
    if (hi2s->hdmarx == hdma)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	429a      	cmp	r2, r3
 8003604:	d13c      	bne.n	8003680 <I2SEx_TxRxDMACplt+0x9c>
    {
      /* Disable Rx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003614:	d006      	beq.n	8003624 <I2SEx_TxRxDMACplt+0x40>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	69db      	ldr	r3, [r3, #28]
 800361c:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8003620:	2b00      	cmp	r3, #0
 8003622:	d116      	bne.n	8003652 <I2SEx_TxRxDMACplt+0x6e>
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a3a      	ldr	r2, [pc, #232]	; (8003714 <I2SEx_TxRxDMACplt+0x130>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d101      	bne.n	8003632 <I2SEx_TxRxDMACplt+0x4e>
 800362e:	4b3a      	ldr	r3, [pc, #232]	; (8003718 <I2SEx_TxRxDMACplt+0x134>)
 8003630:	e001      	b.n	8003636 <I2SEx_TxRxDMACplt+0x52>
 8003632:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4935      	ldr	r1, [pc, #212]	; (8003714 <I2SEx_TxRxDMACplt+0x130>)
 800363e:	428b      	cmp	r3, r1
 8003640:	d101      	bne.n	8003646 <I2SEx_TxRxDMACplt+0x62>
 8003642:	4b35      	ldr	r3, [pc, #212]	; (8003718 <I2SEx_TxRxDMACplt+0x134>)
 8003644:	e001      	b.n	800364a <I2SEx_TxRxDMACplt+0x66>
 8003646:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800364a:	f022 0201 	bic.w	r2, r2, #1
 800364e:	605a      	str	r2, [r3, #4]
 8003650:	e007      	b.n	8003662 <I2SEx_TxRxDMACplt+0x7e>
      }
      else
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0201 	bic.w	r2, r2, #1
 8003660:	605a      	str	r2, [r3, #4]
      }

      hi2s->RxXferCount = 0U;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	865a      	strh	r2, [r3, #50]	; 0x32

      if (hi2s->TxXferCount == 0U)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366c:	b29b      	uxth	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d106      	bne.n	8003680 <I2SEx_TxRxDMACplt+0x9c>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f7fd ffd6 	bl	800162c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }

    if (hi2s->hdmatx == hdma)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	429a      	cmp	r2, r3
 8003688:	d13c      	bne.n	8003704 <I2SEx_TxRxDMACplt+0x120>
    {
      /* Disable Tx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	69db      	ldr	r3, [r3, #28]
 8003690:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003698:	d006      	beq.n	80036a8 <I2SEx_TxRxDMACplt+0xc4>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	69db      	ldr	r3, [r3, #28]
 80036a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d108      	bne.n	80036ba <I2SEx_TxRxDMACplt+0xd6>
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0202 	bic.w	r2, r2, #2
 80036b6:	605a      	str	r2, [r3, #4]
 80036b8:	e015      	b.n	80036e6 <I2SEx_TxRxDMACplt+0x102>
      }
      else
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a15      	ldr	r2, [pc, #84]	; (8003714 <I2SEx_TxRxDMACplt+0x130>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d101      	bne.n	80036c8 <I2SEx_TxRxDMACplt+0xe4>
 80036c4:	4b14      	ldr	r3, [pc, #80]	; (8003718 <I2SEx_TxRxDMACplt+0x134>)
 80036c6:	e001      	b.n	80036cc <I2SEx_TxRxDMACplt+0xe8>
 80036c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4910      	ldr	r1, [pc, #64]	; (8003714 <I2SEx_TxRxDMACplt+0x130>)
 80036d4:	428b      	cmp	r3, r1
 80036d6:	d101      	bne.n	80036dc <I2SEx_TxRxDMACplt+0xf8>
 80036d8:	4b0f      	ldr	r3, [pc, #60]	; (8003718 <I2SEx_TxRxDMACplt+0x134>)
 80036da:	e001      	b.n	80036e0 <I2SEx_TxRxDMACplt+0xfc>
 80036dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036e0:	f022 0202 	bic.w	r2, r2, #2
 80036e4:	605a      	str	r2, [r3, #4]
      }

      hi2s->TxXferCount = 0U;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2s->RxXferCount == 0U)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d106      	bne.n	8003704 <I2SEx_TxRxDMACplt+0x120>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f7fd ff94 	bl	800162c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }
  }
  // Fixes bug - https://github.com/STMicroelectronics/STM32CubeF4/issues/8
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f7fd ff91 	bl	800162c <HAL_I2SEx_TxRxCpltCallback>

}
 800370a:	bf00      	nop
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	40003800 	.word	0x40003800
 8003718:	40003400 	.word	0x40003400

0800371c <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003728:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 0203 	bic.w	r2, r2, #3
 8003738:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a15      	ldr	r2, [pc, #84]	; (8003794 <I2SEx_TxRxDMAError+0x78>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d101      	bne.n	8003748 <I2SEx_TxRxDMAError+0x2c>
 8003744:	4b14      	ldr	r3, [pc, #80]	; (8003798 <I2SEx_TxRxDMAError+0x7c>)
 8003746:	e001      	b.n	800374c <I2SEx_TxRxDMAError+0x30>
 8003748:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4910      	ldr	r1, [pc, #64]	; (8003794 <I2SEx_TxRxDMAError+0x78>)
 8003754:	428b      	cmp	r3, r1
 8003756:	d101      	bne.n	800375c <I2SEx_TxRxDMAError+0x40>
 8003758:	4b0f      	ldr	r3, [pc, #60]	; (8003798 <I2SEx_TxRxDMAError+0x7c>)
 800375a:	e001      	b.n	8003760 <I2SEx_TxRxDMAError+0x44>
 800375c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003760:	f022 0203 	bic.w	r2, r2, #3
 8003764:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377e:	f043 0208 	orr.w	r2, r3, #8
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f7ff fb4e 	bl	8002e28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800378c:	bf00      	nop
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40003800 	.word	0x40003800
 8003798:	40003400 	.word	0x40003400

0800379c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	1c99      	adds	r1, r3, #2
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	6251      	str	r1, [r2, #36]	; 0x24
 80037ae:	881a      	ldrh	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	3b01      	subs	r3, #1
 80037be:	b29a      	uxth	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d113      	bne.n	80037f6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037dc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d106      	bne.n	80037f6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f7fd ff1b 	bl	800162c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037f6:	bf00      	nop
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
	...

08003800 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380c:	1c99      	adds	r1, r3, #2
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6251      	str	r1, [r2, #36]	; 0x24
 8003812:	8819      	ldrh	r1, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a1d      	ldr	r2, [pc, #116]	; (8003890 <I2SEx_TxISR_I2SExt+0x90>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d101      	bne.n	8003822 <I2SEx_TxISR_I2SExt+0x22>
 800381e:	4b1d      	ldr	r3, [pc, #116]	; (8003894 <I2SEx_TxISR_I2SExt+0x94>)
 8003820:	e001      	b.n	8003826 <I2SEx_TxISR_I2SExt+0x26>
 8003822:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003826:	460a      	mov	r2, r1
 8003828:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382e:	b29b      	uxth	r3, r3
 8003830:	3b01      	subs	r3, #1
 8003832:	b29a      	uxth	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800383c:	b29b      	uxth	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d121      	bne.n	8003886 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a12      	ldr	r2, [pc, #72]	; (8003890 <I2SEx_TxISR_I2SExt+0x90>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d101      	bne.n	8003850 <I2SEx_TxISR_I2SExt+0x50>
 800384c:	4b11      	ldr	r3, [pc, #68]	; (8003894 <I2SEx_TxISR_I2SExt+0x94>)
 800384e:	e001      	b.n	8003854 <I2SEx_TxISR_I2SExt+0x54>
 8003850:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	490d      	ldr	r1, [pc, #52]	; (8003890 <I2SEx_TxISR_I2SExt+0x90>)
 800385c:	428b      	cmp	r3, r1
 800385e:	d101      	bne.n	8003864 <I2SEx_TxISR_I2SExt+0x64>
 8003860:	4b0c      	ldr	r3, [pc, #48]	; (8003894 <I2SEx_TxISR_I2SExt+0x94>)
 8003862:	e001      	b.n	8003868 <I2SEx_TxISR_I2SExt+0x68>
 8003864:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003868:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800386c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003872:	b29b      	uxth	r3, r3
 8003874:	2b00      	cmp	r3, #0
 8003876:	d106      	bne.n	8003886 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f7fd fed3 	bl	800162c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003886:	bf00      	nop
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	40003800 	.word	0x40003800
 8003894:	40003400 	.word	0x40003400

08003898 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68d8      	ldr	r0, [r3, #12]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038aa:	1c99      	adds	r1, r3, #2
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	62d1      	str	r1, [r2, #44]	; 0x2c
 80038b0:	b282      	uxth	r2, r0
 80038b2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	3b01      	subs	r3, #1
 80038bc:	b29a      	uxth	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d113      	bne.n	80038f4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038da:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d106      	bne.n	80038f4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7fd fe9c 	bl	800162c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038f4:	bf00      	nop
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a20      	ldr	r2, [pc, #128]	; (800398c <I2SEx_RxISR_I2SExt+0x90>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d101      	bne.n	8003912 <I2SEx_RxISR_I2SExt+0x16>
 800390e:	4b20      	ldr	r3, [pc, #128]	; (8003990 <I2SEx_RxISR_I2SExt+0x94>)
 8003910:	e001      	b.n	8003916 <I2SEx_RxISR_I2SExt+0x1a>
 8003912:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003916:	68d8      	ldr	r0, [r3, #12]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391c:	1c99      	adds	r1, r3, #2
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003922:	b282      	uxth	r2, r0
 8003924:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800392a:	b29b      	uxth	r3, r3
 800392c:	3b01      	subs	r3, #1
 800392e:	b29a      	uxth	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003938:	b29b      	uxth	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d121      	bne.n	8003982 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a12      	ldr	r2, [pc, #72]	; (800398c <I2SEx_RxISR_I2SExt+0x90>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d101      	bne.n	800394c <I2SEx_RxISR_I2SExt+0x50>
 8003948:	4b11      	ldr	r3, [pc, #68]	; (8003990 <I2SEx_RxISR_I2SExt+0x94>)
 800394a:	e001      	b.n	8003950 <I2SEx_RxISR_I2SExt+0x54>
 800394c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	490d      	ldr	r1, [pc, #52]	; (800398c <I2SEx_RxISR_I2SExt+0x90>)
 8003958:	428b      	cmp	r3, r1
 800395a:	d101      	bne.n	8003960 <I2SEx_RxISR_I2SExt+0x64>
 800395c:	4b0c      	ldr	r3, [pc, #48]	; (8003990 <I2SEx_RxISR_I2SExt+0x94>)
 800395e:	e001      	b.n	8003964 <I2SEx_RxISR_I2SExt+0x68>
 8003960:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003964:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003968:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800396e:	b29b      	uxth	r3, r3
 8003970:	2b00      	cmp	r3, #0
 8003972:	d106      	bne.n	8003982 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f7fd fe55 	bl	800162c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003982:	bf00      	nop
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	40003800 	.word	0x40003800
 8003990:	40003400 	.word	0x40003400

08003994 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e25b      	b.n	8003e5e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d075      	beq.n	8003a9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039b2:	4ba3      	ldr	r3, [pc, #652]	; (8003c40 <HAL_RCC_OscConfig+0x2ac>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 030c 	and.w	r3, r3, #12
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	d00c      	beq.n	80039d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039be:	4ba0      	ldr	r3, [pc, #640]	; (8003c40 <HAL_RCC_OscConfig+0x2ac>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039c6:	2b08      	cmp	r3, #8
 80039c8:	d112      	bne.n	80039f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039ca:	4b9d      	ldr	r3, [pc, #628]	; (8003c40 <HAL_RCC_OscConfig+0x2ac>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039d6:	d10b      	bne.n	80039f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d8:	4b99      	ldr	r3, [pc, #612]	; (8003c40 <HAL_RCC_OscConfig+0x2ac>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d05b      	beq.n	8003a9c <HAL_RCC_OscConfig+0x108>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d157      	bne.n	8003a9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e236      	b.n	8003e5e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f8:	d106      	bne.n	8003a08 <HAL_RCC_OscConfig+0x74>
 80039fa:	4b91      	ldr	r3, [pc, #580]	; (8003c40 <HAL_RCC_OscConfig+0x2ac>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a90      	ldr	r2, [pc, #576]	; (8003c40 <HAL_RCC_OscConfig+0x2ac>)
 8003a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a04:	6013      	str	r3, [r2, #0]
 8003a06:	e01d      	b.n	8003a44 <HAL_RCC_OscConfig+0xb0>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a10:	d10c      	bne.n	8003a2c <HAL_RCC_OscConfig+0x98>
 8003a12:	4b8b      	ldr	r3, [pc, #556]	; (8003c40 <HAL_RCC_OscConfig+0x2ac>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a8a      	ldr	r2, [pc, #552]	; (8003c40 <HAL_RCC_OscConfig+0x2ac>)
 8003a18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a1c:	6013      	str	r3, [r2, #0]
 8003a1e:	4b88      	ldr	r3, [pc, #544]	; (8003c40 <HAL_RCC_OscConfig+0x2ac>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a87      	ldr	r2, [pc, #540]	; (8003c40 <HAL_RCC_OscConfig+0x2ac>)
 8003a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	e00b      	b.n	8003a44 <HAL_RCC_OscConfig+0xb0>
 8003a2c:	4b84      	ldr	r3, [pc, #528]	; (8003c40 <HAL_RCC_OscConfig+0x2ac>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a83      	ldr	r2, [pc, #524]	; (8003c40 <HAL_RCC_OscConfig+0x2ac>)
 8003a32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a36:	6013      	str	r3, [r2, #0]
 8003a38:	4b81      	ldr	r3, [pc, #516]	; (8003c40 <HAL_RCC_OscConfig+0x2ac>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a80      	ldr	r2, [pc, #512]	; (8003c40 <HAL_RCC_OscConfig+0x2ac>)
 8003a3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d013      	beq.n	8003a74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a4c:	f7fd fff6 	bl	8001a3c <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a54:	f7fd fff2 	bl	8001a3c <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b64      	cmp	r3, #100	; 0x64
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e1fb      	b.n	8003e5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a66:	4b76      	ldr	r3, [pc, #472]	; (8003c40 <HAL_RCC_OscConfig+0x2ac>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d0f0      	beq.n	8003a54 <HAL_RCC_OscConfig+0xc0>
 8003a72:	e014      	b.n	8003a9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a74:	f7fd ffe2 	bl	8001a3c <HAL_GetTick>
 8003a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a7a:	e008      	b.n	8003a8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a7c:	f7fd ffde 	bl	8001a3c <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b64      	cmp	r3, #100	; 0x64
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e1e7      	b.n	8003e5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a8e:	4b6c      	ldr	r3, [pc, #432]	; (8003c40 <HAL_RCC_OscConfig+0x2ac>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1f0      	bne.n	8003a7c <HAL_RCC_OscConfig+0xe8>
 8003a9a:	e000      	b.n	8003a9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d063      	beq.n	8003b72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003aaa:	4b65      	ldr	r3, [pc, #404]	; (8003c40 <HAL_RCC_OscConfig+0x2ac>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 030c 	and.w	r3, r3, #12
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00b      	beq.n	8003ace <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ab6:	4b62      	ldr	r3, [pc, #392]	; (8003c40 <HAL_RCC_OscConfig+0x2ac>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003abe:	2b08      	cmp	r3, #8
 8003ac0:	d11c      	bne.n	8003afc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ac2:	4b5f      	ldr	r3, [pc, #380]	; (8003c40 <HAL_RCC_OscConfig+0x2ac>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d116      	bne.n	8003afc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ace:	4b5c      	ldr	r3, [pc, #368]	; (8003c40 <HAL_RCC_OscConfig+0x2ac>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d005      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x152>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d001      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e1bb      	b.n	8003e5e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae6:	4b56      	ldr	r3, [pc, #344]	; (8003c40 <HAL_RCC_OscConfig+0x2ac>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	4952      	ldr	r1, [pc, #328]	; (8003c40 <HAL_RCC_OscConfig+0x2ac>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003afa:	e03a      	b.n	8003b72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d020      	beq.n	8003b46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b04:	4b4f      	ldr	r3, [pc, #316]	; (8003c44 <HAL_RCC_OscConfig+0x2b0>)
 8003b06:	2201      	movs	r2, #1
 8003b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0a:	f7fd ff97 	bl	8001a3c <HAL_GetTick>
 8003b0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b10:	e008      	b.n	8003b24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b12:	f7fd ff93 	bl	8001a3c <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e19c      	b.n	8003e5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b24:	4b46      	ldr	r3, [pc, #280]	; (8003c40 <HAL_RCC_OscConfig+0x2ac>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d0f0      	beq.n	8003b12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b30:	4b43      	ldr	r3, [pc, #268]	; (8003c40 <HAL_RCC_OscConfig+0x2ac>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	4940      	ldr	r1, [pc, #256]	; (8003c40 <HAL_RCC_OscConfig+0x2ac>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	600b      	str	r3, [r1, #0]
 8003b44:	e015      	b.n	8003b72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b46:	4b3f      	ldr	r3, [pc, #252]	; (8003c44 <HAL_RCC_OscConfig+0x2b0>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4c:	f7fd ff76 	bl	8001a3c <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b54:	f7fd ff72 	bl	8001a3c <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e17b      	b.n	8003e5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b66:	4b36      	ldr	r3, [pc, #216]	; (8003c40 <HAL_RCC_OscConfig+0x2ac>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1f0      	bne.n	8003b54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0308 	and.w	r3, r3, #8
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d030      	beq.n	8003be0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d016      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b86:	4b30      	ldr	r3, [pc, #192]	; (8003c48 <HAL_RCC_OscConfig+0x2b4>)
 8003b88:	2201      	movs	r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b8c:	f7fd ff56 	bl	8001a3c <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b94:	f7fd ff52 	bl	8001a3c <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e15b      	b.n	8003e5e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ba6:	4b26      	ldr	r3, [pc, #152]	; (8003c40 <HAL_RCC_OscConfig+0x2ac>)
 8003ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d0f0      	beq.n	8003b94 <HAL_RCC_OscConfig+0x200>
 8003bb2:	e015      	b.n	8003be0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bb4:	4b24      	ldr	r3, [pc, #144]	; (8003c48 <HAL_RCC_OscConfig+0x2b4>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bba:	f7fd ff3f 	bl	8001a3c <HAL_GetTick>
 8003bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bc0:	e008      	b.n	8003bd4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bc2:	f7fd ff3b 	bl	8001a3c <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d901      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e144      	b.n	8003e5e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bd4:	4b1a      	ldr	r3, [pc, #104]	; (8003c40 <HAL_RCC_OscConfig+0x2ac>)
 8003bd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1f0      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 80a0 	beq.w	8003d2e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bf2:	4b13      	ldr	r3, [pc, #76]	; (8003c40 <HAL_RCC_OscConfig+0x2ac>)
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10f      	bne.n	8003c1e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bfe:	2300      	movs	r3, #0
 8003c00:	60bb      	str	r3, [r7, #8]
 8003c02:	4b0f      	ldr	r3, [pc, #60]	; (8003c40 <HAL_RCC_OscConfig+0x2ac>)
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	4a0e      	ldr	r2, [pc, #56]	; (8003c40 <HAL_RCC_OscConfig+0x2ac>)
 8003c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c0e:	4b0c      	ldr	r3, [pc, #48]	; (8003c40 <HAL_RCC_OscConfig+0x2ac>)
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c16:	60bb      	str	r3, [r7, #8]
 8003c18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c1e:	4b0b      	ldr	r3, [pc, #44]	; (8003c4c <HAL_RCC_OscConfig+0x2b8>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d121      	bne.n	8003c6e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c2a:	4b08      	ldr	r3, [pc, #32]	; (8003c4c <HAL_RCC_OscConfig+0x2b8>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a07      	ldr	r2, [pc, #28]	; (8003c4c <HAL_RCC_OscConfig+0x2b8>)
 8003c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c36:	f7fd ff01 	bl	8001a3c <HAL_GetTick>
 8003c3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c3c:	e011      	b.n	8003c62 <HAL_RCC_OscConfig+0x2ce>
 8003c3e:	bf00      	nop
 8003c40:	40023800 	.word	0x40023800
 8003c44:	42470000 	.word	0x42470000
 8003c48:	42470e80 	.word	0x42470e80
 8003c4c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c50:	f7fd fef4 	bl	8001a3c <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e0fd      	b.n	8003e5e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c62:	4b81      	ldr	r3, [pc, #516]	; (8003e68 <HAL_RCC_OscConfig+0x4d4>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0f0      	beq.n	8003c50 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d106      	bne.n	8003c84 <HAL_RCC_OscConfig+0x2f0>
 8003c76:	4b7d      	ldr	r3, [pc, #500]	; (8003e6c <HAL_RCC_OscConfig+0x4d8>)
 8003c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7a:	4a7c      	ldr	r2, [pc, #496]	; (8003e6c <HAL_RCC_OscConfig+0x4d8>)
 8003c7c:	f043 0301 	orr.w	r3, r3, #1
 8003c80:	6713      	str	r3, [r2, #112]	; 0x70
 8003c82:	e01c      	b.n	8003cbe <HAL_RCC_OscConfig+0x32a>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	2b05      	cmp	r3, #5
 8003c8a:	d10c      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x312>
 8003c8c:	4b77      	ldr	r3, [pc, #476]	; (8003e6c <HAL_RCC_OscConfig+0x4d8>)
 8003c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c90:	4a76      	ldr	r2, [pc, #472]	; (8003e6c <HAL_RCC_OscConfig+0x4d8>)
 8003c92:	f043 0304 	orr.w	r3, r3, #4
 8003c96:	6713      	str	r3, [r2, #112]	; 0x70
 8003c98:	4b74      	ldr	r3, [pc, #464]	; (8003e6c <HAL_RCC_OscConfig+0x4d8>)
 8003c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c9c:	4a73      	ldr	r2, [pc, #460]	; (8003e6c <HAL_RCC_OscConfig+0x4d8>)
 8003c9e:	f043 0301 	orr.w	r3, r3, #1
 8003ca2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ca4:	e00b      	b.n	8003cbe <HAL_RCC_OscConfig+0x32a>
 8003ca6:	4b71      	ldr	r3, [pc, #452]	; (8003e6c <HAL_RCC_OscConfig+0x4d8>)
 8003ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003caa:	4a70      	ldr	r2, [pc, #448]	; (8003e6c <HAL_RCC_OscConfig+0x4d8>)
 8003cac:	f023 0301 	bic.w	r3, r3, #1
 8003cb0:	6713      	str	r3, [r2, #112]	; 0x70
 8003cb2:	4b6e      	ldr	r3, [pc, #440]	; (8003e6c <HAL_RCC_OscConfig+0x4d8>)
 8003cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb6:	4a6d      	ldr	r2, [pc, #436]	; (8003e6c <HAL_RCC_OscConfig+0x4d8>)
 8003cb8:	f023 0304 	bic.w	r3, r3, #4
 8003cbc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d015      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc6:	f7fd feb9 	bl	8001a3c <HAL_GetTick>
 8003cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ccc:	e00a      	b.n	8003ce4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cce:	f7fd feb5 	bl	8001a3c <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e0bc      	b.n	8003e5e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce4:	4b61      	ldr	r3, [pc, #388]	; (8003e6c <HAL_RCC_OscConfig+0x4d8>)
 8003ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0ee      	beq.n	8003cce <HAL_RCC_OscConfig+0x33a>
 8003cf0:	e014      	b.n	8003d1c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cf2:	f7fd fea3 	bl	8001a3c <HAL_GetTick>
 8003cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cf8:	e00a      	b.n	8003d10 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cfa:	f7fd fe9f 	bl	8001a3c <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e0a6      	b.n	8003e5e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d10:	4b56      	ldr	r3, [pc, #344]	; (8003e6c <HAL_RCC_OscConfig+0x4d8>)
 8003d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1ee      	bne.n	8003cfa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d1c:	7dfb      	ldrb	r3, [r7, #23]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d105      	bne.n	8003d2e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d22:	4b52      	ldr	r3, [pc, #328]	; (8003e6c <HAL_RCC_OscConfig+0x4d8>)
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	4a51      	ldr	r2, [pc, #324]	; (8003e6c <HAL_RCC_OscConfig+0x4d8>)
 8003d28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d2c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 8092 	beq.w	8003e5c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d38:	4b4c      	ldr	r3, [pc, #304]	; (8003e6c <HAL_RCC_OscConfig+0x4d8>)
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f003 030c 	and.w	r3, r3, #12
 8003d40:	2b08      	cmp	r3, #8
 8003d42:	d05c      	beq.n	8003dfe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d141      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d4c:	4b48      	ldr	r3, [pc, #288]	; (8003e70 <HAL_RCC_OscConfig+0x4dc>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d52:	f7fd fe73 	bl	8001a3c <HAL_GetTick>
 8003d56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d58:	e008      	b.n	8003d6c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d5a:	f7fd fe6f 	bl	8001a3c <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d901      	bls.n	8003d6c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e078      	b.n	8003e5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d6c:	4b3f      	ldr	r3, [pc, #252]	; (8003e6c <HAL_RCC_OscConfig+0x4d8>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1f0      	bne.n	8003d5a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	69da      	ldr	r2, [r3, #28]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	431a      	orrs	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d86:	019b      	lsls	r3, r3, #6
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8e:	085b      	lsrs	r3, r3, #1
 8003d90:	3b01      	subs	r3, #1
 8003d92:	041b      	lsls	r3, r3, #16
 8003d94:	431a      	orrs	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9a:	061b      	lsls	r3, r3, #24
 8003d9c:	4933      	ldr	r1, [pc, #204]	; (8003e6c <HAL_RCC_OscConfig+0x4d8>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003da2:	4b33      	ldr	r3, [pc, #204]	; (8003e70 <HAL_RCC_OscConfig+0x4dc>)
 8003da4:	2201      	movs	r2, #1
 8003da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da8:	f7fd fe48 	bl	8001a3c <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dae:	e008      	b.n	8003dc2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003db0:	f7fd fe44 	bl	8001a3c <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e04d      	b.n	8003e5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dc2:	4b2a      	ldr	r3, [pc, #168]	; (8003e6c <HAL_RCC_OscConfig+0x4d8>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d0f0      	beq.n	8003db0 <HAL_RCC_OscConfig+0x41c>
 8003dce:	e045      	b.n	8003e5c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dd0:	4b27      	ldr	r3, [pc, #156]	; (8003e70 <HAL_RCC_OscConfig+0x4dc>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd6:	f7fd fe31 	bl	8001a3c <HAL_GetTick>
 8003dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ddc:	e008      	b.n	8003df0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dde:	f7fd fe2d 	bl	8001a3c <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d901      	bls.n	8003df0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e036      	b.n	8003e5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003df0:	4b1e      	ldr	r3, [pc, #120]	; (8003e6c <HAL_RCC_OscConfig+0x4d8>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1f0      	bne.n	8003dde <HAL_RCC_OscConfig+0x44a>
 8003dfc:	e02e      	b.n	8003e5c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d101      	bne.n	8003e0a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e029      	b.n	8003e5e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e0a:	4b18      	ldr	r3, [pc, #96]	; (8003e6c <HAL_RCC_OscConfig+0x4d8>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d11c      	bne.n	8003e58 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d115      	bne.n	8003e58 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e32:	4013      	ands	r3, r2
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d10d      	bne.n	8003e58 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d106      	bne.n	8003e58 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d001      	beq.n	8003e5c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e000      	b.n	8003e5e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3718      	adds	r7, #24
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	40007000 	.word	0x40007000
 8003e6c:	40023800 	.word	0x40023800
 8003e70:	42470060 	.word	0x42470060

08003e74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e0cc      	b.n	8004022 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e88:	4b68      	ldr	r3, [pc, #416]	; (800402c <HAL_RCC_ClockConfig+0x1b8>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 030f 	and.w	r3, r3, #15
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d90c      	bls.n	8003eb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e96:	4b65      	ldr	r3, [pc, #404]	; (800402c <HAL_RCC_ClockConfig+0x1b8>)
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	b2d2      	uxtb	r2, r2
 8003e9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e9e:	4b63      	ldr	r3, [pc, #396]	; (800402c <HAL_RCC_ClockConfig+0x1b8>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 030f 	and.w	r3, r3, #15
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d001      	beq.n	8003eb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e0b8      	b.n	8004022 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0302 	and.w	r3, r3, #2
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d020      	beq.n	8003efe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0304 	and.w	r3, r3, #4
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d005      	beq.n	8003ed4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ec8:	4b59      	ldr	r3, [pc, #356]	; (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	4a58      	ldr	r2, [pc, #352]	; (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8003ece:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ed2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0308 	and.w	r3, r3, #8
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d005      	beq.n	8003eec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ee0:	4b53      	ldr	r3, [pc, #332]	; (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	4a52      	ldr	r2, [pc, #328]	; (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003eea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eec:	4b50      	ldr	r3, [pc, #320]	; (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	494d      	ldr	r1, [pc, #308]	; (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d044      	beq.n	8003f94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d107      	bne.n	8003f22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f12:	4b47      	ldr	r3, [pc, #284]	; (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d119      	bne.n	8003f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e07f      	b.n	8004022 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d003      	beq.n	8003f32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f2e:	2b03      	cmp	r3, #3
 8003f30:	d107      	bne.n	8003f42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f32:	4b3f      	ldr	r3, [pc, #252]	; (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d109      	bne.n	8003f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e06f      	b.n	8004022 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f42:	4b3b      	ldr	r3, [pc, #236]	; (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e067      	b.n	8004022 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f52:	4b37      	ldr	r3, [pc, #220]	; (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f023 0203 	bic.w	r2, r3, #3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	4934      	ldr	r1, [pc, #208]	; (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f64:	f7fd fd6a 	bl	8001a3c <HAL_GetTick>
 8003f68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f6a:	e00a      	b.n	8003f82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f6c:	f7fd fd66 	bl	8001a3c <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e04f      	b.n	8004022 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f82:	4b2b      	ldr	r3, [pc, #172]	; (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f003 020c 	and.w	r2, r3, #12
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d1eb      	bne.n	8003f6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f94:	4b25      	ldr	r3, [pc, #148]	; (800402c <HAL_RCC_ClockConfig+0x1b8>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 030f 	and.w	r3, r3, #15
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d20c      	bcs.n	8003fbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fa2:	4b22      	ldr	r3, [pc, #136]	; (800402c <HAL_RCC_ClockConfig+0x1b8>)
 8003fa4:	683a      	ldr	r2, [r7, #0]
 8003fa6:	b2d2      	uxtb	r2, r2
 8003fa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003faa:	4b20      	ldr	r3, [pc, #128]	; (800402c <HAL_RCC_ClockConfig+0x1b8>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 030f 	and.w	r3, r3, #15
 8003fb2:	683a      	ldr	r2, [r7, #0]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d001      	beq.n	8003fbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e032      	b.n	8004022 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0304 	and.w	r3, r3, #4
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d008      	beq.n	8003fda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fc8:	4b19      	ldr	r3, [pc, #100]	; (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	4916      	ldr	r1, [pc, #88]	; (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0308 	and.w	r3, r3, #8
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d009      	beq.n	8003ffa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fe6:	4b12      	ldr	r3, [pc, #72]	; (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	490e      	ldr	r1, [pc, #56]	; (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ffa:	f000 f821 	bl	8004040 <HAL_RCC_GetSysClockFreq>
 8003ffe:	4601      	mov	r1, r0
 8004000:	4b0b      	ldr	r3, [pc, #44]	; (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	091b      	lsrs	r3, r3, #4
 8004006:	f003 030f 	and.w	r3, r3, #15
 800400a:	4a0a      	ldr	r2, [pc, #40]	; (8004034 <HAL_RCC_ClockConfig+0x1c0>)
 800400c:	5cd3      	ldrb	r3, [r2, r3]
 800400e:	fa21 f303 	lsr.w	r3, r1, r3
 8004012:	4a09      	ldr	r2, [pc, #36]	; (8004038 <HAL_RCC_ClockConfig+0x1c4>)
 8004014:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004016:	4b09      	ldr	r3, [pc, #36]	; (800403c <HAL_RCC_ClockConfig+0x1c8>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4618      	mov	r0, r3
 800401c:	f7fd fcca 	bl	80019b4 <HAL_InitTick>

  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3710      	adds	r7, #16
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	40023c00 	.word	0x40023c00
 8004030:	40023800 	.word	0x40023800
 8004034:	08005e0c 	.word	0x08005e0c
 8004038:	20000000 	.word	0x20000000
 800403c:	20000004 	.word	0x20000004

08004040 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004046:	2300      	movs	r3, #0
 8004048:	607b      	str	r3, [r7, #4]
 800404a:	2300      	movs	r3, #0
 800404c:	60fb      	str	r3, [r7, #12]
 800404e:	2300      	movs	r3, #0
 8004050:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004052:	2300      	movs	r3, #0
 8004054:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004056:	4b50      	ldr	r3, [pc, #320]	; (8004198 <HAL_RCC_GetSysClockFreq+0x158>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 030c 	and.w	r3, r3, #12
 800405e:	2b04      	cmp	r3, #4
 8004060:	d007      	beq.n	8004072 <HAL_RCC_GetSysClockFreq+0x32>
 8004062:	2b08      	cmp	r3, #8
 8004064:	d008      	beq.n	8004078 <HAL_RCC_GetSysClockFreq+0x38>
 8004066:	2b00      	cmp	r3, #0
 8004068:	f040 808d 	bne.w	8004186 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800406c:	4b4b      	ldr	r3, [pc, #300]	; (800419c <HAL_RCC_GetSysClockFreq+0x15c>)
 800406e:	60bb      	str	r3, [r7, #8]
       break;
 8004070:	e08c      	b.n	800418c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004072:	4b4b      	ldr	r3, [pc, #300]	; (80041a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004074:	60bb      	str	r3, [r7, #8]
      break;
 8004076:	e089      	b.n	800418c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004078:	4b47      	ldr	r3, [pc, #284]	; (8004198 <HAL_RCC_GetSysClockFreq+0x158>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004080:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004082:	4b45      	ldr	r3, [pc, #276]	; (8004198 <HAL_RCC_GetSysClockFreq+0x158>)
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d023      	beq.n	80040d6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800408e:	4b42      	ldr	r3, [pc, #264]	; (8004198 <HAL_RCC_GetSysClockFreq+0x158>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	099b      	lsrs	r3, r3, #6
 8004094:	f04f 0400 	mov.w	r4, #0
 8004098:	f240 11ff 	movw	r1, #511	; 0x1ff
 800409c:	f04f 0200 	mov.w	r2, #0
 80040a0:	ea03 0501 	and.w	r5, r3, r1
 80040a4:	ea04 0602 	and.w	r6, r4, r2
 80040a8:	4a3d      	ldr	r2, [pc, #244]	; (80041a0 <HAL_RCC_GetSysClockFreq+0x160>)
 80040aa:	fb02 f106 	mul.w	r1, r2, r6
 80040ae:	2200      	movs	r2, #0
 80040b0:	fb02 f205 	mul.w	r2, r2, r5
 80040b4:	440a      	add	r2, r1
 80040b6:	493a      	ldr	r1, [pc, #232]	; (80041a0 <HAL_RCC_GetSysClockFreq+0x160>)
 80040b8:	fba5 0101 	umull	r0, r1, r5, r1
 80040bc:	1853      	adds	r3, r2, r1
 80040be:	4619      	mov	r1, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f04f 0400 	mov.w	r4, #0
 80040c6:	461a      	mov	r2, r3
 80040c8:	4623      	mov	r3, r4
 80040ca:	f7fc fd1b 	bl	8000b04 <__aeabi_uldivmod>
 80040ce:	4603      	mov	r3, r0
 80040d0:	460c      	mov	r4, r1
 80040d2:	60fb      	str	r3, [r7, #12]
 80040d4:	e049      	b.n	800416a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040d6:	4b30      	ldr	r3, [pc, #192]	; (8004198 <HAL_RCC_GetSysClockFreq+0x158>)
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	099b      	lsrs	r3, r3, #6
 80040dc:	f04f 0400 	mov.w	r4, #0
 80040e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80040e4:	f04f 0200 	mov.w	r2, #0
 80040e8:	ea03 0501 	and.w	r5, r3, r1
 80040ec:	ea04 0602 	and.w	r6, r4, r2
 80040f0:	4629      	mov	r1, r5
 80040f2:	4632      	mov	r2, r6
 80040f4:	f04f 0300 	mov.w	r3, #0
 80040f8:	f04f 0400 	mov.w	r4, #0
 80040fc:	0154      	lsls	r4, r2, #5
 80040fe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004102:	014b      	lsls	r3, r1, #5
 8004104:	4619      	mov	r1, r3
 8004106:	4622      	mov	r2, r4
 8004108:	1b49      	subs	r1, r1, r5
 800410a:	eb62 0206 	sbc.w	r2, r2, r6
 800410e:	f04f 0300 	mov.w	r3, #0
 8004112:	f04f 0400 	mov.w	r4, #0
 8004116:	0194      	lsls	r4, r2, #6
 8004118:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800411c:	018b      	lsls	r3, r1, #6
 800411e:	1a5b      	subs	r3, r3, r1
 8004120:	eb64 0402 	sbc.w	r4, r4, r2
 8004124:	f04f 0100 	mov.w	r1, #0
 8004128:	f04f 0200 	mov.w	r2, #0
 800412c:	00e2      	lsls	r2, r4, #3
 800412e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004132:	00d9      	lsls	r1, r3, #3
 8004134:	460b      	mov	r3, r1
 8004136:	4614      	mov	r4, r2
 8004138:	195b      	adds	r3, r3, r5
 800413a:	eb44 0406 	adc.w	r4, r4, r6
 800413e:	f04f 0100 	mov.w	r1, #0
 8004142:	f04f 0200 	mov.w	r2, #0
 8004146:	02a2      	lsls	r2, r4, #10
 8004148:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800414c:	0299      	lsls	r1, r3, #10
 800414e:	460b      	mov	r3, r1
 8004150:	4614      	mov	r4, r2
 8004152:	4618      	mov	r0, r3
 8004154:	4621      	mov	r1, r4
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f04f 0400 	mov.w	r4, #0
 800415c:	461a      	mov	r2, r3
 800415e:	4623      	mov	r3, r4
 8004160:	f7fc fcd0 	bl	8000b04 <__aeabi_uldivmod>
 8004164:	4603      	mov	r3, r0
 8004166:	460c      	mov	r4, r1
 8004168:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800416a:	4b0b      	ldr	r3, [pc, #44]	; (8004198 <HAL_RCC_GetSysClockFreq+0x158>)
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	0c1b      	lsrs	r3, r3, #16
 8004170:	f003 0303 	and.w	r3, r3, #3
 8004174:	3301      	adds	r3, #1
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004182:	60bb      	str	r3, [r7, #8]
      break;
 8004184:	e002      	b.n	800418c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004186:	4b05      	ldr	r3, [pc, #20]	; (800419c <HAL_RCC_GetSysClockFreq+0x15c>)
 8004188:	60bb      	str	r3, [r7, #8]
      break;
 800418a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800418c:	68bb      	ldr	r3, [r7, #8]
}
 800418e:	4618      	mov	r0, r3
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004196:	bf00      	nop
 8004198:	40023800 	.word	0x40023800
 800419c:	00f42400 	.word	0x00f42400
 80041a0:	017d7840 	.word	0x017d7840

080041a4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b086      	sub	sp, #24
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041ac:	2300      	movs	r3, #0
 80041ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80041b0:	2300      	movs	r3, #0
 80041b2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d105      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d035      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80041cc:	4b62      	ldr	r3, [pc, #392]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80041d2:	f7fd fc33 	bl	8001a3c <HAL_GetTick>
 80041d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041d8:	e008      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80041da:	f7fd fc2f 	bl	8001a3c <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d901      	bls.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e0b0      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041ec:	4b5b      	ldr	r3, [pc, #364]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1f0      	bne.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	019a      	lsls	r2, r3, #6
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	071b      	lsls	r3, r3, #28
 8004204:	4955      	ldr	r1, [pc, #340]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004206:	4313      	orrs	r3, r2
 8004208:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800420c:	4b52      	ldr	r3, [pc, #328]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800420e:	2201      	movs	r2, #1
 8004210:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004212:	f7fd fc13 	bl	8001a3c <HAL_GetTick>
 8004216:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004218:	e008      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800421a:	f7fd fc0f 	bl	8001a3c <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d901      	bls.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e090      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800422c:	4b4b      	ldr	r3, [pc, #300]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d0f0      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 8083 	beq.w	800434c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004246:	2300      	movs	r3, #0
 8004248:	60fb      	str	r3, [r7, #12]
 800424a:	4b44      	ldr	r3, [pc, #272]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800424c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424e:	4a43      	ldr	r2, [pc, #268]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004254:	6413      	str	r3, [r2, #64]	; 0x40
 8004256:	4b41      	ldr	r3, [pc, #260]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800425e:	60fb      	str	r3, [r7, #12]
 8004260:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004262:	4b3f      	ldr	r3, [pc, #252]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a3e      	ldr	r2, [pc, #248]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800426c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800426e:	f7fd fbe5 	bl	8001a3c <HAL_GetTick>
 8004272:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004274:	e008      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004276:	f7fd fbe1 	bl	8001a3c <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	2b02      	cmp	r3, #2
 8004282:	d901      	bls.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e062      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004288:	4b35      	ldr	r3, [pc, #212]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004290:	2b00      	cmp	r3, #0
 8004292:	d0f0      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004294:	4b31      	ldr	r3, [pc, #196]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004298:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800429c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d02f      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d028      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042b2:	4b2a      	ldr	r3, [pc, #168]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042ba:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042bc:	4b29      	ldr	r3, [pc, #164]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80042be:	2201      	movs	r2, #1
 80042c0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042c2:	4b28      	ldr	r3, [pc, #160]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80042c8:	4a24      	ldr	r2, [pc, #144]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80042ce:	4b23      	ldr	r3, [pc, #140]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d114      	bne.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80042da:	f7fd fbaf 	bl	8001a3c <HAL_GetTick>
 80042de:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042e0:	e00a      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042e2:	f7fd fbab 	bl	8001a3c <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d901      	bls.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e02a      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042f8:	4b18      	ldr	r3, [pc, #96]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0ee      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800430c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004310:	d10d      	bne.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004312:	4b12      	ldr	r3, [pc, #72]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004326:	490d      	ldr	r1, [pc, #52]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004328:	4313      	orrs	r3, r2
 800432a:	608b      	str	r3, [r1, #8]
 800432c:	e005      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800432e:	4b0b      	ldr	r3, [pc, #44]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	4a0a      	ldr	r2, [pc, #40]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004334:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004338:	6093      	str	r3, [r2, #8]
 800433a:	4b08      	ldr	r3, [pc, #32]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800433c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004346:	4905      	ldr	r1, [pc, #20]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004348:	4313      	orrs	r3, r2
 800434a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3718      	adds	r7, #24
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	42470068 	.word	0x42470068
 800435c:	40023800 	.word	0x40023800
 8004360:	40007000 	.word	0x40007000
 8004364:	42470e40 	.word	0x42470e40

08004368 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004368:	b480      	push	{r7}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004370:	2300      	movs	r3, #0
 8004372:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004374:	2300      	movs	r3, #0
 8004376:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004378:	2300      	movs	r3, #0
 800437a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800437c:	2300      	movs	r3, #0
 800437e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d13d      	bne.n	8004402 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004386:	4b22      	ldr	r3, [pc, #136]	; (8004410 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800438e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d004      	beq.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004396:	2b01      	cmp	r3, #1
 8004398:	d12f      	bne.n	80043fa <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800439a:	4b1e      	ldr	r3, [pc, #120]	; (8004414 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800439c:	617b      	str	r3, [r7, #20]
          break;
 800439e:	e02f      	b.n	8004400 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80043a0:	4b1b      	ldr	r3, [pc, #108]	; (8004410 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043ac:	d108      	bne.n	80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80043ae:	4b18      	ldr	r3, [pc, #96]	; (8004410 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043b6:	4a18      	ldr	r2, [pc, #96]	; (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80043b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043bc:	613b      	str	r3, [r7, #16]
 80043be:	e007      	b.n	80043d0 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80043c0:	4b13      	ldr	r3, [pc, #76]	; (8004410 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043c8:	4a14      	ldr	r2, [pc, #80]	; (800441c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80043ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ce:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80043d0:	4b0f      	ldr	r3, [pc, #60]	; (8004410 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80043d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043d6:	099b      	lsrs	r3, r3, #6
 80043d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	fb02 f303 	mul.w	r3, r2, r3
 80043e2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80043e4:	4b0a      	ldr	r3, [pc, #40]	; (8004410 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80043e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ea:	0f1b      	lsrs	r3, r3, #28
 80043ec:	f003 0307 	and.w	r3, r3, #7
 80043f0:	68ba      	ldr	r2, [r7, #8]
 80043f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f6:	617b      	str	r3, [r7, #20]
          break;
 80043f8:	e002      	b.n	8004400 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80043fa:	2300      	movs	r3, #0
 80043fc:	617b      	str	r3, [r7, #20]
          break;
 80043fe:	bf00      	nop
        }
      }
      break;
 8004400:	bf00      	nop
    }
  }
  return frequency;
 8004402:	697b      	ldr	r3, [r7, #20]
}
 8004404:	4618      	mov	r0, r3
 8004406:	371c      	adds	r7, #28
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr
 8004410:	40023800 	.word	0x40023800
 8004414:	00bb8000 	.word	0x00bb8000
 8004418:	017d7840 	.word	0x017d7840
 800441c:	00f42400 	.word	0x00f42400

08004420 <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	60b9      	str	r1, [r7, #8]
 8004428:	607a      	str	r2, [r7, #4]
 800442a:	603b      	str	r3, [r7, #0]
 800442c:	4603      	mov	r3, r0
 800442e:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8004430:	bf00      	nop
 8004432:	3714      	adds	r7, #20
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	60b9      	str	r1, [r7, #8]
 8004444:	607a      	str	r2, [r7, #4]
 8004446:	603b      	str	r3, [r7, #0]
 8004448:	4603      	mov	r3, r0
 800444a:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 800444c:	7bfb      	ldrb	r3, [r7, #15]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d003      	beq.n	800445a <_out_char+0x1e>
    _putchar(character);
 8004452:	7bfb      	ldrb	r3, [r7, #15]
 8004454:	4618      	mov	r0, r3
 8004456:	f001 fc5c 	bl	8005d12 <_putchar>
  }
}
 800445a:	bf00      	nop
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8004462:	b480      	push	{r7}
 8004464:	b085      	sub	sp, #20
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
 800446a:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	e002      	b.n	8004478 <_strnlen_s+0x16>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	3301      	adds	r3, #1
 8004476:	60fb      	str	r3, [r7, #12]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d004      	beq.n	800448a <_strnlen_s+0x28>
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	1e5a      	subs	r2, r3, #1
 8004484:	603a      	str	r2, [r7, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1f3      	bne.n	8004472 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	1ad3      	subs	r3, r2, r3
}
 8004490:	4618      	mov	r0, r3
 8004492:	3714      	adds	r7, #20
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	4603      	mov	r3, r0
 80044a4:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 80044a6:	79fb      	ldrb	r3, [r7, #7]
 80044a8:	2b2f      	cmp	r3, #47	; 0x2f
 80044aa:	d904      	bls.n	80044b6 <_is_digit+0x1a>
 80044ac:	79fb      	ldrb	r3, [r7, #7]
 80044ae:	2b39      	cmp	r3, #57	; 0x39
 80044b0:	d801      	bhi.n	80044b6 <_is_digit+0x1a>
 80044b2:	2301      	movs	r3, #1
 80044b4:	e000      	b.n	80044b8 <_is_digit+0x1c>
 80044b6:	2300      	movs	r3, #0
 80044b8:	f003 0301 	and.w	r3, r3, #1
 80044bc:	b2db      	uxtb	r3, r3
}
 80044be:	4618      	mov	r0, r3
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b084      	sub	sp, #16
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 80044d6:	e00e      	b.n	80044f6 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	4613      	mov	r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4413      	add	r3, r2
 80044e0:	005b      	lsls	r3, r3, #1
 80044e2:	4618      	mov	r0, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	1c59      	adds	r1, r3, #1
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	6011      	str	r1, [r2, #0]
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	4403      	add	r3, r0
 80044f2:	3b30      	subs	r3, #48	; 0x30
 80044f4:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7ff ffcd 	bl	800449c <_is_digit>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1e7      	bne.n	80044d8 <_atoi+0xe>
  }
  return i;
 8004508:	68fb      	ldr	r3, [r7, #12]
}
 800450a:	4618      	mov	r0, r3
 800450c:	3710      	adds	r7, #16
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}

08004512 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8004512:	b590      	push	{r4, r7, lr}
 8004514:	b087      	sub	sp, #28
 8004516:	af00      	add	r7, sp, #0
 8004518:	60f8      	str	r0, [r7, #12]
 800451a:	60b9      	str	r1, [r7, #8]
 800451c:	607a      	str	r2, [r7, #4]
 800451e:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8004524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d125      	bne.n	800457a <_out_rev+0x68>
 800452e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004530:	f003 0301 	and.w	r3, r3, #1
 8004534:	2b00      	cmp	r3, #0
 8004536:	d120      	bne.n	800457a <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8004538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800453a:	617b      	str	r3, [r7, #20]
 800453c:	e00a      	b.n	8004554 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	1c53      	adds	r3, r2, #1
 8004542:	607b      	str	r3, [r7, #4]
 8004544:	68fc      	ldr	r4, [r7, #12]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	68b9      	ldr	r1, [r7, #8]
 800454a:	2020      	movs	r0, #32
 800454c:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	3301      	adds	r3, #1
 8004552:	617b      	str	r3, [r7, #20]
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004558:	429a      	cmp	r2, r3
 800455a:	d3f0      	bcc.n	800453e <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 800455c:	e00d      	b.n	800457a <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 800455e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004560:	3b01      	subs	r3, #1
 8004562:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004564:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004568:	4413      	add	r3, r2
 800456a:	7818      	ldrb	r0, [r3, #0]
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	1c53      	adds	r3, r2, #1
 8004570:	607b      	str	r3, [r7, #4]
 8004572:	68fc      	ldr	r4, [r7, #12]
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	68b9      	ldr	r1, [r7, #8]
 8004578:	47a0      	blx	r4
  while (len) {
 800457a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1ee      	bne.n	800455e <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8004580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00e      	beq.n	80045a8 <_out_rev+0x96>
    while (idx - start_idx < width) {
 800458a:	e007      	b.n	800459c <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	1c53      	adds	r3, r2, #1
 8004590:	607b      	str	r3, [r7, #4]
 8004592:	68fc      	ldr	r4, [r7, #12]
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	68b9      	ldr	r1, [r7, #8]
 8004598:	2020      	movs	r0, #32
 800459a:	47a0      	blx	r4
    while (idx - start_idx < width) {
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d8f1      	bhi.n	800458c <_out_rev+0x7a>
    }
  }

  return idx;
 80045a8:	687b      	ldr	r3, [r7, #4]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	371c      	adds	r7, #28
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd90      	pop	{r4, r7, pc}

080045b2 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b088      	sub	sp, #32
 80045b6:	af04      	add	r7, sp, #16
 80045b8:	60f8      	str	r0, [r7, #12]
 80045ba:	60b9      	str	r1, [r7, #8]
 80045bc:	607a      	str	r2, [r7, #4]
 80045be:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 80045c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d136      	bne.n	8004638 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80045ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d018      	beq.n	8004602 <_ntoa_format+0x50>
 80045d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d013      	beq.n	8004602 <_ntoa_format+0x50>
 80045da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d104      	bne.n	80045ec <_ntoa_format+0x3a>
 80045e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e4:	f003 030c 	and.w	r3, r3, #12
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00a      	beq.n	8004602 <_ntoa_format+0x50>
      width--;
 80045ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ee:	3b01      	subs	r3, #1
 80045f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80045f2:	e006      	b.n	8004602 <_ntoa_format+0x50>
      buf[len++] = '0';
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	1c5a      	adds	r2, r3, #1
 80045f8:	61fa      	str	r2, [r7, #28]
 80045fa:	69ba      	ldr	r2, [r7, #24]
 80045fc:	4413      	add	r3, r2
 80045fe:	2230      	movs	r2, #48	; 0x30
 8004600:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004602:	69fa      	ldr	r2, [r7, #28]
 8004604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004606:	429a      	cmp	r2, r3
 8004608:	d20a      	bcs.n	8004620 <_ntoa_format+0x6e>
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	2b1f      	cmp	r3, #31
 800460e:	d9f1      	bls.n	80045f4 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004610:	e006      	b.n	8004620 <_ntoa_format+0x6e>
      buf[len++] = '0';
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	1c5a      	adds	r2, r3, #1
 8004616:	61fa      	str	r2, [r7, #28]
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	4413      	add	r3, r2
 800461c:	2230      	movs	r2, #48	; 0x30
 800461e:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b00      	cmp	r3, #0
 8004628:	d006      	beq.n	8004638 <_ntoa_format+0x86>
 800462a:	69fa      	ldr	r2, [r7, #28]
 800462c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800462e:	429a      	cmp	r2, r3
 8004630:	d202      	bcs.n	8004638 <_ntoa_format+0x86>
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	2b1f      	cmp	r3, #31
 8004636:	d9ec      	bls.n	8004612 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8004638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800463a:	f003 0310 	and.w	r3, r3, #16
 800463e:	2b00      	cmp	r3, #0
 8004640:	d058      	beq.n	80046f4 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8004642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004648:	2b00      	cmp	r3, #0
 800464a:	d116      	bne.n	800467a <_ntoa_format+0xc8>
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d013      	beq.n	800467a <_ntoa_format+0xc8>
 8004652:	69fa      	ldr	r2, [r7, #28]
 8004654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004656:	429a      	cmp	r2, r3
 8004658:	d003      	beq.n	8004662 <_ntoa_format+0xb0>
 800465a:	69fa      	ldr	r2, [r7, #28]
 800465c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800465e:	429a      	cmp	r2, r3
 8004660:	d10b      	bne.n	800467a <_ntoa_format+0xc8>
      len--;
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	3b01      	subs	r3, #1
 8004666:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d005      	beq.n	800467a <_ntoa_format+0xc8>
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	2b10      	cmp	r3, #16
 8004672:	d102      	bne.n	800467a <_ntoa_format+0xc8>
        len--;
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	3b01      	subs	r3, #1
 8004678:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800467a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467c:	2b10      	cmp	r3, #16
 800467e:	d10f      	bne.n	80046a0 <_ntoa_format+0xee>
 8004680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004682:	f003 0320 	and.w	r3, r3, #32
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10a      	bne.n	80046a0 <_ntoa_format+0xee>
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	2b1f      	cmp	r3, #31
 800468e:	d807      	bhi.n	80046a0 <_ntoa_format+0xee>
      buf[len++] = 'x';
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	1c5a      	adds	r2, r3, #1
 8004694:	61fa      	str	r2, [r7, #28]
 8004696:	69ba      	ldr	r2, [r7, #24]
 8004698:	4413      	add	r3, r2
 800469a:	2278      	movs	r2, #120	; 0x78
 800469c:	701a      	strb	r2, [r3, #0]
 800469e:	e01f      	b.n	80046e0 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80046a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a2:	2b10      	cmp	r3, #16
 80046a4:	d10f      	bne.n	80046c6 <_ntoa_format+0x114>
 80046a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a8:	f003 0320 	and.w	r3, r3, #32
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00a      	beq.n	80046c6 <_ntoa_format+0x114>
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	2b1f      	cmp	r3, #31
 80046b4:	d807      	bhi.n	80046c6 <_ntoa_format+0x114>
      buf[len++] = 'X';
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	1c5a      	adds	r2, r3, #1
 80046ba:	61fa      	str	r2, [r7, #28]
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	4413      	add	r3, r2
 80046c0:	2258      	movs	r2, #88	; 0x58
 80046c2:	701a      	strb	r2, [r3, #0]
 80046c4:	e00c      	b.n	80046e0 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80046c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d109      	bne.n	80046e0 <_ntoa_format+0x12e>
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	2b1f      	cmp	r3, #31
 80046d0:	d806      	bhi.n	80046e0 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	1c5a      	adds	r2, r3, #1
 80046d6:	61fa      	str	r2, [r7, #28]
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	4413      	add	r3, r2
 80046dc:	2262      	movs	r2, #98	; 0x62
 80046de:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	2b1f      	cmp	r3, #31
 80046e4:	d806      	bhi.n	80046f4 <_ntoa_format+0x142>
      buf[len++] = '0';
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	1c5a      	adds	r2, r3, #1
 80046ea:	61fa      	str	r2, [r7, #28]
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	4413      	add	r3, r2
 80046f0:	2230      	movs	r2, #48	; 0x30
 80046f2:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	2b1f      	cmp	r3, #31
 80046f8:	d824      	bhi.n	8004744 <_ntoa_format+0x192>
    if (negative) {
 80046fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d007      	beq.n	8004712 <_ntoa_format+0x160>
      buf[len++] = '-';
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	1c5a      	adds	r2, r3, #1
 8004706:	61fa      	str	r2, [r7, #28]
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	4413      	add	r3, r2
 800470c:	222d      	movs	r2, #45	; 0x2d
 800470e:	701a      	strb	r2, [r3, #0]
 8004710:	e018      	b.n	8004744 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8004712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b00      	cmp	r3, #0
 800471a:	d007      	beq.n	800472c <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	1c5a      	adds	r2, r3, #1
 8004720:	61fa      	str	r2, [r7, #28]
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	4413      	add	r3, r2
 8004726:	222b      	movs	r2, #43	; 0x2b
 8004728:	701a      	strb	r2, [r3, #0]
 800472a:	e00b      	b.n	8004744 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 800472c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472e:	f003 0308 	and.w	r3, r3, #8
 8004732:	2b00      	cmp	r3, #0
 8004734:	d006      	beq.n	8004744 <_ntoa_format+0x192>
      buf[len++] = ' ';
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	1c5a      	adds	r2, r3, #1
 800473a:	61fa      	str	r2, [r7, #28]
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	4413      	add	r3, r2
 8004740:	2220      	movs	r2, #32
 8004742:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8004744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004746:	9303      	str	r3, [sp, #12]
 8004748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800474a:	9302      	str	r3, [sp, #8]
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	9301      	str	r3, [sp, #4]
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	9300      	str	r3, [sp, #0]
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	68b9      	ldr	r1, [r7, #8]
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f7ff fed9 	bl	8004512 <_out_rev>
 8004760:	4603      	mov	r3, r0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}

0800476a <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800476a:	b580      	push	{r7, lr}
 800476c:	b096      	sub	sp, #88	; 0x58
 800476e:	af08      	add	r7, sp, #32
 8004770:	60f8      	str	r0, [r7, #12]
 8004772:	60b9      	str	r1, [r7, #8]
 8004774:	607a      	str	r2, [r7, #4]
 8004776:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8004778:	2300      	movs	r3, #0
 800477a:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800477c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800477e:	2b00      	cmp	r3, #0
 8004780:	d103      	bne.n	800478a <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8004782:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004784:	f023 0310 	bic.w	r3, r3, #16
 8004788:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800478a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800478c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004790:	2b00      	cmp	r3, #0
 8004792:	d002      	beq.n	800479a <_ntoa_long+0x30>
 8004794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004796:	2b00      	cmp	r3, #0
 8004798:	d033      	beq.n	8004802 <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 800479a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800479c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800479e:	fbb3 f2f2 	udiv	r2, r3, r2
 80047a2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80047a4:	fb01 f202 	mul.w	r2, r1, r2
 80047a8:	1a9b      	subs	r3, r3, r2
 80047aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80047ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80047b2:	2b09      	cmp	r3, #9
 80047b4:	d804      	bhi.n	80047c0 <_ntoa_long+0x56>
 80047b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80047ba:	3330      	adds	r3, #48	; 0x30
 80047bc:	b2da      	uxtb	r2, r3
 80047be:	e00d      	b.n	80047dc <_ntoa_long+0x72>
 80047c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047c2:	f003 0320 	and.w	r3, r3, #32
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d001      	beq.n	80047ce <_ntoa_long+0x64>
 80047ca:	2241      	movs	r2, #65	; 0x41
 80047cc:	e000      	b.n	80047d0 <_ntoa_long+0x66>
 80047ce:	2261      	movs	r2, #97	; 0x61
 80047d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80047d4:	4413      	add	r3, r2
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	3b0a      	subs	r3, #10
 80047da:	b2da      	uxtb	r2, r3
 80047dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047de:	1c59      	adds	r1, r3, #1
 80047e0:	6379      	str	r1, [r7, #52]	; 0x34
 80047e2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80047e6:	440b      	add	r3, r1
 80047e8:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 80047ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f4:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80047f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d002      	beq.n	8004802 <_ntoa_long+0x98>
 80047fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047fe:	2b1f      	cmp	r3, #31
 8004800:	d9cb      	bls.n	800479a <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8004802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004804:	9306      	str	r3, [sp, #24]
 8004806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004808:	9305      	str	r3, [sp, #20]
 800480a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800480c:	9304      	str	r3, [sp, #16]
 800480e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004810:	9303      	str	r3, [sp, #12]
 8004812:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8004816:	9302      	str	r3, [sp, #8]
 8004818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800481a:	9301      	str	r3, [sp, #4]
 800481c:	f107 0310 	add.w	r3, r7, #16
 8004820:	9300      	str	r3, [sp, #0]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	68b9      	ldr	r1, [r7, #8]
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f7ff fec2 	bl	80045b2 <_ntoa_format>
 800482e:	4603      	mov	r3, r0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3738      	adds	r7, #56	; 0x38
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004838:	b590      	push	{r4, r7, lr}
 800483a:	b097      	sub	sp, #92	; 0x5c
 800483c:	af08      	add	r7, sp, #32
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
 8004844:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8004846:	2300      	movs	r3, #0
 8004848:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800484a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800484e:	4323      	orrs	r3, r4
 8004850:	d103      	bne.n	800485a <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8004852:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004854:	f023 0310 	bic.w	r3, r3, #16
 8004858:	66bb      	str	r3, [r7, #104]	; 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800485a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800485c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004860:	2b00      	cmp	r3, #0
 8004862:	d003      	beq.n	800486c <_ntoa_long_long+0x34>
 8004864:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8004868:	4323      	orrs	r3, r4
 800486a:	d039      	beq.n	80048e0 <_ntoa_long_long+0xa8>
    do {
      const char digit = (char)(value % base);
 800486c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004870:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004874:	f7fc f946 	bl	8000b04 <__aeabi_uldivmod>
 8004878:	461c      	mov	r4, r3
 800487a:	4613      	mov	r3, r2
 800487c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8004880:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004884:	2b09      	cmp	r3, #9
 8004886:	d804      	bhi.n	8004892 <_ntoa_long_long+0x5a>
 8004888:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800488c:	3330      	adds	r3, #48	; 0x30
 800488e:	b2da      	uxtb	r2, r3
 8004890:	e00d      	b.n	80048ae <_ntoa_long_long+0x76>
 8004892:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004894:	f003 0320 	and.w	r3, r3, #32
 8004898:	2b00      	cmp	r3, #0
 800489a:	d001      	beq.n	80048a0 <_ntoa_long_long+0x68>
 800489c:	2241      	movs	r2, #65	; 0x41
 800489e:	e000      	b.n	80048a2 <_ntoa_long_long+0x6a>
 80048a0:	2261      	movs	r2, #97	; 0x61
 80048a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80048a6:	4413      	add	r3, r2
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	3b0a      	subs	r3, #10
 80048ac:	b2da      	uxtb	r2, r3
 80048ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048b0:	1c59      	adds	r1, r3, #1
 80048b2:	6379      	str	r1, [r7, #52]	; 0x34
 80048b4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80048b8:	440b      	add	r3, r1
 80048ba:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 80048be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80048c2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80048c6:	f7fc f91d 	bl	8000b04 <__aeabi_uldivmod>
 80048ca:	4603      	mov	r3, r0
 80048cc:	460c      	mov	r4, r1
 80048ce:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80048d2:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80048d6:	4323      	orrs	r3, r4
 80048d8:	d002      	beq.n	80048e0 <_ntoa_long_long+0xa8>
 80048da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048dc:	2b1f      	cmp	r3, #31
 80048de:	d9c5      	bls.n	800486c <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80048e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80048e4:	9206      	str	r2, [sp, #24]
 80048e6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80048e8:	9205      	str	r2, [sp, #20]
 80048ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80048ec:	9204      	str	r2, [sp, #16]
 80048ee:	9303      	str	r3, [sp, #12]
 80048f0:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80048f4:	9302      	str	r3, [sp, #8]
 80048f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048f8:	9301      	str	r3, [sp, #4]
 80048fa:	f107 0310 	add.w	r3, r7, #16
 80048fe:	9300      	str	r3, [sp, #0]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	68b9      	ldr	r1, [r7, #8]
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f7ff fe53 	bl	80045b2 <_ntoa_format>
 800490c:	4603      	mov	r3, r0
}
 800490e:	4618      	mov	r0, r3
 8004910:	373c      	adds	r7, #60	; 0x3c
 8004912:	46bd      	mov	sp, r7
 8004914:	bd90      	pop	{r4, r7, pc}
	...

08004918 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004918:	b590      	push	{r4, r7, lr}
 800491a:	b09d      	sub	sp, #116	; 0x74
 800491c:	af04      	add	r7, sp, #16
 800491e:	6178      	str	r0, [r7, #20]
 8004920:	6139      	str	r1, [r7, #16]
 8004922:	60fa      	str	r2, [r7, #12]
 8004924:	60bb      	str	r3, [r7, #8]
 8004926:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 800492a:	2300      	movs	r3, #0
 800492c:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 800492e:	f04f 0300 	mov.w	r3, #0
 8004932:	f04f 0400 	mov.w	r4, #0
 8004936:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 800493a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800493e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004942:	f7fc f865 	bl	8000a10 <__aeabi_dcmpeq>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d10f      	bne.n	800496c <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 800494c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800494e:	9303      	str	r3, [sp, #12]
 8004950:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004952:	9302      	str	r3, [sp, #8]
 8004954:	2303      	movs	r3, #3
 8004956:	9301      	str	r3, [sp, #4]
 8004958:	4baf      	ldr	r3, [pc, #700]	; (8004c18 <_ftoa+0x300>)
 800495a:	9300      	str	r3, [sp, #0]
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	6939      	ldr	r1, [r7, #16]
 8004962:	6978      	ldr	r0, [r7, #20]
 8004964:	f7ff fdd5 	bl	8004512 <_out_rev>
 8004968:	4603      	mov	r3, r0
 800496a:	e237      	b.n	8004ddc <_ftoa+0x4c4>
  if (value < -DBL_MAX)
 800496c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004970:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8004974:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004978:	f7fc f854 	bl	8000a24 <__aeabi_dcmplt>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00f      	beq.n	80049a2 <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8004982:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004984:	9303      	str	r3, [sp, #12]
 8004986:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004988:	9302      	str	r3, [sp, #8]
 800498a:	2304      	movs	r3, #4
 800498c:	9301      	str	r3, [sp, #4]
 800498e:	4ba3      	ldr	r3, [pc, #652]	; (8004c1c <_ftoa+0x304>)
 8004990:	9300      	str	r3, [sp, #0]
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	6939      	ldr	r1, [r7, #16]
 8004998:	6978      	ldr	r0, [r7, #20]
 800499a:	f7ff fdba 	bl	8004512 <_out_rev>
 800499e:	4603      	mov	r3, r0
 80049a0:	e21c      	b.n	8004ddc <_ftoa+0x4c4>
  if (value > DBL_MAX)
 80049a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049a6:	4b9e      	ldr	r3, [pc, #632]	; (8004c20 <_ftoa+0x308>)
 80049a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049ac:	f7fc f858 	bl	8000a60 <__aeabi_dcmpgt>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d01d      	beq.n	80049f2 <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 80049b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049b8:	f003 0304 	and.w	r3, r3, #4
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d001      	beq.n	80049c4 <_ftoa+0xac>
 80049c0:	4b98      	ldr	r3, [pc, #608]	; (8004c24 <_ftoa+0x30c>)
 80049c2:	e000      	b.n	80049c6 <_ftoa+0xae>
 80049c4:	4b98      	ldr	r3, [pc, #608]	; (8004c28 <_ftoa+0x310>)
 80049c6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80049c8:	f002 0204 	and.w	r2, r2, #4
 80049cc:	2a00      	cmp	r2, #0
 80049ce:	d001      	beq.n	80049d4 <_ftoa+0xbc>
 80049d0:	2204      	movs	r2, #4
 80049d2:	e000      	b.n	80049d6 <_ftoa+0xbe>
 80049d4:	2203      	movs	r2, #3
 80049d6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80049d8:	9103      	str	r1, [sp, #12]
 80049da:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80049dc:	9102      	str	r1, [sp, #8]
 80049de:	9201      	str	r2, [sp, #4]
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	6939      	ldr	r1, [r7, #16]
 80049e8:	6978      	ldr	r0, [r7, #20]
 80049ea:	f7ff fd92 	bl	8004512 <_out_rev>
 80049ee:	4603      	mov	r3, r0
 80049f0:	e1f4      	b.n	8004ddc <_ftoa+0x4c4>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 80049f2:	a385      	add	r3, pc, #532	; (adr r3, 8004c08 <_ftoa+0x2f0>)
 80049f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049fc:	f7fc f830 	bl	8000a60 <__aeabi_dcmpgt>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d109      	bne.n	8004a1a <_ftoa+0x102>
 8004a06:	a382      	add	r3, pc, #520	; (adr r3, 8004c10 <_ftoa+0x2f8>)
 8004a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a10:	f7fc f808 	bl	8000a24 <__aeabi_dcmplt>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00f      	beq.n	8004a3a <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8004a1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a1c:	9302      	str	r3, [sp, #8]
 8004a1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a20:	9301      	str	r3, [sp, #4]
 8004a22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a24:	9300      	str	r3, [sp, #0]
 8004a26:	ed97 0b00 	vldr	d0, [r7]
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	6939      	ldr	r1, [r7, #16]
 8004a30:	6978      	ldr	r0, [r7, #20]
 8004a32:	f000 f9dd 	bl	8004df0 <_etoa>
 8004a36:	4603      	mov	r3, r0
 8004a38:	e1d0      	b.n	8004ddc <_ftoa+0x4c4>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8004a40:	f04f 0200 	mov.w	r2, #0
 8004a44:	f04f 0300 	mov.w	r3, #0
 8004a48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a4c:	f7fb ffea 	bl	8000a24 <__aeabi_dcmplt>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00e      	beq.n	8004a74 <_ftoa+0x15c>
    negative = true;
 8004a56:	2301      	movs	r3, #1
 8004a58:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 8004a5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a60:	f04f 0000 	mov.w	r0, #0
 8004a64:	f04f 0100 	mov.w	r1, #0
 8004a68:	f7fb fbb2 	bl	80001d0 <__aeabi_dsub>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	460c      	mov	r4, r1
 8004a70:	e9c7 3400 	strd	r3, r4, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8004a74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10e      	bne.n	8004a9c <_ftoa+0x184>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8004a7e:	2306      	movs	r3, #6
 8004a80:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8004a82:	e00b      	b.n	8004a9c <_ftoa+0x184>
    buf[len++] = '0';
 8004a84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a86:	1c5a      	adds	r2, r3, #1
 8004a88:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004a8a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004a8e:	4413      	add	r3, r2
 8004a90:	2230      	movs	r2, #48	; 0x30
 8004a92:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8004a96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8004a9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a9e:	2b1f      	cmp	r3, #31
 8004aa0:	d802      	bhi.n	8004aa8 <_ftoa+0x190>
 8004aa2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004aa4:	2b09      	cmp	r3, #9
 8004aa6:	d8ed      	bhi.n	8004a84 <_ftoa+0x16c>
  }

  int whole = (int)value;
 8004aa8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004aac:	f7fb ffe2 	bl	8000a74 <__aeabi_d2iz>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 8004ab4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004ab6:	f7fb fcd9 	bl	800046c <__aeabi_i2d>
 8004aba:	4603      	mov	r3, r0
 8004abc:	460c      	mov	r4, r1
 8004abe:	461a      	mov	r2, r3
 8004ac0:	4623      	mov	r3, r4
 8004ac2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ac6:	f7fb fb83 	bl	80001d0 <__aeabi_dsub>
 8004aca:	4603      	mov	r3, r0
 8004acc:	460c      	mov	r4, r1
 8004ace:	4618      	mov	r0, r3
 8004ad0:	4621      	mov	r1, r4
 8004ad2:	4a56      	ldr	r2, [pc, #344]	; (8004c2c <_ftoa+0x314>)
 8004ad4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ad6:	00db      	lsls	r3, r3, #3
 8004ad8:	4413      	add	r3, r2
 8004ada:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	4623      	mov	r3, r4
 8004ae2:	f7fb fd2d 	bl	8000540 <__aeabi_dmul>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	460c      	mov	r4, r1
 8004aea:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 8004aee:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004af2:	f7fb ffe7 	bl	8000ac4 <__aeabi_d2uiz>
 8004af6:	4603      	mov	r3, r0
 8004af8:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8004afa:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004afc:	f7fb fca6 	bl	800044c <__aeabi_ui2d>
 8004b00:	4603      	mov	r3, r0
 8004b02:	460c      	mov	r4, r1
 8004b04:	461a      	mov	r2, r3
 8004b06:	4623      	mov	r3, r4
 8004b08:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004b0c:	f7fb fb60 	bl	80001d0 <__aeabi_dsub>
 8004b10:	4603      	mov	r3, r0
 8004b12:	460c      	mov	r4, r1
 8004b14:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

  if (diff > 0.5) {
 8004b18:	f04f 0200 	mov.w	r2, #0
 8004b1c:	4b44      	ldr	r3, [pc, #272]	; (8004c30 <_ftoa+0x318>)
 8004b1e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004b22:	f7fb ff9d 	bl	8000a60 <__aeabi_dcmpgt>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d018      	beq.n	8004b5e <_ftoa+0x246>
    ++frac;
 8004b2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b2e:	3301      	adds	r3, #1
 8004b30:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8004b32:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004b34:	f7fb fc8a 	bl	800044c <__aeabi_ui2d>
 8004b38:	4a3c      	ldr	r2, [pc, #240]	; (8004c2c <_ftoa+0x314>)
 8004b3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b3c:	00db      	lsls	r3, r3, #3
 8004b3e:	4413      	add	r3, r2
 8004b40:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004b44:	461a      	mov	r2, r3
 8004b46:	4623      	mov	r3, r4
 8004b48:	f7fb ff80 	bl	8000a4c <__aeabi_dcmpge>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d01a      	beq.n	8004b88 <_ftoa+0x270>
      frac = 0;
 8004b52:	2300      	movs	r3, #0
 8004b54:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 8004b56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b58:	3301      	adds	r3, #1
 8004b5a:	657b      	str	r3, [r7, #84]	; 0x54
 8004b5c:	e014      	b.n	8004b88 <_ftoa+0x270>
    }
  }
  else if (diff < 0.5) {
 8004b5e:	f04f 0200 	mov.w	r2, #0
 8004b62:	4b33      	ldr	r3, [pc, #204]	; (8004c30 <_ftoa+0x318>)
 8004b64:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004b68:	f7fb ff5c 	bl	8000a24 <__aeabi_dcmplt>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10a      	bne.n	8004b88 <_ftoa+0x270>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8004b72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d004      	beq.n	8004b82 <_ftoa+0x26a>
 8004b78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d002      	beq.n	8004b88 <_ftoa+0x270>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8004b82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b84:	3301      	adds	r3, #1
 8004b86:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8004b88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d136      	bne.n	8004bfc <_ftoa+0x2e4>
    diff = value - (double)whole;
 8004b8e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004b90:	f7fb fc6c 	bl	800046c <__aeabi_i2d>
 8004b94:	4603      	mov	r3, r0
 8004b96:	460c      	mov	r4, r1
 8004b98:	461a      	mov	r2, r3
 8004b9a:	4623      	mov	r3, r4
 8004b9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ba0:	f7fb fb16 	bl	80001d0 <__aeabi_dsub>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	460c      	mov	r4, r1
 8004ba8:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8004bac:	2301      	movs	r3, #1
 8004bae:	461c      	mov	r4, r3
 8004bb0:	f04f 0200 	mov.w	r2, #0
 8004bb4:	4b1e      	ldr	r3, [pc, #120]	; (8004c30 <_ftoa+0x318>)
 8004bb6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004bba:	f7fb ff33 	bl	8000a24 <__aeabi_dcmplt>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d101      	bne.n	8004bc8 <_ftoa+0x2b0>
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	461c      	mov	r4, r3
 8004bc8:	b2e3      	uxtb	r3, r4
 8004bca:	f083 0301 	eor.w	r3, r3, #1
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d109      	bne.n	8004be8 <_ftoa+0x2d0>
 8004bd4:	f04f 0200 	mov.w	r2, #0
 8004bd8:	4b15      	ldr	r3, [pc, #84]	; (8004c30 <_ftoa+0x318>)
 8004bda:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004bde:	f7fb ff3f 	bl	8000a60 <__aeabi_dcmpgt>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d069      	beq.n	8004cbc <_ftoa+0x3a4>
 8004be8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f000 8087 	beq.w	8004d02 <_ftoa+0x3ea>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8004bf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	657b      	str	r3, [r7, #84]	; 0x54
 8004bfa:	e082      	b.n	8004d02 <_ftoa+0x3ea>
    }
  }
  else {
    unsigned int count = prec;
 8004bfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004c00:	e039      	b.n	8004c76 <_ftoa+0x35e>
 8004c02:	bf00      	nop
 8004c04:	f3af 8000 	nop.w
 8004c08:	00000000 	.word	0x00000000
 8004c0c:	41cdcd65 	.word	0x41cdcd65
 8004c10:	00000000 	.word	0x00000000
 8004c14:	c1cdcd65 	.word	0xc1cdcd65
 8004c18:	08005df4 	.word	0x08005df4
 8004c1c:	08005df8 	.word	0x08005df8
 8004c20:	7fefffff 	.word	0x7fefffff
 8004c24:	08005e00 	.word	0x08005e00
 8004c28:	08005e08 	.word	0x08005e08
 8004c2c:	08005e28 	.word	0x08005e28
 8004c30:	3fe00000 	.word	0x3fe00000
      --count;
 8004c34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c36:	3b01      	subs	r3, #1
 8004c38:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8004c3a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004c3c:	4b69      	ldr	r3, [pc, #420]	; (8004de4 <_ftoa+0x4cc>)
 8004c3e:	fba3 2301 	umull	r2, r3, r3, r1
 8004c42:	08da      	lsrs	r2, r3, #3
 8004c44:	4613      	mov	r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4413      	add	r3, r2
 8004c4a:	005b      	lsls	r3, r3, #1
 8004c4c:	1aca      	subs	r2, r1, r3
 8004c4e:	b2d2      	uxtb	r2, r2
 8004c50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c52:	1c59      	adds	r1, r3, #1
 8004c54:	65f9      	str	r1, [r7, #92]	; 0x5c
 8004c56:	3230      	adds	r2, #48	; 0x30
 8004c58:	b2d2      	uxtb	r2, r2
 8004c5a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8004c5e:	440b      	add	r3, r1
 8004c60:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8004c64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c66:	4a5f      	ldr	r2, [pc, #380]	; (8004de4 <_ftoa+0x4cc>)
 8004c68:	fba2 2303 	umull	r2, r3, r2, r3
 8004c6c:	08db      	lsrs	r3, r3, #3
 8004c6e:	653b      	str	r3, [r7, #80]	; 0x50
 8004c70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d003      	beq.n	8004c7e <_ftoa+0x366>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004c76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c78:	2b1f      	cmp	r3, #31
 8004c7a:	d9db      	bls.n	8004c34 <_ftoa+0x31c>
 8004c7c:	e00a      	b.n	8004c94 <_ftoa+0x37c>
        break;
 8004c7e:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8004c80:	e008      	b.n	8004c94 <_ftoa+0x37c>
      buf[len++] = '0';
 8004c82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c84:	1c5a      	adds	r2, r3, #1
 8004c86:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004c88:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004c8c:	4413      	add	r3, r2
 8004c8e:	2230      	movs	r2, #48	; 0x30
 8004c90:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8004c94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c96:	2b1f      	cmp	r3, #31
 8004c98:	d804      	bhi.n	8004ca4 <_ftoa+0x38c>
 8004c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c9c:	1e5a      	subs	r2, r3, #1
 8004c9e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1ee      	bne.n	8004c82 <_ftoa+0x36a>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004ca4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ca6:	2b1f      	cmp	r3, #31
 8004ca8:	d82b      	bhi.n	8004d02 <_ftoa+0x3ea>
      // add decimal
      buf[len++] = '.';
 8004caa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cac:	1c5a      	adds	r2, r3, #1
 8004cae:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004cb0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004cb4:	4413      	add	r3, r2
 8004cb6:	222e      	movs	r2, #46	; 0x2e
 8004cb8:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004cbc:	e021      	b.n	8004d02 <_ftoa+0x3ea>
    buf[len++] = (char)(48 + (whole % 10));
 8004cbe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004cc0:	4b49      	ldr	r3, [pc, #292]	; (8004de8 <_ftoa+0x4d0>)
 8004cc2:	fb83 1302 	smull	r1, r3, r3, r2
 8004cc6:	1099      	asrs	r1, r3, #2
 8004cc8:	17d3      	asrs	r3, r2, #31
 8004cca:	1ac9      	subs	r1, r1, r3
 8004ccc:	460b      	mov	r3, r1
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	440b      	add	r3, r1
 8004cd2:	005b      	lsls	r3, r3, #1
 8004cd4:	1ad1      	subs	r1, r2, r3
 8004cd6:	b2ca      	uxtb	r2, r1
 8004cd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cda:	1c59      	adds	r1, r3, #1
 8004cdc:	65f9      	str	r1, [r7, #92]	; 0x5c
 8004cde:	3230      	adds	r2, #48	; 0x30
 8004ce0:	b2d2      	uxtb	r2, r2
 8004ce2:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8004ce6:	440b      	add	r3, r1
 8004ce8:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8004cec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cee:	4a3e      	ldr	r2, [pc, #248]	; (8004de8 <_ftoa+0x4d0>)
 8004cf0:	fb82 1203 	smull	r1, r2, r2, r3
 8004cf4:	1092      	asrs	r2, r2, #2
 8004cf6:	17db      	asrs	r3, r3, #31
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	657b      	str	r3, [r7, #84]	; 0x54
 8004cfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <_ftoa+0x3f2>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004d02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d04:	2b1f      	cmp	r3, #31
 8004d06:	d9da      	bls.n	8004cbe <_ftoa+0x3a6>
 8004d08:	e000      	b.n	8004d0c <_ftoa+0x3f4>
      break;
 8004d0a:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8004d0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d0e:	f003 0302 	and.w	r3, r3, #2
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d124      	bne.n	8004d60 <_ftoa+0x448>
 8004d16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d01f      	beq.n	8004d60 <_ftoa+0x448>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8004d20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d015      	beq.n	8004d52 <_ftoa+0x43a>
 8004d26:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d104      	bne.n	8004d38 <_ftoa+0x420>
 8004d2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d30:	f003 030c 	and.w	r3, r3, #12
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00c      	beq.n	8004d52 <_ftoa+0x43a>
      width--;
 8004d38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8004d3e:	e008      	b.n	8004d52 <_ftoa+0x43a>
      buf[len++] = '0';
 8004d40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d42:	1c5a      	adds	r2, r3, #1
 8004d44:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004d46:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004d4a:	4413      	add	r3, r2
 8004d4c:	2230      	movs	r2, #48	; 0x30
 8004d4e:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8004d52:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d202      	bcs.n	8004d60 <_ftoa+0x448>
 8004d5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d5c:	2b1f      	cmp	r3, #31
 8004d5e:	d9ef      	bls.n	8004d40 <_ftoa+0x428>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004d60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d62:	2b1f      	cmp	r3, #31
 8004d64:	d82a      	bhi.n	8004dbc <_ftoa+0x4a4>
    if (negative) {
 8004d66:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d009      	beq.n	8004d82 <_ftoa+0x46a>
      buf[len++] = '-';
 8004d6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d70:	1c5a      	adds	r2, r3, #1
 8004d72:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004d74:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004d78:	4413      	add	r3, r2
 8004d7a:	222d      	movs	r2, #45	; 0x2d
 8004d7c:	f803 2c48 	strb.w	r2, [r3, #-72]
 8004d80:	e01c      	b.n	8004dbc <_ftoa+0x4a4>
    }
    else if (flags & FLAGS_PLUS) {
 8004d82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d84:	f003 0304 	and.w	r3, r3, #4
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d009      	beq.n	8004da0 <_ftoa+0x488>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8004d8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d8e:	1c5a      	adds	r2, r3, #1
 8004d90:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004d92:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004d96:	4413      	add	r3, r2
 8004d98:	222b      	movs	r2, #43	; 0x2b
 8004d9a:	f803 2c48 	strb.w	r2, [r3, #-72]
 8004d9e:	e00d      	b.n	8004dbc <_ftoa+0x4a4>
    }
    else if (flags & FLAGS_SPACE) {
 8004da0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004da2:	f003 0308 	and.w	r3, r3, #8
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d008      	beq.n	8004dbc <_ftoa+0x4a4>
      buf[len++] = ' ';
 8004daa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dac:	1c5a      	adds	r2, r3, #1
 8004dae:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004db0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004db4:	4413      	add	r3, r2
 8004db6:	2220      	movs	r2, #32
 8004db8:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8004dbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dbe:	9303      	str	r3, [sp, #12]
 8004dc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dc2:	9302      	str	r3, [sp, #8]
 8004dc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dc6:	9301      	str	r3, [sp, #4]
 8004dc8:	f107 0318 	add.w	r3, r7, #24
 8004dcc:	9300      	str	r3, [sp, #0]
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	6939      	ldr	r1, [r7, #16]
 8004dd4:	6978      	ldr	r0, [r7, #20]
 8004dd6:	f7ff fb9c 	bl	8004512 <_out_rev>
 8004dda:	4603      	mov	r3, r0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3764      	adds	r7, #100	; 0x64
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd90      	pop	{r4, r7, pc}
 8004de4:	cccccccd 	.word	0xcccccccd
 8004de8:	66666667 	.word	0x66666667
 8004dec:	00000000 	.word	0x00000000

08004df0 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004df4:	b09d      	sub	sp, #116	; 0x74
 8004df6:	af06      	add	r7, sp, #24
 8004df8:	61f8      	str	r0, [r7, #28]
 8004dfa:	61b9      	str	r1, [r7, #24]
 8004dfc:	617a      	str	r2, [r7, #20]
 8004dfe:	613b      	str	r3, [r7, #16]
 8004e00:	ed87 0b02 	vstr	d0, [r7, #8]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8004e04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e08:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e0c:	f7fb fe00 	bl	8000a10 <__aeabi_dcmpeq>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d014      	beq.n	8004e40 <_etoa+0x50>
 8004e16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e1a:	4bc9      	ldr	r3, [pc, #804]	; (8005140 <_etoa+0x350>)
 8004e1c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e20:	f7fb fe1e 	bl	8000a60 <__aeabi_dcmpgt>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10a      	bne.n	8004e40 <_etoa+0x50>
 8004e2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e2e:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8004e32:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e36:	f7fb fdf5 	bl	8000a24 <__aeabi_dcmplt>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d012      	beq.n	8004e66 <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8004e40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e44:	9302      	str	r3, [sp, #8]
 8004e46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e4a:	9301      	str	r3, [sp, #4]
 8004e4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e50:	9300      	str	r3, [sp, #0]
 8004e52:	ed97 0b02 	vldr	d0, [r7, #8]
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	69b9      	ldr	r1, [r7, #24]
 8004e5c:	69f8      	ldr	r0, [r7, #28]
 8004e5e:	f7ff fd5b 	bl	8004918 <_ftoa>
 8004e62:	4603      	mov	r3, r0
 8004e64:	e24f      	b.n	8005306 <_etoa+0x516>
  }

  // determine the sign
  const bool negative = value < 0;
 8004e66:	2301      	movs	r3, #1
 8004e68:	461c      	mov	r4, r3
 8004e6a:	f04f 0200 	mov.w	r2, #0
 8004e6e:	f04f 0300 	mov.w	r3, #0
 8004e72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e76:	f7fb fdd5 	bl	8000a24 <__aeabi_dcmplt>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d101      	bne.n	8004e84 <_etoa+0x94>
 8004e80:	2300      	movs	r3, #0
 8004e82:	461c      	mov	r4, r3
 8004e84:	f887 404b 	strb.w	r4, [r7, #75]	; 0x4b
  if (negative) {
 8004e88:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d005      	beq.n	8004e9c <_etoa+0xac>
    value = -value;
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	60bb      	str	r3, [r7, #8]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004e9a:	60fb      	str	r3, [r7, #12]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8004e9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d102      	bne.n	8004eae <_etoa+0xbe>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8004ea8:	2306      	movs	r3, #6
 8004eaa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8004eae:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004eb2:	e9c7 3408 	strd	r3, r4, [r7, #32]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8004eb6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004eba:	f04f 0300 	mov.w	r3, #0
 8004ebe:	f04f 0400 	mov.w	r4, #0
 8004ec2:	0d13      	lsrs	r3, r2, #20
 8004ec4:	2400      	movs	r4, #0
 8004ec6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004eca:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004ece:	647b      	str	r3, [r7, #68]	; 0x44
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8004ed0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004ed4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004ed8:	4a9a      	ldr	r2, [pc, #616]	; (8005144 <_etoa+0x354>)
 8004eda:	ea03 0801 	and.w	r8, r3, r1
 8004ede:	ea04 0902 	and.w	r9, r4, r2
 8004ee2:	f04f 0100 	mov.w	r1, #0
 8004ee6:	4a98      	ldr	r2, [pc, #608]	; (8005148 <_etoa+0x358>)
 8004ee8:	ea48 0301 	orr.w	r3, r8, r1
 8004eec:	ea49 0402 	orr.w	r4, r9, r2
 8004ef0:	e9c7 3408 	strd	r3, r4, [r7, #32]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8004ef4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004ef6:	f7fb fab9 	bl	800046c <__aeabi_i2d>
 8004efa:	a385      	add	r3, pc, #532	; (adr r3, 8005110 <_etoa+0x320>)
 8004efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f00:	f7fb fb1e 	bl	8000540 <__aeabi_dmul>
 8004f04:	4603      	mov	r3, r0
 8004f06:	460c      	mov	r4, r1
 8004f08:	4618      	mov	r0, r3
 8004f0a:	4621      	mov	r1, r4
 8004f0c:	a382      	add	r3, pc, #520	; (adr r3, 8005118 <_etoa+0x328>)
 8004f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f12:	f7fb f95f 	bl	80001d4 <__adddf3>
 8004f16:	4603      	mov	r3, r0
 8004f18:	460c      	mov	r4, r1
 8004f1a:	4698      	mov	r8, r3
 8004f1c:	46a1      	mov	r9, r4
 8004f1e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004f22:	f04f 0200 	mov.w	r2, #0
 8004f26:	4b89      	ldr	r3, [pc, #548]	; (800514c <_etoa+0x35c>)
 8004f28:	f7fb f952 	bl	80001d0 <__aeabi_dsub>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	460c      	mov	r4, r1
 8004f30:	4618      	mov	r0, r3
 8004f32:	4621      	mov	r1, r4
 8004f34:	a37a      	add	r3, pc, #488	; (adr r3, 8005120 <_etoa+0x330>)
 8004f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f3a:	f7fb fb01 	bl	8000540 <__aeabi_dmul>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	460c      	mov	r4, r1
 8004f42:	461a      	mov	r2, r3
 8004f44:	4623      	mov	r3, r4
 8004f46:	4640      	mov	r0, r8
 8004f48:	4649      	mov	r1, r9
 8004f4a:	f7fb f943 	bl	80001d4 <__adddf3>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	460c      	mov	r4, r1
 8004f52:	4618      	mov	r0, r3
 8004f54:	4621      	mov	r1, r4
 8004f56:	f7fb fd8d 	bl	8000a74 <__aeabi_d2iz>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	657b      	str	r3, [r7, #84]	; 0x54
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8004f5e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004f60:	f7fb fa84 	bl	800046c <__aeabi_i2d>
 8004f64:	a370      	add	r3, pc, #448	; (adr r3, 8005128 <_etoa+0x338>)
 8004f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6a:	f7fb fae9 	bl	8000540 <__aeabi_dmul>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	460c      	mov	r4, r1
 8004f72:	4618      	mov	r0, r3
 8004f74:	4621      	mov	r1, r4
 8004f76:	f04f 0200 	mov.w	r2, #0
 8004f7a:	4b75      	ldr	r3, [pc, #468]	; (8005150 <_etoa+0x360>)
 8004f7c:	f7fb f92a 	bl	80001d4 <__adddf3>
 8004f80:	4603      	mov	r3, r0
 8004f82:	460c      	mov	r4, r1
 8004f84:	4618      	mov	r0, r3
 8004f86:	4621      	mov	r1, r4
 8004f88:	f7fb fd74 	bl	8000a74 <__aeabi_d2iz>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	647b      	str	r3, [r7, #68]	; 0x44
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8004f90:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004f92:	f7fb fa6b 	bl	800046c <__aeabi_i2d>
 8004f96:	a366      	add	r3, pc, #408	; (adr r3, 8005130 <_etoa+0x340>)
 8004f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f9c:	f7fb fad0 	bl	8000540 <__aeabi_dmul>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	460c      	mov	r4, r1
 8004fa4:	4698      	mov	r8, r3
 8004fa6:	46a1      	mov	r9, r4
 8004fa8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004faa:	f7fb fa5f 	bl	800046c <__aeabi_i2d>
 8004fae:	a362      	add	r3, pc, #392	; (adr r3, 8005138 <_etoa+0x348>)
 8004fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb4:	f7fb fac4 	bl	8000540 <__aeabi_dmul>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	460c      	mov	r4, r1
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	4623      	mov	r3, r4
 8004fc0:	4640      	mov	r0, r8
 8004fc2:	4649      	mov	r1, r9
 8004fc4:	f7fb f904 	bl	80001d0 <__aeabi_dsub>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	460c      	mov	r4, r1
 8004fcc:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
  const double z2 = z * z;
 8004fd0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004fd4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004fd8:	f7fb fab2 	bl	8000540 <__aeabi_dmul>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	460c      	mov	r4, r1
 8004fe0:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8004fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fe6:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8004fea:	4619      	mov	r1, r3
 8004fec:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8004ff0:	f04f 0300 	mov.w	r3, #0
 8004ff4:	f04f 0400 	mov.w	r4, #0
 8004ff8:	050c      	lsls	r4, r1, #20
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	e9c7 3408 	strd	r3, r4, [r7, #32]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8005000:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005004:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005008:	4602      	mov	r2, r0
 800500a:	460b      	mov	r3, r1
 800500c:	f7fb f8e2 	bl	80001d4 <__adddf3>
 8005010:	4603      	mov	r3, r0
 8005012:	460c      	mov	r4, r1
 8005014:	469a      	mov	sl, r3
 8005016:	46a3      	mov	fp, r4
 8005018:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800501c:	f04f 0000 	mov.w	r0, #0
 8005020:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005024:	f7fb f8d4 	bl	80001d0 <__aeabi_dsub>
 8005028:	4603      	mov	r3, r0
 800502a:	460c      	mov	r4, r1
 800502c:	e9c7 3400 	strd	r3, r4, [r7]
 8005030:	f04f 0200 	mov.w	r2, #0
 8005034:	4b47      	ldr	r3, [pc, #284]	; (8005154 <_etoa+0x364>)
 8005036:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800503a:	f7fb fbab 	bl	8000794 <__aeabi_ddiv>
 800503e:	4603      	mov	r3, r0
 8005040:	460c      	mov	r4, r1
 8005042:	4618      	mov	r0, r3
 8005044:	4621      	mov	r1, r4
 8005046:	f04f 0200 	mov.w	r2, #0
 800504a:	4b43      	ldr	r3, [pc, #268]	; (8005158 <_etoa+0x368>)
 800504c:	f7fb f8c2 	bl	80001d4 <__adddf3>
 8005050:	4603      	mov	r3, r0
 8005052:	460c      	mov	r4, r1
 8005054:	461a      	mov	r2, r3
 8005056:	4623      	mov	r3, r4
 8005058:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800505c:	f7fb fb9a 	bl	8000794 <__aeabi_ddiv>
 8005060:	4603      	mov	r3, r0
 8005062:	460c      	mov	r4, r1
 8005064:	4618      	mov	r0, r3
 8005066:	4621      	mov	r1, r4
 8005068:	f04f 0200 	mov.w	r2, #0
 800506c:	4b3b      	ldr	r3, [pc, #236]	; (800515c <_etoa+0x36c>)
 800506e:	f7fb f8b1 	bl	80001d4 <__adddf3>
 8005072:	4603      	mov	r3, r0
 8005074:	460c      	mov	r4, r1
 8005076:	461a      	mov	r2, r3
 8005078:	4623      	mov	r3, r4
 800507a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800507e:	f7fb fb89 	bl	8000794 <__aeabi_ddiv>
 8005082:	4603      	mov	r3, r0
 8005084:	460c      	mov	r4, r1
 8005086:	461a      	mov	r2, r3
 8005088:	4623      	mov	r3, r4
 800508a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800508e:	f7fb f8a1 	bl	80001d4 <__adddf3>
 8005092:	4603      	mov	r3, r0
 8005094:	460c      	mov	r4, r1
 8005096:	461a      	mov	r2, r3
 8005098:	4623      	mov	r3, r4
 800509a:	4650      	mov	r0, sl
 800509c:	4659      	mov	r1, fp
 800509e:	f7fb fb79 	bl	8000794 <__aeabi_ddiv>
 80050a2:	4603      	mov	r3, r0
 80050a4:	460c      	mov	r4, r1
 80050a6:	4618      	mov	r0, r3
 80050a8:	4621      	mov	r1, r4
 80050aa:	f04f 0200 	mov.w	r2, #0
 80050ae:	4b26      	ldr	r3, [pc, #152]	; (8005148 <_etoa+0x358>)
 80050b0:	f7fb f890 	bl	80001d4 <__adddf3>
 80050b4:	4603      	mov	r3, r0
 80050b6:	460c      	mov	r4, r1
 80050b8:	461a      	mov	r2, r3
 80050ba:	4623      	mov	r3, r4
 80050bc:	4640      	mov	r0, r8
 80050be:	4649      	mov	r1, r9
 80050c0:	f7fb fa3e 	bl	8000540 <__aeabi_dmul>
 80050c4:	4603      	mov	r3, r0
 80050c6:	460c      	mov	r4, r1
 80050c8:	e9c7 3408 	strd	r3, r4, [r7, #32]
  // correct for rounding errors
  if (value < conv.F) {
 80050cc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80050d0:	461a      	mov	r2, r3
 80050d2:	4623      	mov	r3, r4
 80050d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80050d8:	f7fb fca4 	bl	8000a24 <__aeabi_dcmplt>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00d      	beq.n	80050fe <_etoa+0x30e>
    expval--;
 80050e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050e4:	3b01      	subs	r3, #1
 80050e6:	657b      	str	r3, [r7, #84]	; 0x54
    conv.F /= 10;
 80050e8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80050ec:	f04f 0200 	mov.w	r2, #0
 80050f0:	4b19      	ldr	r3, [pc, #100]	; (8005158 <_etoa+0x368>)
 80050f2:	f7fb fb4f 	bl	8000794 <__aeabi_ddiv>
 80050f6:	4603      	mov	r3, r0
 80050f8:	460c      	mov	r4, r1
 80050fa:	e9c7 3408 	strd	r3, r4, [r7, #32]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 80050fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005100:	2b63      	cmp	r3, #99	; 0x63
 8005102:	dc2d      	bgt.n	8005160 <_etoa+0x370>
 8005104:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005106:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800510a:	db29      	blt.n	8005160 <_etoa+0x370>
 800510c:	2304      	movs	r3, #4
 800510e:	e028      	b.n	8005162 <_etoa+0x372>
 8005110:	509f79fb 	.word	0x509f79fb
 8005114:	3fd34413 	.word	0x3fd34413
 8005118:	8b60c8b3 	.word	0x8b60c8b3
 800511c:	3fc68a28 	.word	0x3fc68a28
 8005120:	636f4361 	.word	0x636f4361
 8005124:	3fd287a7 	.word	0x3fd287a7
 8005128:	0979a371 	.word	0x0979a371
 800512c:	400a934f 	.word	0x400a934f
 8005130:	bbb55516 	.word	0xbbb55516
 8005134:	40026bb1 	.word	0x40026bb1
 8005138:	fefa39ef 	.word	0xfefa39ef
 800513c:	3fe62e42 	.word	0x3fe62e42
 8005140:	7fefffff 	.word	0x7fefffff
 8005144:	000fffff 	.word	0x000fffff
 8005148:	3ff00000 	.word	0x3ff00000
 800514c:	3ff80000 	.word	0x3ff80000
 8005150:	3fe00000 	.word	0x3fe00000
 8005154:	402c0000 	.word	0x402c0000
 8005158:	40240000 	.word	0x40240000
 800515c:	40180000 	.word	0x40180000
 8005160:	2305      	movs	r3, #5
 8005162:	653b      	str	r3, [r7, #80]	; 0x50

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8005164:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005168:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800516c:	2b00      	cmp	r3, #0
 800516e:	d03d      	beq.n	80051ec <_etoa+0x3fc>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8005170:	a367      	add	r3, pc, #412	; (adr r3, 8005310 <_etoa+0x520>)
 8005172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005176:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800517a:	f7fb fc67 	bl	8000a4c <__aeabi_dcmpge>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d024      	beq.n	80051ce <_etoa+0x3de>
 8005184:	a364      	add	r3, pc, #400	; (adr r3, 8005318 <_etoa+0x528>)
 8005186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800518a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800518e:	f7fb fc49 	bl	8000a24 <__aeabi_dcmplt>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d01a      	beq.n	80051ce <_etoa+0x3de>
      if ((int)prec > expval) {
 8005198:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800519c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800519e:	429a      	cmp	r2, r3
 80051a0:	da07      	bge.n	80051b2 <_etoa+0x3c2>
        prec = (unsigned)((int)prec - expval - 1);
 80051a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80051a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	3b01      	subs	r3, #1
 80051ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80051b0:	e002      	b.n	80051b8 <_etoa+0x3c8>
      }
      else {
        prec = 0;
 80051b2:	2300      	movs	r3, #0
 80051b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 80051b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      // no characters in exponent
      minwidth = 0U;
 80051c4:	2300      	movs	r3, #0
 80051c6:	653b      	str	r3, [r7, #80]	; 0x50
      expval   = 0;
 80051c8:	2300      	movs	r3, #0
 80051ca:	657b      	str	r3, [r7, #84]	; 0x54
 80051cc:	e00e      	b.n	80051ec <_etoa+0x3fc>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 80051ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00a      	beq.n	80051ec <_etoa+0x3fc>
 80051d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d004      	beq.n	80051ec <_etoa+0x3fc>
        --prec;
 80051e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80051e6:	3b01      	subs	r3, #1
 80051e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 80051ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (width > minwidth) {
 80051f2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80051f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d904      	bls.n	8005206 <_etoa+0x416>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 80051fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005204:	e001      	b.n	800520a <_etoa+0x41a>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8005206:	2300      	movs	r3, #0
 8005208:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 800520a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b00      	cmp	r3, #0
 8005214:	d004      	beq.n	8005220 <_etoa+0x430>
 8005216:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005218:	2b00      	cmp	r3, #0
 800521a:	d001      	beq.n	8005220 <_etoa+0x430>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 800521c:	2300      	movs	r3, #0
 800521e:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  // rescale the float value
  if (expval) {
 8005220:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00b      	beq.n	800523e <_etoa+0x44e>
    value /= conv.F;
 8005226:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800522a:	461a      	mov	r2, r3
 800522c:	4623      	mov	r3, r4
 800522e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005232:	f7fb faaf 	bl	8000794 <__aeabi_ddiv>
 8005236:	4603      	mov	r3, r0
 8005238:	460c      	mov	r4, r1
 800523a:	e9c7 3402 	strd	r3, r4, [r7, #8]
  }

  // output the floating part
  const size_t start_idx = idx;
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	62fb      	str	r3, [r7, #44]	; 0x2c
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8005242:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005246:	2b00      	cmp	r3, #0
 8005248:	d004      	beq.n	8005254 <_etoa+0x464>
 800524a:	68bd      	ldr	r5, [r7, #8]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f083 4600 	eor.w	r6, r3, #2147483648	; 0x80000000
 8005252:	e001      	b.n	8005258 <_etoa+0x468>
 8005254:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8005258:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800525c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005260:	9302      	str	r3, [sp, #8]
 8005262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005264:	9301      	str	r3, [sp, #4]
 8005266:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800526a:	9300      	str	r3, [sp, #0]
 800526c:	ec46 5b10 	vmov	d0, r5, r6
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	69b9      	ldr	r1, [r7, #24]
 8005276:	69f8      	ldr	r0, [r7, #28]
 8005278:	f7ff fb4e 	bl	8004918 <_ftoa>
 800527c:	6178      	str	r0, [r7, #20]

  // output the exponent part
  if (minwidth) {
 800527e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005280:	2b00      	cmp	r3, #0
 8005282:	d03f      	beq.n	8005304 <_etoa+0x514>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8005284:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005288:	f003 0320 	and.w	r3, r3, #32
 800528c:	2b00      	cmp	r3, #0
 800528e:	d001      	beq.n	8005294 <_etoa+0x4a4>
 8005290:	2045      	movs	r0, #69	; 0x45
 8005292:	e000      	b.n	8005296 <_etoa+0x4a6>
 8005294:	2065      	movs	r0, #101	; 0x65
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	1c53      	adds	r3, r2, #1
 800529a:	617b      	str	r3, [r7, #20]
 800529c:	69fc      	ldr	r4, [r7, #28]
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	69b9      	ldr	r1, [r7, #24]
 80052a2:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 80052a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	bfb8      	it	lt
 80052aa:	425b      	neglt	r3, r3
 80052ac:	4618      	mov	r0, r3
 80052ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052b0:	0fdb      	lsrs	r3, r3, #31
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80052b6:	3a01      	subs	r2, #1
 80052b8:	2105      	movs	r1, #5
 80052ba:	9105      	str	r1, [sp, #20]
 80052bc:	9204      	str	r2, [sp, #16]
 80052be:	2200      	movs	r2, #0
 80052c0:	9203      	str	r2, [sp, #12]
 80052c2:	220a      	movs	r2, #10
 80052c4:	9202      	str	r2, [sp, #8]
 80052c6:	9301      	str	r3, [sp, #4]
 80052c8:	9000      	str	r0, [sp, #0]
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	69b9      	ldr	r1, [r7, #24]
 80052d0:	69f8      	ldr	r0, [r7, #28]
 80052d2:	f7ff fa4a 	bl	800476a <_ntoa_long>
 80052d6:	6178      	str	r0, [r7, #20]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 80052d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80052dc:	f003 0302 	and.w	r3, r3, #2
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00f      	beq.n	8005304 <_etoa+0x514>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 80052e4:	e007      	b.n	80052f6 <_etoa+0x506>
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	1c53      	adds	r3, r2, #1
 80052ea:	617b      	str	r3, [r7, #20]
 80052ec:	69fc      	ldr	r4, [r7, #28]
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	69b9      	ldr	r1, [r7, #24]
 80052f2:	2020      	movs	r0, #32
 80052f4:	47a0      	blx	r4
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005300:	429a      	cmp	r2, r3
 8005302:	d8f0      	bhi.n	80052e6 <_etoa+0x4f6>
    }
  }
  return idx;
 8005304:	697b      	ldr	r3, [r7, #20]
}
 8005306:	4618      	mov	r0, r3
 8005308:	375c      	adds	r7, #92	; 0x5c
 800530a:	46bd      	mov	sp, r7
 800530c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005310:	eb1c432d 	.word	0xeb1c432d
 8005314:	3f1a36e2 	.word	0x3f1a36e2
 8005318:	00000000 	.word	0x00000000
 800531c:	412e8480 	.word	0x412e8480

08005320 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8005320:	b5b0      	push	{r4, r5, r7, lr}
 8005322:	b0a0      	sub	sp, #128	; 0x80
 8005324:	af0a      	add	r7, sp, #40	; 0x28
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
 800532c:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 800532e:	2300      	movs	r3, #0
 8005330:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	2b00      	cmp	r3, #0
 8005336:	f040 8492 	bne.w	8005c5e <_vsnprintf+0x93e>
    // use null output function
    out = _out_null;
 800533a:	4ba0      	ldr	r3, [pc, #640]	; (80055bc <_vsnprintf+0x29c>)
 800533c:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 800533e:	f000 bc8e 	b.w	8005c5e <_vsnprintf+0x93e>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	2b25      	cmp	r3, #37	; 0x25
 8005348:	d00d      	beq.n	8005366 <_vsnprintf+0x46>
      // no
      out(*format, buffer, idx++, maxlen);
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	7818      	ldrb	r0, [r3, #0]
 800534e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005350:	1c53      	adds	r3, r2, #1
 8005352:	647b      	str	r3, [r7, #68]	; 0x44
 8005354:	68fc      	ldr	r4, [r7, #12]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68b9      	ldr	r1, [r7, #8]
 800535a:	47a0      	blx	r4
      format++;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	3301      	adds	r3, #1
 8005360:	603b      	str	r3, [r7, #0]
      continue;
 8005362:	f000 bc7c 	b.w	8005c5e <_vsnprintf+0x93e>
    }
    else {
      // yes, evaluate it
      format++;
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	3301      	adds	r3, #1
 800536a:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 800536c:	2300      	movs	r3, #0
 800536e:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	3b20      	subs	r3, #32
 8005376:	2b10      	cmp	r3, #16
 8005378:	d856      	bhi.n	8005428 <_vsnprintf+0x108>
 800537a:	a201      	add	r2, pc, #4	; (adr r2, 8005380 <_vsnprintf+0x60>)
 800537c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005380:	08005401 	.word	0x08005401
 8005384:	08005429 	.word	0x08005429
 8005388:	08005429 	.word	0x08005429
 800538c:	08005415 	.word	0x08005415
 8005390:	08005429 	.word	0x08005429
 8005394:	08005429 	.word	0x08005429
 8005398:	08005429 	.word	0x08005429
 800539c:	08005429 	.word	0x08005429
 80053a0:	08005429 	.word	0x08005429
 80053a4:	08005429 	.word	0x08005429
 80053a8:	08005429 	.word	0x08005429
 80053ac:	080053ed 	.word	0x080053ed
 80053b0:	08005429 	.word	0x08005429
 80053b4:	080053d9 	.word	0x080053d9
 80053b8:	08005429 	.word	0x08005429
 80053bc:	08005429 	.word	0x08005429
 80053c0:	080053c5 	.word	0x080053c5
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 80053c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053c6:	f043 0301 	orr.w	r3, r3, #1
 80053ca:	657b      	str	r3, [r7, #84]	; 0x54
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	3301      	adds	r3, #1
 80053d0:	603b      	str	r3, [r7, #0]
 80053d2:	2301      	movs	r3, #1
 80053d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80053d6:	e02a      	b.n	800542e <_vsnprintf+0x10e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 80053d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053da:	f043 0302 	orr.w	r3, r3, #2
 80053de:	657b      	str	r3, [r7, #84]	; 0x54
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	3301      	adds	r3, #1
 80053e4:	603b      	str	r3, [r7, #0]
 80053e6:	2301      	movs	r3, #1
 80053e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80053ea:	e020      	b.n	800542e <_vsnprintf+0x10e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 80053ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053ee:	f043 0304 	orr.w	r3, r3, #4
 80053f2:	657b      	str	r3, [r7, #84]	; 0x54
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	3301      	adds	r3, #1
 80053f8:	603b      	str	r3, [r7, #0]
 80053fa:	2301      	movs	r3, #1
 80053fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80053fe:	e016      	b.n	800542e <_vsnprintf+0x10e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8005400:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005402:	f043 0308 	orr.w	r3, r3, #8
 8005406:	657b      	str	r3, [r7, #84]	; 0x54
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	3301      	adds	r3, #1
 800540c:	603b      	str	r3, [r7, #0]
 800540e:	2301      	movs	r3, #1
 8005410:	64bb      	str	r3, [r7, #72]	; 0x48
 8005412:	e00c      	b.n	800542e <_vsnprintf+0x10e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8005414:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005416:	f043 0310 	orr.w	r3, r3, #16
 800541a:	657b      	str	r3, [r7, #84]	; 0x54
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	3301      	adds	r3, #1
 8005420:	603b      	str	r3, [r7, #0]
 8005422:	2301      	movs	r3, #1
 8005424:	64bb      	str	r3, [r7, #72]	; 0x48
 8005426:	e002      	b.n	800542e <_vsnprintf+0x10e>
        default :                                   n = 0U; break;
 8005428:	2300      	movs	r3, #0
 800542a:	64bb      	str	r3, [r7, #72]	; 0x48
 800542c:	bf00      	nop
      }
    } while (n);
 800542e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005430:	2b00      	cmp	r3, #0
 8005432:	d19d      	bne.n	8005370 <_vsnprintf+0x50>

    // evaluate width field
    width = 0U;
 8005434:	2300      	movs	r3, #0
 8005436:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	4618      	mov	r0, r3
 800543e:	f7ff f82d 	bl	800449c <_is_digit>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d005      	beq.n	8005454 <_vsnprintf+0x134>
      width = _atoi(&format);
 8005448:	463b      	mov	r3, r7
 800544a:	4618      	mov	r0, r3
 800544c:	f7ff f83d 	bl	80044ca <_atoi>
 8005450:	6538      	str	r0, [r7, #80]	; 0x50
 8005452:	e018      	b.n	8005486 <_vsnprintf+0x166>
    }
    else if (*format == '*') {
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	2b2a      	cmp	r3, #42	; 0x2a
 800545a:	d114      	bne.n	8005486 <_vsnprintf+0x166>
      const int w = va_arg(va, int);
 800545c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800545e:	1d1a      	adds	r2, r3, #4
 8005460:	66ba      	str	r2, [r7, #104]	; 0x68
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 8005466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005468:	2b00      	cmp	r3, #0
 800546a:	da07      	bge.n	800547c <_vsnprintf+0x15c>
        flags |= FLAGS_LEFT;    // reverse padding
 800546c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800546e:	f043 0302 	orr.w	r3, r3, #2
 8005472:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 8005474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005476:	425b      	negs	r3, r3
 8005478:	653b      	str	r3, [r7, #80]	; 0x50
 800547a:	e001      	b.n	8005480 <_vsnprintf+0x160>
      }
      else {
        width = (unsigned int)w;
 800547c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547e:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	3301      	adds	r3, #1
 8005484:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 8005486:	2300      	movs	r3, #0
 8005488:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	2b2e      	cmp	r3, #46	; 0x2e
 8005490:	d124      	bne.n	80054dc <_vsnprintf+0x1bc>
      flags |= FLAGS_PRECISION;
 8005492:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005494:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005498:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	3301      	adds	r3, #1
 800549e:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7fe fff9 	bl	800449c <_is_digit>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d005      	beq.n	80054bc <_vsnprintf+0x19c>
        precision = _atoi(&format);
 80054b0:	463b      	mov	r3, r7
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7ff f809 	bl	80044ca <_atoi>
 80054b8:	64f8      	str	r0, [r7, #76]	; 0x4c
 80054ba:	e00f      	b.n	80054dc <_vsnprintf+0x1bc>
      }
      else if (*format == '*') {
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	2b2a      	cmp	r3, #42	; 0x2a
 80054c2:	d10b      	bne.n	80054dc <_vsnprintf+0x1bc>
        const int prec = (int)va_arg(va, int);
 80054c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054c6:	1d1a      	adds	r2, r3, #4
 80054c8:	66ba      	str	r2, [r7, #104]	; 0x68
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 80054ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80054d4:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	3301      	adds	r3, #1
 80054da:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	3b68      	subs	r3, #104	; 0x68
 80054e2:	2b12      	cmp	r3, #18
 80054e4:	d866      	bhi.n	80055b4 <_vsnprintf+0x294>
 80054e6:	a201      	add	r2, pc, #4	; (adr r2, 80054ec <_vsnprintf+0x1cc>)
 80054e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ec:	0800555f 	.word	0x0800555f
 80054f0:	080055b5 	.word	0x080055b5
 80054f4:	08005595 	.word	0x08005595
 80054f8:	080055b5 	.word	0x080055b5
 80054fc:	08005539 	.word	0x08005539
 8005500:	080055b5 	.word	0x080055b5
 8005504:	080055b5 	.word	0x080055b5
 8005508:	080055b5 	.word	0x080055b5
 800550c:	080055b5 	.word	0x080055b5
 8005510:	080055b5 	.word	0x080055b5
 8005514:	080055b5 	.word	0x080055b5
 8005518:	080055b5 	.word	0x080055b5
 800551c:	08005585 	.word	0x08005585
 8005520:	080055b5 	.word	0x080055b5
 8005524:	080055b5 	.word	0x080055b5
 8005528:	080055b5 	.word	0x080055b5
 800552c:	080055b5 	.word	0x080055b5
 8005530:	080055b5 	.word	0x080055b5
 8005534:	080055a5 	.word	0x080055a5
      case 'l' :
        flags |= FLAGS_LONG;
 8005538:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800553a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800553e:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	3301      	adds	r3, #1
 8005544:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	2b6c      	cmp	r3, #108	; 0x6c
 800554c:	d134      	bne.n	80055b8 <_vsnprintf+0x298>
          flags |= FLAGS_LONG_LONG;
 800554e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005550:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005554:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	3301      	adds	r3, #1
 800555a:	603b      	str	r3, [r7, #0]
        }
        break;
 800555c:	e02c      	b.n	80055b8 <_vsnprintf+0x298>
      case 'h' :
        flags |= FLAGS_SHORT;
 800555e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005564:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	3301      	adds	r3, #1
 800556a:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	2b68      	cmp	r3, #104	; 0x68
 8005572:	d125      	bne.n	80055c0 <_vsnprintf+0x2a0>
          flags |= FLAGS_CHAR;
 8005574:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800557a:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	3301      	adds	r3, #1
 8005580:	603b      	str	r3, [r7, #0]
        }
        break;
 8005582:	e01d      	b.n	80055c0 <_vsnprintf+0x2a0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8005584:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005586:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800558a:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	3301      	adds	r3, #1
 8005590:	603b      	str	r3, [r7, #0]
        break;
 8005592:	e016      	b.n	80055c2 <_vsnprintf+0x2a2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8005594:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005596:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800559a:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	3301      	adds	r3, #1
 80055a0:	603b      	str	r3, [r7, #0]
        break;
 80055a2:	e00e      	b.n	80055c2 <_vsnprintf+0x2a2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80055a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055aa:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	3301      	adds	r3, #1
 80055b0:	603b      	str	r3, [r7, #0]
        break;
 80055b2:	e006      	b.n	80055c2 <_vsnprintf+0x2a2>
      default :
        break;
 80055b4:	bf00      	nop
 80055b6:	e004      	b.n	80055c2 <_vsnprintf+0x2a2>
        break;
 80055b8:	bf00      	nop
 80055ba:	e002      	b.n	80055c2 <_vsnprintf+0x2a2>
 80055bc:	08004421 	.word	0x08004421
        break;
 80055c0:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	3b25      	subs	r3, #37	; 0x25
 80055c8:	2b53      	cmp	r3, #83	; 0x53
 80055ca:	f200 833b 	bhi.w	8005c44 <_vsnprintf+0x924>
 80055ce:	a201      	add	r2, pc, #4	; (adr r2, 80055d4 <_vsnprintf+0x2b4>)
 80055d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d4:	08005c2d 	.word	0x08005c2d
 80055d8:	08005c45 	.word	0x08005c45
 80055dc:	08005c45 	.word	0x08005c45
 80055e0:	08005c45 	.word	0x08005c45
 80055e4:	08005c45 	.word	0x08005c45
 80055e8:	08005c45 	.word	0x08005c45
 80055ec:	08005c45 	.word	0x08005c45
 80055f0:	08005c45 	.word	0x08005c45
 80055f4:	08005c45 	.word	0x08005c45
 80055f8:	08005c45 	.word	0x08005c45
 80055fc:	08005c45 	.word	0x08005c45
 8005600:	08005c45 	.word	0x08005c45
 8005604:	08005c45 	.word	0x08005c45
 8005608:	08005c45 	.word	0x08005c45
 800560c:	08005c45 	.word	0x08005c45
 8005610:	08005c45 	.word	0x08005c45
 8005614:	08005c45 	.word	0x08005c45
 8005618:	08005c45 	.word	0x08005c45
 800561c:	08005c45 	.word	0x08005c45
 8005620:	08005c45 	.word	0x08005c45
 8005624:	08005c45 	.word	0x08005c45
 8005628:	08005c45 	.word	0x08005c45
 800562c:	08005c45 	.word	0x08005c45
 8005630:	08005c45 	.word	0x08005c45
 8005634:	08005c45 	.word	0x08005c45
 8005638:	08005c45 	.word	0x08005c45
 800563c:	08005c45 	.word	0x08005c45
 8005640:	08005c45 	.word	0x08005c45
 8005644:	08005c45 	.word	0x08005c45
 8005648:	08005c45 	.word	0x08005c45
 800564c:	08005c45 	.word	0x08005c45
 8005650:	08005c45 	.word	0x08005c45
 8005654:	080059fd 	.word	0x080059fd
 8005658:	080059b1 	.word	0x080059b1
 800565c:	080059fd 	.word	0x080059fd
 8005660:	08005c45 	.word	0x08005c45
 8005664:	08005c45 	.word	0x08005c45
 8005668:	08005c45 	.word	0x08005c45
 800566c:	08005c45 	.word	0x08005c45
 8005670:	08005c45 	.word	0x08005c45
 8005674:	08005c45 	.word	0x08005c45
 8005678:	08005c45 	.word	0x08005c45
 800567c:	08005c45 	.word	0x08005c45
 8005680:	08005c45 	.word	0x08005c45
 8005684:	08005c45 	.word	0x08005c45
 8005688:	08005c45 	.word	0x08005c45
 800568c:	08005c45 	.word	0x08005c45
 8005690:	08005c45 	.word	0x08005c45
 8005694:	08005c45 	.word	0x08005c45
 8005698:	08005c45 	.word	0x08005c45
 800569c:	08005c45 	.word	0x08005c45
 80056a0:	08005725 	.word	0x08005725
 80056a4:	08005c45 	.word	0x08005c45
 80056a8:	08005c45 	.word	0x08005c45
 80056ac:	08005c45 	.word	0x08005c45
 80056b0:	08005c45 	.word	0x08005c45
 80056b4:	08005c45 	.word	0x08005c45
 80056b8:	08005c45 	.word	0x08005c45
 80056bc:	08005c45 	.word	0x08005c45
 80056c0:	08005c45 	.word	0x08005c45
 80056c4:	08005c45 	.word	0x08005c45
 80056c8:	08005725 	.word	0x08005725
 80056cc:	08005a69 	.word	0x08005a69
 80056d0:	08005725 	.word	0x08005725
 80056d4:	080059fd 	.word	0x080059fd
 80056d8:	080059b1 	.word	0x080059b1
 80056dc:	080059fd 	.word	0x080059fd
 80056e0:	08005c45 	.word	0x08005c45
 80056e4:	08005725 	.word	0x08005725
 80056e8:	08005c45 	.word	0x08005c45
 80056ec:	08005c45 	.word	0x08005c45
 80056f0:	08005c45 	.word	0x08005c45
 80056f4:	08005c45 	.word	0x08005c45
 80056f8:	08005c45 	.word	0x08005c45
 80056fc:	08005725 	.word	0x08005725
 8005700:	08005ba1 	.word	0x08005ba1
 8005704:	08005c45 	.word	0x08005c45
 8005708:	08005c45 	.word	0x08005c45
 800570c:	08005add 	.word	0x08005add
 8005710:	08005c45 	.word	0x08005c45
 8005714:	08005725 	.word	0x08005725
 8005718:	08005c45 	.word	0x08005c45
 800571c:	08005c45 	.word	0x08005c45
 8005720:	08005725 	.word	0x08005725
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	2b78      	cmp	r3, #120	; 0x78
 800572a:	d003      	beq.n	8005734 <_vsnprintf+0x414>
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	2b58      	cmp	r3, #88	; 0x58
 8005732:	d102      	bne.n	800573a <_vsnprintf+0x41a>
          base = 16U;
 8005734:	2310      	movs	r3, #16
 8005736:	643b      	str	r3, [r7, #64]	; 0x40
 8005738:	e013      	b.n	8005762 <_vsnprintf+0x442>
        }
        else if (*format == 'o') {
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	2b6f      	cmp	r3, #111	; 0x6f
 8005740:	d102      	bne.n	8005748 <_vsnprintf+0x428>
          base =  8U;
 8005742:	2308      	movs	r3, #8
 8005744:	643b      	str	r3, [r7, #64]	; 0x40
 8005746:	e00c      	b.n	8005762 <_vsnprintf+0x442>
        }
        else if (*format == 'b') {
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	2b62      	cmp	r3, #98	; 0x62
 800574e:	d102      	bne.n	8005756 <_vsnprintf+0x436>
          base =  2U;
 8005750:	2302      	movs	r3, #2
 8005752:	643b      	str	r3, [r7, #64]	; 0x40
 8005754:	e005      	b.n	8005762 <_vsnprintf+0x442>
        }
        else {
          base = 10U;
 8005756:	230a      	movs	r3, #10
 8005758:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800575a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800575c:	f023 0310 	bic.w	r3, r3, #16
 8005760:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	2b58      	cmp	r3, #88	; 0x58
 8005768:	d103      	bne.n	8005772 <_vsnprintf+0x452>
          flags |= FLAGS_UPPERCASE;
 800576a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800576c:	f043 0320 	orr.w	r3, r3, #32
 8005770:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	2b69      	cmp	r3, #105	; 0x69
 8005778:	d007      	beq.n	800578a <_vsnprintf+0x46a>
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	2b64      	cmp	r3, #100	; 0x64
 8005780:	d003      	beq.n	800578a <_vsnprintf+0x46a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8005782:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005784:	f023 030c 	bic.w	r3, r3, #12
 8005788:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 800578a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800578c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005790:	2b00      	cmp	r3, #0
 8005792:	d003      	beq.n	800579c <_vsnprintf+0x47c>
          flags &= ~FLAGS_ZEROPAD;
 8005794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005796:	f023 0301 	bic.w	r3, r3, #1
 800579a:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	2b69      	cmp	r3, #105	; 0x69
 80057a2:	d004      	beq.n	80057ae <_vsnprintf+0x48e>
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	2b64      	cmp	r3, #100	; 0x64
 80057aa:	f040 808d 	bne.w	80058c8 <_vsnprintf+0x5a8>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 80057ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d02e      	beq.n	8005816 <_vsnprintf+0x4f6>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 80057b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80057ba:	3307      	adds	r3, #7
 80057bc:	f023 0307 	bic.w	r3, r3, #7
 80057c0:	f103 0208 	add.w	r2, r3, #8
 80057c4:	66ba      	str	r2, [r7, #104]	; 0x68
 80057c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80057ca:	e9c7 3404 	strd	r3, r4, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80057ce:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	f174 0200 	sbcs.w	r2, r4, #0
 80057d8:	da02      	bge.n	80057e0 <_vsnprintf+0x4c0>
 80057da:	425b      	negs	r3, r3
 80057dc:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 80057e0:	4619      	mov	r1, r3
 80057e2:	4622      	mov	r2, r4
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	0fdb      	lsrs	r3, r3, #31
 80057e8:	b2d8      	uxtb	r0, r3
 80057ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057ec:	f04f 0400 	mov.w	r4, #0
 80057f0:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 80057f2:	9508      	str	r5, [sp, #32]
 80057f4:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 80057f6:	9507      	str	r5, [sp, #28]
 80057f8:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 80057fa:	9506      	str	r5, [sp, #24]
 80057fc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005800:	9002      	str	r0, [sp, #8]
 8005802:	e9cd 1200 	strd	r1, r2, [sp]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800580a:	68b9      	ldr	r1, [r7, #8]
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	f7ff f813 	bl	8004838 <_ntoa_long_long>
 8005812:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8005814:	e0c8      	b.n	80059a8 <_vsnprintf+0x688>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8005816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800581c:	2b00      	cmp	r3, #0
 800581e:	d01e      	beq.n	800585e <_vsnprintf+0x53e>
            const long value = va_arg(va, long);
 8005820:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005822:	1d1a      	adds	r2, r3, #4
 8005824:	66ba      	str	r2, [r7, #104]	; 0x68
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	2b00      	cmp	r3, #0
 800582e:	bfb8      	it	lt
 8005830:	425b      	neglt	r3, r3
 8005832:	4619      	mov	r1, r3
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	0fdb      	lsrs	r3, r3, #31
 8005838:	b2db      	uxtb	r3, r3
 800583a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800583c:	9205      	str	r2, [sp, #20]
 800583e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005840:	9204      	str	r2, [sp, #16]
 8005842:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005844:	9203      	str	r2, [sp, #12]
 8005846:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005848:	9202      	str	r2, [sp, #8]
 800584a:	9301      	str	r3, [sp, #4]
 800584c:	9100      	str	r1, [sp, #0]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005852:	68b9      	ldr	r1, [r7, #8]
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f7fe ff88 	bl	800476a <_ntoa_long>
 800585a:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 800585c:	e0a4      	b.n	80059a8 <_vsnprintf+0x688>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800585e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005864:	2b00      	cmp	r3, #0
 8005866:	d005      	beq.n	8005874 <_vsnprintf+0x554>
 8005868:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800586a:	1d1a      	adds	r2, r3, #4
 800586c:	66ba      	str	r2, [r7, #104]	; 0x68
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	b2db      	uxtb	r3, r3
 8005872:	e00e      	b.n	8005892 <_vsnprintf+0x572>
 8005874:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800587a:	2b00      	cmp	r3, #0
 800587c:	d005      	beq.n	800588a <_vsnprintf+0x56a>
 800587e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005880:	1d1a      	adds	r2, r3, #4
 8005882:	66ba      	str	r2, [r7, #104]	; 0x68
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	b21b      	sxth	r3, r3
 8005888:	e003      	b.n	8005892 <_vsnprintf+0x572>
 800588a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800588c:	1d1a      	adds	r2, r3, #4
 800588e:	66ba      	str	r2, [r7, #104]	; 0x68
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8005894:	6a3b      	ldr	r3, [r7, #32]
 8005896:	2b00      	cmp	r3, #0
 8005898:	bfb8      	it	lt
 800589a:	425b      	neglt	r3, r3
 800589c:	4619      	mov	r1, r3
 800589e:	6a3b      	ldr	r3, [r7, #32]
 80058a0:	0fdb      	lsrs	r3, r3, #31
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80058a6:	9205      	str	r2, [sp, #20]
 80058a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80058aa:	9204      	str	r2, [sp, #16]
 80058ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80058ae:	9203      	str	r2, [sp, #12]
 80058b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058b2:	9202      	str	r2, [sp, #8]
 80058b4:	9301      	str	r3, [sp, #4]
 80058b6:	9100      	str	r1, [sp, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058bc:	68b9      	ldr	r1, [r7, #8]
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	f7fe ff53 	bl	800476a <_ntoa_long>
 80058c4:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 80058c6:	e06f      	b.n	80059a8 <_vsnprintf+0x688>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 80058c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d020      	beq.n	8005914 <_vsnprintf+0x5f4>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 80058d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058d4:	3307      	adds	r3, #7
 80058d6:	f023 0307 	bic.w	r3, r3, #7
 80058da:	f103 0208 	add.w	r2, r3, #8
 80058de:	66ba      	str	r2, [r7, #104]	; 0x68
 80058e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80058e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058e6:	4611      	mov	r1, r2
 80058e8:	f04f 0200 	mov.w	r2, #0
 80058ec:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80058ee:	9008      	str	r0, [sp, #32]
 80058f0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80058f2:	9007      	str	r0, [sp, #28]
 80058f4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80058f6:	9006      	str	r0, [sp, #24]
 80058f8:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80058fc:	2200      	movs	r2, #0
 80058fe:	9202      	str	r2, [sp, #8]
 8005900:	e9cd 3400 	strd	r3, r4, [sp]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005908:	68b9      	ldr	r1, [r7, #8]
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f7fe ff94 	bl	8004838 <_ntoa_long_long>
 8005910:	6478      	str	r0, [r7, #68]	; 0x44
 8005912:	e049      	b.n	80059a8 <_vsnprintf+0x688>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8005914:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800591a:	2b00      	cmp	r3, #0
 800591c:	d016      	beq.n	800594c <_vsnprintf+0x62c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 800591e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005920:	1d1a      	adds	r2, r3, #4
 8005922:	66ba      	str	r2, [r7, #104]	; 0x68
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005928:	9205      	str	r2, [sp, #20]
 800592a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800592c:	9204      	str	r2, [sp, #16]
 800592e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005930:	9203      	str	r2, [sp, #12]
 8005932:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005934:	9202      	str	r2, [sp, #8]
 8005936:	2200      	movs	r2, #0
 8005938:	9201      	str	r2, [sp, #4]
 800593a:	9300      	str	r3, [sp, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005940:	68b9      	ldr	r1, [r7, #8]
 8005942:	68f8      	ldr	r0, [r7, #12]
 8005944:	f7fe ff11 	bl	800476a <_ntoa_long>
 8005948:	6478      	str	r0, [r7, #68]	; 0x44
 800594a:	e02d      	b.n	80059a8 <_vsnprintf+0x688>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800594c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800594e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005952:	2b00      	cmp	r3, #0
 8005954:	d005      	beq.n	8005962 <_vsnprintf+0x642>
 8005956:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005958:	1d1a      	adds	r2, r3, #4
 800595a:	66ba      	str	r2, [r7, #104]	; 0x68
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	b2db      	uxtb	r3, r3
 8005960:	e00e      	b.n	8005980 <_vsnprintf+0x660>
 8005962:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005968:	2b00      	cmp	r3, #0
 800596a:	d005      	beq.n	8005978 <_vsnprintf+0x658>
 800596c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800596e:	1d1a      	adds	r2, r3, #4
 8005970:	66ba      	str	r2, [r7, #104]	; 0x68
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	b29b      	uxth	r3, r3
 8005976:	e003      	b.n	8005980 <_vsnprintf+0x660>
 8005978:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800597a:	1d1a      	adds	r2, r3, #4
 800597c:	66ba      	str	r2, [r7, #104]	; 0x68
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8005982:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005984:	9305      	str	r3, [sp, #20]
 8005986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005988:	9304      	str	r3, [sp, #16]
 800598a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800598c:	9303      	str	r3, [sp, #12]
 800598e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005990:	9302      	str	r3, [sp, #8]
 8005992:	2300      	movs	r3, #0
 8005994:	9301      	str	r3, [sp, #4]
 8005996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005998:	9300      	str	r3, [sp, #0]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800599e:	68b9      	ldr	r1, [r7, #8]
 80059a0:	68f8      	ldr	r0, [r7, #12]
 80059a2:	f7fe fee2 	bl	800476a <_ntoa_long>
 80059a6:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	3301      	adds	r3, #1
 80059ac:	603b      	str	r3, [r7, #0]
        break;
 80059ae:	e156      	b.n	8005c5e <_vsnprintf+0x93e>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	2b46      	cmp	r3, #70	; 0x46
 80059b6:	d103      	bne.n	80059c0 <_vsnprintf+0x6a0>
 80059b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059ba:	f043 0320 	orr.w	r3, r3, #32
 80059be:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80059c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059c2:	3307      	adds	r3, #7
 80059c4:	f023 0307 	bic.w	r3, r3, #7
 80059c8:	f103 0208 	add.w	r2, r3, #8
 80059cc:	66ba      	str	r2, [r7, #104]	; 0x68
 80059ce:	ed93 7b00 	vldr	d7, [r3]
 80059d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059d4:	9302      	str	r3, [sp, #8]
 80059d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059d8:	9301      	str	r3, [sp, #4]
 80059da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059dc:	9300      	str	r3, [sp, #0]
 80059de:	eeb0 0a47 	vmov.f32	s0, s14
 80059e2:	eef0 0a67 	vmov.f32	s1, s15
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059ea:	68b9      	ldr	r1, [r7, #8]
 80059ec:	68f8      	ldr	r0, [r7, #12]
 80059ee:	f7fe ff93 	bl	8004918 <_ftoa>
 80059f2:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	3301      	adds	r3, #1
 80059f8:	603b      	str	r3, [r7, #0]
        break;
 80059fa:	e130      	b.n	8005c5e <_vsnprintf+0x93e>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	2b67      	cmp	r3, #103	; 0x67
 8005a02:	d003      	beq.n	8005a0c <_vsnprintf+0x6ec>
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	2b47      	cmp	r3, #71	; 0x47
 8005a0a:	d103      	bne.n	8005a14 <_vsnprintf+0x6f4>
 8005a0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a0e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005a12:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	2b45      	cmp	r3, #69	; 0x45
 8005a1a:	d003      	beq.n	8005a24 <_vsnprintf+0x704>
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	2b47      	cmp	r3, #71	; 0x47
 8005a22:	d103      	bne.n	8005a2c <_vsnprintf+0x70c>
 8005a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a26:	f043 0320 	orr.w	r3, r3, #32
 8005a2a:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8005a2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a2e:	3307      	adds	r3, #7
 8005a30:	f023 0307 	bic.w	r3, r3, #7
 8005a34:	f103 0208 	add.w	r2, r3, #8
 8005a38:	66ba      	str	r2, [r7, #104]	; 0x68
 8005a3a:	ed93 7b00 	vldr	d7, [r3]
 8005a3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a40:	9302      	str	r3, [sp, #8]
 8005a42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a44:	9301      	str	r3, [sp, #4]
 8005a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	eeb0 0a47 	vmov.f32	s0, s14
 8005a4e:	eef0 0a67 	vmov.f32	s1, s15
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a56:	68b9      	ldr	r1, [r7, #8]
 8005a58:	68f8      	ldr	r0, [r7, #12]
 8005a5a:	f7ff f9c9 	bl	8004df0 <_etoa>
 8005a5e:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	3301      	adds	r3, #1
 8005a64:	603b      	str	r3, [r7, #0]
        break;
 8005a66:	e0fa      	b.n	8005c5e <_vsnprintf+0x93e>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8005a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a6e:	f003 0302 	and.w	r3, r3, #2
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10e      	bne.n	8005a94 <_vsnprintf+0x774>
          while (l++ < width) {
 8005a76:	e007      	b.n	8005a88 <_vsnprintf+0x768>
            out(' ', buffer, idx++, maxlen);
 8005a78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a7a:	1c53      	adds	r3, r2, #1
 8005a7c:	647b      	str	r3, [r7, #68]	; 0x44
 8005a7e:	68fc      	ldr	r4, [r7, #12]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	68b9      	ldr	r1, [r7, #8]
 8005a84:	2020      	movs	r0, #32
 8005a86:	47a0      	blx	r4
          while (l++ < width) {
 8005a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a8a:	1c5a      	adds	r2, r3, #1
 8005a8c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005a8e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d8f1      	bhi.n	8005a78 <_vsnprintf+0x758>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8005a94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a96:	1d1a      	adds	r2, r3, #4
 8005a98:	66ba      	str	r2, [r7, #104]	; 0x68
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	b2d8      	uxtb	r0, r3
 8005a9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005aa0:	1c53      	adds	r3, r2, #1
 8005aa2:	647b      	str	r3, [r7, #68]	; 0x44
 8005aa4:	68fc      	ldr	r4, [r7, #12]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68b9      	ldr	r1, [r7, #8]
 8005aaa:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8005aac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005aae:	f003 0302 	and.w	r3, r3, #2
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00e      	beq.n	8005ad4 <_vsnprintf+0x7b4>
          while (l++ < width) {
 8005ab6:	e007      	b.n	8005ac8 <_vsnprintf+0x7a8>
            out(' ', buffer, idx++, maxlen);
 8005ab8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005aba:	1c53      	adds	r3, r2, #1
 8005abc:	647b      	str	r3, [r7, #68]	; 0x44
 8005abe:	68fc      	ldr	r4, [r7, #12]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	68b9      	ldr	r1, [r7, #8]
 8005ac4:	2020      	movs	r0, #32
 8005ac6:	47a0      	blx	r4
          while (l++ < width) {
 8005ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aca:	1c5a      	adds	r2, r3, #1
 8005acc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005ace:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d8f1      	bhi.n	8005ab8 <_vsnprintf+0x798>
          }
        }
        format++;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	603b      	str	r3, [r7, #0]
        break;
 8005ada:	e0c0      	b.n	8005c5e <_vsnprintf+0x93e>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8005adc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ade:	1d1a      	adds	r2, r3, #4
 8005ae0:	66ba      	str	r2, [r7, #104]	; 0x68
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8005ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d001      	beq.n	8005af0 <_vsnprintf+0x7d0>
 8005aec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aee:	e001      	b.n	8005af4 <_vsnprintf+0x7d4>
 8005af0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005af4:	4619      	mov	r1, r3
 8005af6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005af8:	f7fe fcb3 	bl	8004462 <_strnlen_s>
 8005afc:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8005afe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d005      	beq.n	8005b14 <_vsnprintf+0x7f4>
          l = (l < precision ? l : precision);
 8005b08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	bf28      	it	cs
 8005b10:	4613      	movcs	r3, r2
 8005b12:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 8005b14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b16:	f003 0302 	and.w	r3, r3, #2
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d11a      	bne.n	8005b54 <_vsnprintf+0x834>
          while (l++ < width) {
 8005b1e:	e007      	b.n	8005b30 <_vsnprintf+0x810>
            out(' ', buffer, idx++, maxlen);
 8005b20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b22:	1c53      	adds	r3, r2, #1
 8005b24:	647b      	str	r3, [r7, #68]	; 0x44
 8005b26:	68fc      	ldr	r4, [r7, #12]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	68b9      	ldr	r1, [r7, #8]
 8005b2c:	2020      	movs	r0, #32
 8005b2e:	47a0      	blx	r4
          while (l++ < width) {
 8005b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b32:	1c5a      	adds	r2, r3, #1
 8005b34:	637a      	str	r2, [r7, #52]	; 0x34
 8005b36:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d8f1      	bhi.n	8005b20 <_vsnprintf+0x800>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8005b3c:	e00a      	b.n	8005b54 <_vsnprintf+0x834>
          out(*(p++), buffer, idx++, maxlen);
 8005b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b40:	1c5a      	adds	r2, r3, #1
 8005b42:	63ba      	str	r2, [r7, #56]	; 0x38
 8005b44:	7818      	ldrb	r0, [r3, #0]
 8005b46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b48:	1c53      	adds	r3, r2, #1
 8005b4a:	647b      	str	r3, [r7, #68]	; 0x44
 8005b4c:	68fc      	ldr	r4, [r7, #12]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	68b9      	ldr	r1, [r7, #8]
 8005b52:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8005b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d009      	beq.n	8005b70 <_vsnprintf+0x850>
 8005b5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d0eb      	beq.n	8005b3e <_vsnprintf+0x81e>
 8005b66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b68:	1e5a      	subs	r2, r3, #1
 8005b6a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1e6      	bne.n	8005b3e <_vsnprintf+0x81e>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8005b70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b72:	f003 0302 	and.w	r3, r3, #2
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00e      	beq.n	8005b98 <_vsnprintf+0x878>
          while (l++ < width) {
 8005b7a:	e007      	b.n	8005b8c <_vsnprintf+0x86c>
            out(' ', buffer, idx++, maxlen);
 8005b7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b7e:	1c53      	adds	r3, r2, #1
 8005b80:	647b      	str	r3, [r7, #68]	; 0x44
 8005b82:	68fc      	ldr	r4, [r7, #12]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	68b9      	ldr	r1, [r7, #8]
 8005b88:	2020      	movs	r0, #32
 8005b8a:	47a0      	blx	r4
          while (l++ < width) {
 8005b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b8e:	1c5a      	adds	r2, r3, #1
 8005b90:	637a      	str	r2, [r7, #52]	; 0x34
 8005b92:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d8f1      	bhi.n	8005b7c <_vsnprintf+0x85c>
          }
        }
        format++;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	603b      	str	r3, [r7, #0]
        break;
 8005b9e:	e05e      	b.n	8005c5e <_vsnprintf+0x93e>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8005ba0:	2308      	movs	r3, #8
 8005ba2:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8005ba4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ba6:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8005baa:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8005bac:	2300      	movs	r3, #0
 8005bae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
 8005bb2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d01d      	beq.n	8005bf6 <_vsnprintf+0x8d6>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8005bba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005bbc:	1d1a      	adds	r2, r3, #4
 8005bbe:	66ba      	str	r2, [r7, #104]	; 0x68
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f04f 0400 	mov.w	r4, #0
 8005bc6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005bc8:	9208      	str	r2, [sp, #32]
 8005bca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005bcc:	9207      	str	r2, [sp, #28]
 8005bce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005bd0:	9206      	str	r2, [sp, #24]
 8005bd2:	f04f 0110 	mov.w	r1, #16
 8005bd6:	f04f 0200 	mov.w	r2, #0
 8005bda:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8005bde:	2200      	movs	r2, #0
 8005be0:	9202      	str	r2, [sp, #8]
 8005be2:	e9cd 3400 	strd	r3, r4, [sp]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bea:	68b9      	ldr	r1, [r7, #8]
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f7fe fe23 	bl	8004838 <_ntoa_long_long>
 8005bf2:	6478      	str	r0, [r7, #68]	; 0x44
 8005bf4:	e016      	b.n	8005c24 <_vsnprintf+0x904>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8005bf6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005bf8:	1d1a      	adds	r2, r3, #4
 8005bfa:	66ba      	str	r2, [r7, #104]	; 0x68
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	461a      	mov	r2, r3
 8005c00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c02:	9305      	str	r3, [sp, #20]
 8005c04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c06:	9304      	str	r3, [sp, #16]
 8005c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c0a:	9303      	str	r3, [sp, #12]
 8005c0c:	2310      	movs	r3, #16
 8005c0e:	9302      	str	r3, [sp, #8]
 8005c10:	2300      	movs	r3, #0
 8005c12:	9301      	str	r3, [sp, #4]
 8005c14:	9200      	str	r2, [sp, #0]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c1a:	68b9      	ldr	r1, [r7, #8]
 8005c1c:	68f8      	ldr	r0, [r7, #12]
 8005c1e:	f7fe fda4 	bl	800476a <_ntoa_long>
 8005c22:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	3301      	adds	r3, #1
 8005c28:	603b      	str	r3, [r7, #0]
        break;
 8005c2a:	e018      	b.n	8005c5e <_vsnprintf+0x93e>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8005c2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c2e:	1c53      	adds	r3, r2, #1
 8005c30:	647b      	str	r3, [r7, #68]	; 0x44
 8005c32:	68fc      	ldr	r4, [r7, #12]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	68b9      	ldr	r1, [r7, #8]
 8005c38:	2025      	movs	r0, #37	; 0x25
 8005c3a:	47a0      	blx	r4
        format++;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	603b      	str	r3, [r7, #0]
        break;
 8005c42:	e00c      	b.n	8005c5e <_vsnprintf+0x93e>

      default :
        out(*format, buffer, idx++, maxlen);
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	7818      	ldrb	r0, [r3, #0]
 8005c48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c4a:	1c53      	adds	r3, r2, #1
 8005c4c:	647b      	str	r3, [r7, #68]	; 0x44
 8005c4e:	68fc      	ldr	r4, [r7, #12]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	68b9      	ldr	r1, [r7, #8]
 8005c54:	47a0      	blx	r4
        format++;
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	603b      	str	r3, [r7, #0]
        break;
 8005c5c:	bf00      	nop
  while (*format)
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	f47f ab6d 	bne.w	8005342 <_vsnprintf+0x22>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8005c68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d302      	bcc.n	8005c76 <_vsnprintf+0x956>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	1e5a      	subs	r2, r3, #1
 8005c74:	e000      	b.n	8005c78 <_vsnprintf+0x958>
 8005c76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c78:	68fc      	ldr	r4, [r7, #12]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	68b9      	ldr	r1, [r7, #8]
 8005c7e:	2000      	movs	r0, #0
 8005c80:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8005c82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3758      	adds	r7, #88	; 0x58
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bdb0      	pop	{r4, r5, r7, pc}

08005c8c <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8005c8c:	b40f      	push	{r0, r1, r2, r3}
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b086      	sub	sp, #24
 8005c92:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8005c94:	f107 031c 	add.w	r3, r7, #28
 8005c98:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8005c9a:	1d39      	adds	r1, r7, #4
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	9300      	str	r3, [sp, #0]
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ca6:	4806      	ldr	r0, [pc, #24]	; (8005cc0 <printf_+0x34>)
 8005ca8:	f7ff fb3a 	bl	8005320 <_vsnprintf>
 8005cac:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8005cae:	68fb      	ldr	r3, [r7, #12]
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3710      	adds	r7, #16
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005cba:	b004      	add	sp, #16
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	0800443d 	.word	0x0800443d

08005cc4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8005ccc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005cd0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8005cd4:	f003 0301 	and.w	r3, r3, #1
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d013      	beq.n	8005d04 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8005cdc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005ce0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8005ce4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00b      	beq.n	8005d04 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8005cec:	e000      	b.n	8005cf0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8005cee:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8005cf0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d0f9      	beq.n	8005cee <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8005cfa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	b2d2      	uxtb	r2, r2
 8005d02:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8005d04:	687b      	ldr	r3, [r7, #4]
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	370c      	adds	r7, #12
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr

08005d12 <_putchar>:
 */

#include "putchar.h"

void _putchar(char character)
{
 8005d12:	b580      	push	{r7, lr}
 8005d14:	b082      	sub	sp, #8
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	4603      	mov	r3, r0
 8005d1a:	71fb      	strb	r3, [r7, #7]
  // send char to console etc.
	ITM_SendChar(character);
 8005d1c:	79fb      	ldrb	r3, [r7, #7]
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7ff ffd0 	bl	8005cc4 <ITM_SendChar>
}
 8005d24:	bf00      	nop
 8005d26:	3708      	adds	r7, #8
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <__libc_init_array>:
 8005d2c:	b570      	push	{r4, r5, r6, lr}
 8005d2e:	4e0d      	ldr	r6, [pc, #52]	; (8005d64 <__libc_init_array+0x38>)
 8005d30:	4c0d      	ldr	r4, [pc, #52]	; (8005d68 <__libc_init_array+0x3c>)
 8005d32:	1ba4      	subs	r4, r4, r6
 8005d34:	10a4      	asrs	r4, r4, #2
 8005d36:	2500      	movs	r5, #0
 8005d38:	42a5      	cmp	r5, r4
 8005d3a:	d109      	bne.n	8005d50 <__libc_init_array+0x24>
 8005d3c:	4e0b      	ldr	r6, [pc, #44]	; (8005d6c <__libc_init_array+0x40>)
 8005d3e:	4c0c      	ldr	r4, [pc, #48]	; (8005d70 <__libc_init_array+0x44>)
 8005d40:	f000 f846 	bl	8005dd0 <_init>
 8005d44:	1ba4      	subs	r4, r4, r6
 8005d46:	10a4      	asrs	r4, r4, #2
 8005d48:	2500      	movs	r5, #0
 8005d4a:	42a5      	cmp	r5, r4
 8005d4c:	d105      	bne.n	8005d5a <__libc_init_array+0x2e>
 8005d4e:	bd70      	pop	{r4, r5, r6, pc}
 8005d50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d54:	4798      	blx	r3
 8005d56:	3501      	adds	r5, #1
 8005d58:	e7ee      	b.n	8005d38 <__libc_init_array+0xc>
 8005d5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d5e:	4798      	blx	r3
 8005d60:	3501      	adds	r5, #1
 8005d62:	e7f2      	b.n	8005d4a <__libc_init_array+0x1e>
 8005d64:	08005e80 	.word	0x08005e80
 8005d68:	08005e80 	.word	0x08005e80
 8005d6c:	08005e80 	.word	0x08005e80
 8005d70:	08005e84 	.word	0x08005e84

08005d74 <memset>:
 8005d74:	4402      	add	r2, r0
 8005d76:	4603      	mov	r3, r0
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d100      	bne.n	8005d7e <memset+0xa>
 8005d7c:	4770      	bx	lr
 8005d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8005d82:	e7f9      	b.n	8005d78 <memset+0x4>

08005d84 <roundf>:
 8005d84:	ee10 0a10 	vmov	r0, s0
 8005d88:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8005d8c:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8005d90:	2a16      	cmp	r2, #22
 8005d92:	dc15      	bgt.n	8005dc0 <roundf+0x3c>
 8005d94:	2a00      	cmp	r2, #0
 8005d96:	da08      	bge.n	8005daa <roundf+0x26>
 8005d98:	3201      	adds	r2, #1
 8005d9a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8005d9e:	d101      	bne.n	8005da4 <roundf+0x20>
 8005da0:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8005da4:	ee00 3a10 	vmov	s0, r3
 8005da8:	4770      	bx	lr
 8005daa:	4908      	ldr	r1, [pc, #32]	; (8005dcc <roundf+0x48>)
 8005dac:	4111      	asrs	r1, r2
 8005dae:	4208      	tst	r0, r1
 8005db0:	d0fa      	beq.n	8005da8 <roundf+0x24>
 8005db2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005db6:	4113      	asrs	r3, r2
 8005db8:	4403      	add	r3, r0
 8005dba:	ea23 0301 	bic.w	r3, r3, r1
 8005dbe:	e7f1      	b.n	8005da4 <roundf+0x20>
 8005dc0:	2a80      	cmp	r2, #128	; 0x80
 8005dc2:	d1f1      	bne.n	8005da8 <roundf+0x24>
 8005dc4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	007fffff 	.word	0x007fffff

08005dd0 <_init>:
 8005dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dd2:	bf00      	nop
 8005dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dd6:	bc08      	pop	{r3}
 8005dd8:	469e      	mov	lr, r3
 8005dda:	4770      	bx	lr

08005ddc <_fini>:
 8005ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dde:	bf00      	nop
 8005de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005de2:	bc08      	pop	{r3}
 8005de4:	469e      	mov	lr, r3
 8005de6:	4770      	bx	lr
