
F405_LQFP64.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004df4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08004f84  08004f84  00014f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800505c  0800505c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800505c  0800505c  0001505c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005064  08005064  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005064  08005064  00015064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005068  08005068  00015068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800506c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000162c  20000070  080050dc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000169c  080050dc  0002169c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ea8  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000028c3  00000000  00000000  00030f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a10  00000000  00000000  00033810  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008c8  00000000  00000000  00034220  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000214b8  00000000  00000000  00034ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bfbc  00000000  00000000  00055fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bec21  00000000  00000000  00061f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00120b7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d70  00000000  00000000  00120bf8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004f6c 	.word	0x08004f6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004f6c 	.word	0x08004f6c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000576:	463b      	mov	r3, r7
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000582:	4b21      	ldr	r3, [pc, #132]	; (8000608 <MX_ADC1_Init+0x98>)
 8000584:	4a21      	ldr	r2, [pc, #132]	; (800060c <MX_ADC1_Init+0x9c>)
 8000586:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000588:	4b1f      	ldr	r3, [pc, #124]	; (8000608 <MX_ADC1_Init+0x98>)
 800058a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800058e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000590:	4b1d      	ldr	r3, [pc, #116]	; (8000608 <MX_ADC1_Init+0x98>)
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000596:	4b1c      	ldr	r3, [pc, #112]	; (8000608 <MX_ADC1_Init+0x98>)
 8000598:	2200      	movs	r2, #0
 800059a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800059c:	4b1a      	ldr	r3, [pc, #104]	; (8000608 <MX_ADC1_Init+0x98>)
 800059e:	2200      	movs	r2, #0
 80005a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005a2:	4b19      	ldr	r3, [pc, #100]	; (8000608 <MX_ADC1_Init+0x98>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005aa:	4b17      	ldr	r3, [pc, #92]	; (8000608 <MX_ADC1_Init+0x98>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005b0:	4b15      	ldr	r3, [pc, #84]	; (8000608 <MX_ADC1_Init+0x98>)
 80005b2:	4a17      	ldr	r2, [pc, #92]	; (8000610 <MX_ADC1_Init+0xa0>)
 80005b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005b6:	4b14      	ldr	r3, [pc, #80]	; (8000608 <MX_ADC1_Init+0x98>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005bc:	4b12      	ldr	r3, [pc, #72]	; (8000608 <MX_ADC1_Init+0x98>)
 80005be:	2201      	movs	r2, #1
 80005c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005c2:	4b11      	ldr	r3, [pc, #68]	; (8000608 <MX_ADC1_Init+0x98>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ca:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <MX_ADC1_Init+0x98>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d0:	480d      	ldr	r0, [pc, #52]	; (8000608 <MX_ADC1_Init+0x98>)
 80005d2:	f000 fe99 	bl	8001308 <HAL_ADC_Init>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005dc:	f000 fce8 	bl	8000fb0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ec:	463b      	mov	r3, r7
 80005ee:	4619      	mov	r1, r3
 80005f0:	4805      	ldr	r0, [pc, #20]	; (8000608 <MX_ADC1_Init+0x98>)
 80005f2:	f000 fecd 	bl	8001390 <HAL_ADC_ConfigChannel>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80005fc:	f000 fcd8 	bl	8000fb0 <Error_Handler>
  }

}
 8000600:	bf00      	nop
 8000602:	3710      	adds	r7, #16
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	200004a8 	.word	0x200004a8
 800060c:	40012000 	.word	0x40012000
 8000610:	0f000001 	.word	0x0f000001

08000614 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	; 0x28
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a17      	ldr	r2, [pc, #92]	; (8000690 <HAL_ADC_MspInit+0x7c>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d127      	bne.n	8000686 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	613b      	str	r3, [r7, #16]
 800063a:	4b16      	ldr	r3, [pc, #88]	; (8000694 <HAL_ADC_MspInit+0x80>)
 800063c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800063e:	4a15      	ldr	r2, [pc, #84]	; (8000694 <HAL_ADC_MspInit+0x80>)
 8000640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000644:	6453      	str	r3, [r2, #68]	; 0x44
 8000646:	4b13      	ldr	r3, [pc, #76]	; (8000694 <HAL_ADC_MspInit+0x80>)
 8000648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800064a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <HAL_ADC_MspInit+0x80>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	4a0e      	ldr	r2, [pc, #56]	; (8000694 <HAL_ADC_MspInit+0x80>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6313      	str	r3, [r2, #48]	; 0x30
 8000662:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <HAL_ADC_MspInit+0x80>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = FootExp_IN_Pin|UserPotA_IN_Pin|UserPotB_IN_Pin;
 800066e:	2307      	movs	r3, #7
 8000670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000672:	2303      	movs	r3, #3
 8000674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	4619      	mov	r1, r3
 8000680:	4805      	ldr	r0, [pc, #20]	; (8000698 <HAL_ADC_MspInit+0x84>)
 8000682:	f001 fd23 	bl	80020cc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000686:	bf00      	nop
 8000688:	3728      	adds	r7, #40	; 0x28
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40012000 	.word	0x40012000
 8000694:	40023800 	.word	0x40023800
 8000698:	40020000 	.word	0x40020000

0800069c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <MX_DMA_Init+0x4c>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a0f      	ldr	r2, [pc, #60]	; (80006e8 <MX_DMA_Init+0x4c>)
 80006ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <MX_DMA_Init+0x4c>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80006be:	2200      	movs	r2, #0
 80006c0:	2100      	movs	r1, #0
 80006c2:	200e      	movs	r0, #14
 80006c4:	f001 f95d 	bl	8001982 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80006c8:	200e      	movs	r0, #14
 80006ca:	f001 f976 	bl	80019ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2100      	movs	r1, #0
 80006d2:	200f      	movs	r0, #15
 80006d4:	f001 f955 	bl	8001982 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80006d8:	200f      	movs	r0, #15
 80006da:	f001 f96e 	bl	80019ba <HAL_NVIC_EnableIRQ>

}
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800

080006ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b088      	sub	sp, #32
 80006f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f2:	f107 030c 	add.w	r3, r7, #12
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	4b3a      	ldr	r3, [pc, #232]	; (80007f0 <MX_GPIO_Init+0x104>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a39      	ldr	r2, [pc, #228]	; (80007f0 <MX_GPIO_Init+0x104>)
 800070c:	f043 0304 	orr.w	r3, r3, #4
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b37      	ldr	r3, [pc, #220]	; (80007f0 <MX_GPIO_Init+0x104>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0304 	and.w	r3, r3, #4
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	4b33      	ldr	r3, [pc, #204]	; (80007f0 <MX_GPIO_Init+0x104>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a32      	ldr	r2, [pc, #200]	; (80007f0 <MX_GPIO_Init+0x104>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b30      	ldr	r3, [pc, #192]	; (80007f0 <MX_GPIO_Init+0x104>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	603b      	str	r3, [r7, #0]
 800073e:	4b2c      	ldr	r3, [pc, #176]	; (80007f0 <MX_GPIO_Init+0x104>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a2b      	ldr	r2, [pc, #172]	; (80007f0 <MX_GPIO_Init+0x104>)
 8000744:	f043 0302 	orr.w	r3, r3, #2
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b29      	ldr	r3, [pc, #164]	; (80007f0 <MX_GPIO_Init+0x104>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0302 	and.w	r3, r3, #2
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RelayCoil_OUT_GPIO_Port, RelayCoil_OUT_Pin, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2101      	movs	r1, #1
 800075a:	4826      	ldr	r0, [pc, #152]	; (80007f4 <MX_GPIO_Init+0x108>)
 800075c:	f001 fe50 	bl	8002400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDA_RED_Pin|LEDA_GREEN_Pin|LEDA_BLUE_Pin, GPIO_PIN_RESET);
 8000760:	2200      	movs	r2, #0
 8000762:	2107      	movs	r1, #7
 8000764:	4824      	ldr	r0, [pc, #144]	; (80007f8 <MX_GPIO_Init+0x10c>)
 8000766:	f001 fe4b 	bl	8002400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LEDB_RED_Pin|LEDB_GREEN_Pin|LEDB_BLUE_Pin, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000770:	4822      	ldr	r0, [pc, #136]	; (80007fc <MX_GPIO_Init+0x110>)
 8000772:	f001 fe45 	bl	8002400 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = FootSwitchA_IN_Pin|FootSwitchB_IN_Pin|UserSwitchA_IN_Pin|UserSwitchB_IN_Pin;
 8000776:	f246 0306 	movw	r3, #24582	; 0x6006
 800077a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800077c:	2300      	movs	r3, #0
 800077e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	4619      	mov	r1, r3
 800078a:	481a      	ldr	r0, [pc, #104]	; (80007f4 <MX_GPIO_Init+0x108>)
 800078c:	f001 fc9e 	bl	80020cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RelayCoil_OUT_Pin;
 8000790:	2301      	movs	r3, #1
 8000792:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000794:	2301      	movs	r3, #1
 8000796:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079c:	2300      	movs	r3, #0
 800079e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RelayCoil_OUT_GPIO_Port, &GPIO_InitStruct);
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	4619      	mov	r1, r3
 80007a6:	4813      	ldr	r0, [pc, #76]	; (80007f4 <MX_GPIO_Init+0x108>)
 80007a8:	f001 fc90 	bl	80020cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LEDA_RED_Pin|LEDA_GREEN_Pin|LEDA_BLUE_Pin;
 80007ac:	2307      	movs	r3, #7
 80007ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b0:	2301      	movs	r3, #1
 80007b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007bc:	f107 030c 	add.w	r3, r7, #12
 80007c0:	4619      	mov	r1, r3
 80007c2:	480d      	ldr	r0, [pc, #52]	; (80007f8 <MX_GPIO_Init+0x10c>)
 80007c4:	f001 fc82 	bl	80020cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LEDB_RED_Pin|LEDB_GREEN_Pin|LEDB_BLUE_Pin;
 80007c8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80007cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ce:	2301      	movs	r3, #1
 80007d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007da:	f107 030c 	add.w	r3, r7, #12
 80007de:	4619      	mov	r1, r3
 80007e0:	4806      	ldr	r0, [pc, #24]	; (80007fc <MX_GPIO_Init+0x110>)
 80007e2:	f001 fc73 	bl	80020cc <HAL_GPIO_Init>

}
 80007e6:	bf00      	nop
 80007e8:	3720      	adds	r7, #32
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40020800 	.word	0x40020800
 80007f8:	40020400 	.word	0x40020400
 80007fc:	40020000 	.word	0x40020000

08000800 <MX_I2S2_Init>:
DMA_HandleTypeDef hdma_i2s2_ext_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0

  hi2s2.Instance = SPI2;
 8000804:	4b13      	ldr	r3, [pc, #76]	; (8000854 <MX_I2S2_Init+0x54>)
 8000806:	4a14      	ldr	r2, [pc, #80]	; (8000858 <MX_I2S2_Init+0x58>)
 8000808:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800080a:	4b12      	ldr	r3, [pc, #72]	; (8000854 <MX_I2S2_Init+0x54>)
 800080c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000810:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <MX_I2S2_Init+0x54>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000818:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_I2S2_Init+0x54>)
 800081a:	2203      	movs	r2, #3
 800081c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800081e:	4b0d      	ldr	r3, [pc, #52]	; (8000854 <MX_I2S2_Init+0x54>)
 8000820:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000824:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <MX_I2S2_Init+0x54>)
 8000828:	4a0c      	ldr	r2, [pc, #48]	; (800085c <MX_I2S2_Init+0x5c>)
 800082a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800082c:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_I2S2_Init+0x54>)
 800082e:	2200      	movs	r2, #0
 8000830:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <MX_I2S2_Init+0x54>)
 8000834:	2200      	movs	r2, #0
 8000836:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_I2S2_Init+0x54>)
 800083a:	2201      	movs	r2, #1
 800083c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <MX_I2S2_Init+0x54>)
 8000840:	f001 fdf8 	bl	8002434 <HAL_I2S_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 800084a:	f000 fbb1 	bl	8000fb0 <Error_Handler>
  }

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200005b0 	.word	0x200005b0
 8000858:	40003800 	.word	0x40003800
 800085c:	00017700 	.word	0x00017700

08000860 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08a      	sub	sp, #40	; 0x28
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a62      	ldr	r2, [pc, #392]	; (8000a08 <HAL_I2S_MspInit+0x1a8>)
 800087e:	4293      	cmp	r3, r2
 8000880:	f040 80bd 	bne.w	80009fe <HAL_I2S_MspInit+0x19e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000884:	2300      	movs	r3, #0
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	4b60      	ldr	r3, [pc, #384]	; (8000a0c <HAL_I2S_MspInit+0x1ac>)
 800088a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088c:	4a5f      	ldr	r2, [pc, #380]	; (8000a0c <HAL_I2S_MspInit+0x1ac>)
 800088e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000892:	6413      	str	r3, [r2, #64]	; 0x40
 8000894:	4b5d      	ldr	r3, [pc, #372]	; (8000a0c <HAL_I2S_MspInit+0x1ac>)
 8000896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000898:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800089c:	613b      	str	r3, [r7, #16]
 800089e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a0:	2300      	movs	r3, #0
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	4b59      	ldr	r3, [pc, #356]	; (8000a0c <HAL_I2S_MspInit+0x1ac>)
 80008a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a8:	4a58      	ldr	r2, [pc, #352]	; (8000a0c <HAL_I2S_MspInit+0x1ac>)
 80008aa:	f043 0302 	orr.w	r3, r3, #2
 80008ae:	6313      	str	r3, [r2, #48]	; 0x30
 80008b0:	4b56      	ldr	r3, [pc, #344]	; (8000a0c <HAL_I2S_MspInit+0x1ac>)
 80008b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b4:	f003 0302 	and.w	r3, r3, #2
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008bc:	2300      	movs	r3, #0
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	4b52      	ldr	r3, [pc, #328]	; (8000a0c <HAL_I2S_MspInit+0x1ac>)
 80008c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c4:	4a51      	ldr	r2, [pc, #324]	; (8000a0c <HAL_I2S_MspInit+0x1ac>)
 80008c6:	f043 0304 	orr.w	r3, r3, #4
 80008ca:	6313      	str	r3, [r2, #48]	; 0x30
 80008cc:	4b4f      	ldr	r3, [pc, #316]	; (8000a0c <HAL_I2S_MspInit+0x1ac>)
 80008ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d0:	f003 0304 	and.w	r3, r3, #4
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	68bb      	ldr	r3, [r7, #8]
    PB13     ------> I2S2_CK
    PB14     ------> I2S2_ext_SD
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80008d8:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80008dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	2302      	movs	r3, #2
 80008e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ea:	2305      	movs	r3, #5
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	4619      	mov	r1, r3
 80008f4:	4846      	ldr	r0, [pc, #280]	; (8000a10 <HAL_I2S_MspInit+0x1b0>)
 80008f6:	f001 fbe9 	bl	80020cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80008fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000900:	2302      	movs	r3, #2
 8000902:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 800090c:	2306      	movs	r3, #6
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4619      	mov	r1, r3
 8000916:	483e      	ldr	r0, [pc, #248]	; (8000a10 <HAL_I2S_MspInit+0x1b0>)
 8000918:	f001 fbd8 	bl	80020cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800091c:	2340      	movs	r3, #64	; 0x40
 800091e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000920:	2302      	movs	r3, #2
 8000922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2300      	movs	r3, #0
 800092a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800092c:	2305      	movs	r3, #5
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	4619      	mov	r1, r3
 8000936:	4837      	ldr	r0, [pc, #220]	; (8000a14 <HAL_I2S_MspInit+0x1b4>)
 8000938:	f001 fbc8 	bl	80020cc <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 800093c:	4b36      	ldr	r3, [pc, #216]	; (8000a18 <HAL_I2S_MspInit+0x1b8>)
 800093e:	4a37      	ldr	r2, [pc, #220]	; (8000a1c <HAL_I2S_MspInit+0x1bc>)
 8000940:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8000942:	4b35      	ldr	r3, [pc, #212]	; (8000a18 <HAL_I2S_MspInit+0x1b8>)
 8000944:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000948:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800094a:	4b33      	ldr	r3, [pc, #204]	; (8000a18 <HAL_I2S_MspInit+0x1b8>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000950:	4b31      	ldr	r3, [pc, #196]	; (8000a18 <HAL_I2S_MspInit+0x1b8>)
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000956:	4b30      	ldr	r3, [pc, #192]	; (8000a18 <HAL_I2S_MspInit+0x1b8>)
 8000958:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800095c:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800095e:	4b2e      	ldr	r3, [pc, #184]	; (8000a18 <HAL_I2S_MspInit+0x1b8>)
 8000960:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000964:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000966:	4b2c      	ldr	r3, [pc, #176]	; (8000a18 <HAL_I2S_MspInit+0x1b8>)
 8000968:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800096c:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 800096e:	4b2a      	ldr	r3, [pc, #168]	; (8000a18 <HAL_I2S_MspInit+0x1b8>)
 8000970:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000974:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000976:	4b28      	ldr	r3, [pc, #160]	; (8000a18 <HAL_I2S_MspInit+0x1b8>)
 8000978:	2200      	movs	r2, #0
 800097a:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800097c:	4b26      	ldr	r3, [pc, #152]	; (8000a18 <HAL_I2S_MspInit+0x1b8>)
 800097e:	2200      	movs	r2, #0
 8000980:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 8000982:	4825      	ldr	r0, [pc, #148]	; (8000a18 <HAL_I2S_MspInit+0x1b8>)
 8000984:	f001 f834 	bl	80019f0 <HAL_DMA_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <HAL_I2S_MspInit+0x132>
    {
      Error_Handler();
 800098e:	f000 fb0f 	bl	8000fb0 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_i2s2_ext_rx);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4a20      	ldr	r2, [pc, #128]	; (8000a18 <HAL_I2S_MspInit+0x1b8>)
 8000996:	63da      	str	r2, [r3, #60]	; 0x3c
 8000998:	4a1f      	ldr	r2, [pc, #124]	; (8000a18 <HAL_I2S_MspInit+0x1b8>)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800099e:	4b20      	ldr	r3, [pc, #128]	; (8000a20 <HAL_I2S_MspInit+0x1c0>)
 80009a0:	4a20      	ldr	r2, [pc, #128]	; (8000a24 <HAL_I2S_MspInit+0x1c4>)
 80009a2:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80009a4:	4b1e      	ldr	r3, [pc, #120]	; (8000a20 <HAL_I2S_MspInit+0x1c0>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009aa:	4b1d      	ldr	r3, [pc, #116]	; (8000a20 <HAL_I2S_MspInit+0x1c0>)
 80009ac:	2240      	movs	r2, #64	; 0x40
 80009ae:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009b0:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <HAL_I2S_MspInit+0x1c0>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009b6:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <HAL_I2S_MspInit+0x1c0>)
 80009b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009bc:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009be:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <HAL_I2S_MspInit+0x1c0>)
 80009c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009c4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009c6:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <HAL_I2S_MspInit+0x1c0>)
 80009c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009cc:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 80009ce:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <HAL_I2S_MspInit+0x1c0>)
 80009d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009d4:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80009d6:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <HAL_I2S_MspInit+0x1c0>)
 80009d8:	2200      	movs	r2, #0
 80009da:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009dc:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <HAL_I2S_MspInit+0x1c0>)
 80009de:	2200      	movs	r2, #0
 80009e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80009e2:	480f      	ldr	r0, [pc, #60]	; (8000a20 <HAL_I2S_MspInit+0x1c0>)
 80009e4:	f001 f804 	bl	80019f0 <HAL_DMA_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <HAL_I2S_MspInit+0x192>
    {
      Error_Handler();
 80009ee:	f000 fadf 	bl	8000fb0 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi2_tx);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a0a      	ldr	r2, [pc, #40]	; (8000a20 <HAL_I2S_MspInit+0x1c0>)
 80009f6:	639a      	str	r2, [r3, #56]	; 0x38
 80009f8:	4a09      	ldr	r2, [pc, #36]	; (8000a20 <HAL_I2S_MspInit+0x1c0>)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80009fe:	bf00      	nop
 8000a00:	3728      	adds	r7, #40	; 0x28
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40003800 	.word	0x40003800
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40020400 	.word	0x40020400
 8000a14:	40020800 	.word	0x40020800
 8000a18:	200004f0 	.word	0x200004f0
 8000a1c:	40026058 	.word	0x40026058
 8000a20:	20000550 	.word	0x20000550
 8000a24:	40026070 	.word	0x40026070

08000a28 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	607a      	str	r2, [r7, #4]
  (void) file;  /// Not used, avoid warning
  SEGGER_RTT_Write(0, ptr, len);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	461a      	mov	r2, r3
 8000a38:	68b9      	ldr	r1, [r7, #8]
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f003 fab8 	bl	8003fb0 <SEGGER_RTT_Write>
  return len;
 8000a40:	687b      	ldr	r3, [r7, #4]
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <Do_HighPass>:
	adc_samples_avg = adc_samples_sum / ADC_DATA_LEN;

	return adc_samples_avg;
}

int Do_HighPass (int inSample) {
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]

	//Shift = adc_data_in/100;
	//300Hz high-pass, 96k
	a0 = 0.9862117951198142f;
 8000a54:	4b30      	ldr	r3, [pc, #192]	; (8000b18 <Do_HighPass+0xcc>)
 8000a56:	4a31      	ldr	r2, [pc, #196]	; (8000b1c <Do_HighPass+0xd0>)
 8000a58:	601a      	str	r2, [r3, #0]
	a1 = -1.9724235902396283f;
 8000a5a:	4b31      	ldr	r3, [pc, #196]	; (8000b20 <Do_HighPass+0xd4>)
 8000a5c:	4a31      	ldr	r2, [pc, #196]	; (8000b24 <Do_HighPass+0xd8>)
 8000a5e:	601a      	str	r2, [r3, #0]
	a2 = 0.9862117951198142f;
 8000a60:	4b31      	ldr	r3, [pc, #196]	; (8000b28 <Do_HighPass+0xdc>)
 8000a62:	4a2e      	ldr	r2, [pc, #184]	; (8000b1c <Do_HighPass+0xd0>)
 8000a64:	601a      	str	r2, [r3, #0]
	b1 = -1.972233470205696f;
 8000a66:	4b31      	ldr	r3, [pc, #196]	; (8000b2c <Do_HighPass+0xe0>)
 8000a68:	4a31      	ldr	r2, [pc, #196]	; (8000b30 <Do_HighPass+0xe4>)
 8000a6a:	601a      	str	r2, [r3, #0]
	b2 = 0.9726137102735608f;
 8000a6c:	4b31      	ldr	r3, [pc, #196]	; (8000b34 <Do_HighPass+0xe8>)
 8000a6e:	4a32      	ldr	r2, [pc, #200]	; (8000b38 <Do_HighPass+0xec>)
 8000a70:	601a      	str	r2, [r3, #0]
	a2 = 0.9930819695180432;
	b1 = -1.9861160802293198;
	b2 = 0.986211797842853;
*/

	float inSampleF = (float)inSample;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	ee07 3a90 	vmov	s15, r3
 8000a78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a7c:	edc7 7a03 	vstr	s15, [r7, #12]
	float outSampleF =
			a0 * inSampleF
 8000a80:	4b25      	ldr	r3, [pc, #148]	; (8000b18 <Do_HighPass+0xcc>)
 8000a82:	ed93 7a00 	vldr	s14, [r3]
 8000a86:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a8a:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ a1 * hp_in_z1
 8000a8e:	4b24      	ldr	r3, [pc, #144]	; (8000b20 <Do_HighPass+0xd4>)
 8000a90:	edd3 6a00 	vldr	s13, [r3]
 8000a94:	4b29      	ldr	r3, [pc, #164]	; (8000b3c <Do_HighPass+0xf0>)
 8000a96:	edd3 7a00 	vldr	s15, [r3]
 8000a9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a9e:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ a2 * hp_in_z2
 8000aa2:	4b21      	ldr	r3, [pc, #132]	; (8000b28 <Do_HighPass+0xdc>)
 8000aa4:	edd3 6a00 	vldr	s13, [r3]
 8000aa8:	4b25      	ldr	r3, [pc, #148]	; (8000b40 <Do_HighPass+0xf4>)
 8000aaa:	edd3 7a00 	vldr	s15, [r3]
 8000aae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ab2:	ee37 7a27 	vadd.f32	s14, s14, s15
			- b1 * hp_out_z1
 8000ab6:	4b1d      	ldr	r3, [pc, #116]	; (8000b2c <Do_HighPass+0xe0>)
 8000ab8:	edd3 6a00 	vldr	s13, [r3]
 8000abc:	4b21      	ldr	r3, [pc, #132]	; (8000b44 <Do_HighPass+0xf8>)
 8000abe:	edd3 7a00 	vldr	s15, [r3]
 8000ac2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ac6:	ee37 7a67 	vsub.f32	s14, s14, s15
			- b2 * hp_out_z2;
 8000aca:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <Do_HighPass+0xe8>)
 8000acc:	edd3 6a00 	vldr	s13, [r3]
 8000ad0:	4b1d      	ldr	r3, [pc, #116]	; (8000b48 <Do_HighPass+0xfc>)
 8000ad2:	edd3 7a00 	vldr	s15, [r3]
 8000ad6:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float outSampleF =
 8000ada:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ade:	edc7 7a02 	vstr	s15, [r7, #8]
	hp_in_z2 = hp_in_z1;
 8000ae2:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <Do_HighPass+0xf0>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a16      	ldr	r2, [pc, #88]	; (8000b40 <Do_HighPass+0xf4>)
 8000ae8:	6013      	str	r3, [r2, #0]
	hp_in_z1 = inSampleF;
 8000aea:	4a14      	ldr	r2, [pc, #80]	; (8000b3c <Do_HighPass+0xf0>)
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	6013      	str	r3, [r2, #0]
	hp_out_z2 = hp_out_z1;
 8000af0:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <Do_HighPass+0xf8>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a14      	ldr	r2, [pc, #80]	; (8000b48 <Do_HighPass+0xfc>)
 8000af6:	6013      	str	r3, [r2, #0]
	hp_out_z1 = outSampleF;
 8000af8:	4a12      	ldr	r2, [pc, #72]	; (8000b44 <Do_HighPass+0xf8>)
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	6013      	str	r3, [r2, #0]

	// TODO
	//outSampleF = outSampleF * 0.1f;

	return (int) outSampleF;
 8000afe:	edd7 7a02 	vldr	s15, [r7, #8]
 8000b02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b06:	ee17 3a90 	vmov	r3, s15
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3714      	adds	r7, #20
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	200015e4 	.word	0x200015e4
 8000b1c:	3f7c7860 	.word	0x3f7c7860
 8000b20:	20000608 	.word	0x20000608
 8000b24:	bffc7860 	.word	0xbffc7860
 8000b28:	200015d8 	.word	0x200015d8
 8000b2c:	20000600 	.word	0x20000600
 8000b30:	bffc7225 	.word	0xbffc7225
 8000b34:	200005fc 	.word	0x200005fc
 8000b38:	3f78fd36 	.word	0x3f78fd36
 8000b3c:	200015e8 	.word	0x200015e8
 8000b40:	2000061c 	.word	0x2000061c
 8000b44:	200015e0 	.word	0x200015e0
 8000b48:	200015d4 	.word	0x200015d4

08000b4c <Do_PitchShift>:


int Do_PitchShift(int lSample, int rSample) {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08a      	sub	sp, #40	; 0x28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
	int sum = lSample + rSample;
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	623b      	str	r3, [r7, #32]
	//sum up and do high-pass
	sum=Do_HighPass(sum);
 8000b5e:	6a38      	ldr	r0, [r7, #32]
 8000b60:	f7ff ff74 	bl	8000a4c <Do_HighPass>
 8000b64:	6238      	str	r0, [r7, #32]

	//write to ringbuffer
	Buf[WtrP] = sum;
 8000b66:	4b73      	ldr	r3, [pc, #460]	; (8000d34 <Do_PitchShift+0x1e8>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4973      	ldr	r1, [pc, #460]	; (8000d38 <Do_PitchShift+0x1ec>)
 8000b6c:	6a3a      	ldr	r2, [r7, #32]
 8000b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//read fractional readpointer and generate 0° and 180° read-pointer in integer
	int RdPtr_Int = roundf(Rd_P);
 8000b72:	4b72      	ldr	r3, [pc, #456]	; (8000d3c <Do_PitchShift+0x1f0>)
 8000b74:	edd3 7a00 	vldr	s15, [r3]
 8000b78:	eeb0 0a67 	vmov.f32	s0, s15
 8000b7c:	f004 f9d0 	bl	8004f20 <roundf>
 8000b80:	eef0 7a40 	vmov.f32	s15, s0
 8000b84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b88:	ee17 3a90 	vmov	r3, s15
 8000b8c:	61fb      	str	r3, [r7, #28]
	int RdPtr_Int2 = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
	if (RdPtr_Int >= BufSize/2) RdPtr_Int2 = RdPtr_Int - (BufSize/2);
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000b98:	db04      	blt.n	8000ba4 <Do_PitchShift+0x58>
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ba2:	e003      	b.n	8000bac <Do_PitchShift+0x60>
	else RdPtr_Int2 = RdPtr_Int + (BufSize/2);
 8000ba4:	69fb      	ldr	r3, [r7, #28]
 8000ba6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24

	//read the two samples...
	float Rd0 = (float) Buf[RdPtr_Int];
 8000bac:	4a62      	ldr	r2, [pc, #392]	; (8000d38 <Do_PitchShift+0x1ec>)
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bb4:	ee07 3a90 	vmov	s15, r3
 8000bb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bbc:	edc7 7a06 	vstr	s15, [r7, #24]
	float Rd1 = (float) Buf[RdPtr_Int2];
 8000bc0:	4a5d      	ldr	r2, [pc, #372]	; (8000d38 <Do_PitchShift+0x1ec>)
 8000bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bc8:	ee07 3a90 	vmov	s15, r3
 8000bcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bd0:	edc7 7a05 	vstr	s15, [r7, #20]

	//Check if first readpointer starts overlap with write pointer?
	// if yes -> do cross-fade to second read-pointer
	if (Overlap >= (WtrP-RdPtr_Int) && (WtrP-RdPtr_Int) >= 0 && Shift!=1.0f) {
 8000bd4:	4b57      	ldr	r3, [pc, #348]	; (8000d34 <Do_PitchShift+0x1e8>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	1ad3      	subs	r3, r2, r3
 8000bdc:	2b64      	cmp	r3, #100	; 0x64
 8000bde:	dc21      	bgt.n	8000c24 <Do_PitchShift+0xd8>
 8000be0:	4b54      	ldr	r3, [pc, #336]	; (8000d34 <Do_PitchShift+0x1e8>)
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	69fb      	ldr	r3, [r7, #28]
 8000be6:	1ad3      	subs	r3, r2, r3
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	db1b      	blt.n	8000c24 <Do_PitchShift+0xd8>
 8000bec:	4b54      	ldr	r3, [pc, #336]	; (8000d40 <Do_PitchShift+0x1f4>)
 8000bee:	edd3 7a00 	vldr	s15, [r3]
 8000bf2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000bf6:	eef4 7a47 	vcmp.f32	s15, s14
 8000bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bfe:	d011      	beq.n	8000c24 <Do_PitchShift+0xd8>
		int rel = WtrP-RdPtr_Int;
 8000c00:	4b4c      	ldr	r3, [pc, #304]	; (8000d34 <Do_PitchShift+0x1e8>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	1ad3      	subs	r3, r2, r3
 8000c08:	613b      	str	r3, [r7, #16]
		CrossFade = ((float)rel)/(float)Overlap;
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	ee07 3a90 	vmov	s15, r3
 8000c10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c14:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8000d44 <Do_PitchShift+0x1f8>
 8000c18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c1c:	4b4a      	ldr	r3, [pc, #296]	; (8000d48 <Do_PitchShift+0x1fc>)
 8000c1e:	edc3 7a00 	vstr	s15, [r3]
	if (Overlap >= (WtrP-RdPtr_Int) && (WtrP-RdPtr_Int) >= 0 && Shift!=1.0f) {
 8000c22:	e008      	b.n	8000c36 <Do_PitchShift+0xea>
	}
	else if (WtrP-RdPtr_Int == 0) CrossFade = 0.0f;
 8000c24:	4b43      	ldr	r3, [pc, #268]	; (8000d34 <Do_PitchShift+0x1e8>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	69fa      	ldr	r2, [r7, #28]
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d103      	bne.n	8000c36 <Do_PitchShift+0xea>
 8000c2e:	4b46      	ldr	r3, [pc, #280]	; (8000d48 <Do_PitchShift+0x1fc>)
 8000c30:	f04f 0200 	mov.w	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]

	//Check if second readpointer starts overlap with write pointer?
	// if yes -> do cross-fade to first read-pointer
	if (Overlap >= (WtrP-RdPtr_Int2) && (WtrP-RdPtr_Int2) >= 0 && Shift!=1.0f) {
 8000c36:	4b3f      	ldr	r3, [pc, #252]	; (8000d34 <Do_PitchShift+0x1e8>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	2b64      	cmp	r3, #100	; 0x64
 8000c40:	dc25      	bgt.n	8000c8e <Do_PitchShift+0x142>
 8000c42:	4b3c      	ldr	r3, [pc, #240]	; (8000d34 <Do_PitchShift+0x1e8>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	db1f      	blt.n	8000c8e <Do_PitchShift+0x142>
 8000c4e:	4b3c      	ldr	r3, [pc, #240]	; (8000d40 <Do_PitchShift+0x1f4>)
 8000c50:	edd3 7a00 	vldr	s15, [r3]
 8000c54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000c58:	eef4 7a47 	vcmp.f32	s15, s14
 8000c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c60:	d015      	beq.n	8000c8e <Do_PitchShift+0x142>
			int rel = WtrP-RdPtr_Int2;
 8000c62:	4b34      	ldr	r3, [pc, #208]	; (8000d34 <Do_PitchShift+0x1e8>)
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	60fb      	str	r3, [r7, #12]
			CrossFade = 1.0f - ((float)rel)/(float)Overlap;
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	ee07 3a90 	vmov	s15, r3
 8000c72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c76:	eddf 6a33 	vldr	s13, [pc, #204]	; 8000d44 <Do_PitchShift+0x1f8>
 8000c7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000c82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c86:	4b30      	ldr	r3, [pc, #192]	; (8000d48 <Do_PitchShift+0x1fc>)
 8000c88:	edc3 7a00 	vstr	s15, [r3]
	if (Overlap >= (WtrP-RdPtr_Int2) && (WtrP-RdPtr_Int2) >= 0 && Shift!=1.0f) {
 8000c8c:	e008      	b.n	8000ca0 <Do_PitchShift+0x154>
		}
	else if (WtrP-RdPtr_Int2 == 0) CrossFade = 1.0f;
 8000c8e:	4b29      	ldr	r3, [pc, #164]	; (8000d34 <Do_PitchShift+0x1e8>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d103      	bne.n	8000ca0 <Do_PitchShift+0x154>
 8000c98:	4b2b      	ldr	r3, [pc, #172]	; (8000d48 <Do_PitchShift+0x1fc>)
 8000c9a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000c9e:	601a      	str	r2, [r3, #0]


	//do cross-fading and sum up
	sum = (Rd0*CrossFade + Rd1*(1.0f-CrossFade));
 8000ca0:	4b29      	ldr	r3, [pc, #164]	; (8000d48 <Do_PitchShift+0x1fc>)
 8000ca2:	ed93 7a00 	vldr	s14, [r3]
 8000ca6:	edd7 7a06 	vldr	s15, [r7, #24]
 8000caa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cae:	4b26      	ldr	r3, [pc, #152]	; (8000d48 <Do_PitchShift+0x1fc>)
 8000cb0:	edd3 7a00 	vldr	s15, [r3]
 8000cb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000cb8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000cbc:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ccc:	ee17 3a90 	vmov	r3, s15
 8000cd0:	623b      	str	r3, [r7, #32]

	//increment fractional read-pointer and write-pointer
	Rd_P += Shift;
 8000cd2:	4b1a      	ldr	r3, [pc, #104]	; (8000d3c <Do_PitchShift+0x1f0>)
 8000cd4:	ed93 7a00 	vldr	s14, [r3]
 8000cd8:	4b19      	ldr	r3, [pc, #100]	; (8000d40 <Do_PitchShift+0x1f4>)
 8000cda:	edd3 7a00 	vldr	s15, [r3]
 8000cde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ce2:	4b16      	ldr	r3, [pc, #88]	; (8000d3c <Do_PitchShift+0x1f0>)
 8000ce4:	edc3 7a00 	vstr	s15, [r3]
	WtrP++;
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <Do_PitchShift+0x1e8>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	3301      	adds	r3, #1
 8000cee:	4a11      	ldr	r2, [pc, #68]	; (8000d34 <Do_PitchShift+0x1e8>)
 8000cf0:	6013      	str	r3, [r2, #0]
	if (WtrP == BufSize) WtrP = 0;
 8000cf2:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <Do_PitchShift+0x1e8>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cfa:	d102      	bne.n	8000d02 <Do_PitchShift+0x1b6>
 8000cfc:	4b0d      	ldr	r3, [pc, #52]	; (8000d34 <Do_PitchShift+0x1e8>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
	if (roundf(Rd_P) >= BufSize) Rd_P = 0.0f;
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <Do_PitchShift+0x1f0>)
 8000d04:	edd3 7a00 	vldr	s15, [r3]
 8000d08:	eeb0 0a67 	vmov.f32	s0, s15
 8000d0c:	f004 f908 	bl	8004f20 <roundf>
 8000d10:	eeb0 7a40 	vmov.f32	s14, s0
 8000d14:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8000d4c <Do_PitchShift+0x200>
 8000d18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d20:	db03      	blt.n	8000d2a <Do_PitchShift+0x1de>
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <Do_PitchShift+0x1f0>)
 8000d24:	f04f 0200 	mov.w	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]

	return sum;
 8000d2a:	6a3b      	ldr	r3, [r7, #32]


}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3728      	adds	r7, #40	; 0x28
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000604 	.word	0x20000604
 8000d38:	20000630 	.word	0x20000630
 8000d3c:	200015dc 	.word	0x200015dc
 8000d40:	200005f8 	.word	0x200005f8
 8000d44:	42c80000 	.word	0x42c80000
 8000d48:	200015d0 	.word	0x200015d0
 8000d4c:	447a0000 	.word	0x447a0000

08000d50 <HAL_I2SEx_TxRxHalfCpltCallback>:

void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]

	//restore signed 24 bit sample from 16-bit buffers
	int lSample = (int) (rxBuf[0]<<16)|rxBuf[1];
 8000d58:	4b18      	ldr	r3, [pc, #96]	; (8000dbc <HAL_I2SEx_TxRxHalfCpltCallback+0x6c>)
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	041b      	lsls	r3, r3, #16
 8000d5e:	4a17      	ldr	r2, [pc, #92]	; (8000dbc <HAL_I2SEx_TxRxHalfCpltCallback+0x6c>)
 8000d60:	8852      	ldrh	r2, [r2, #2]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	617b      	str	r3, [r7, #20]
	int rSample = (int) (rxBuf[2]<<16)|rxBuf[3];
 8000d66:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <HAL_I2SEx_TxRxHalfCpltCallback+0x6c>)
 8000d68:	889b      	ldrh	r3, [r3, #4]
 8000d6a:	041b      	lsls	r3, r3, #16
 8000d6c:	4a13      	ldr	r2, [pc, #76]	; (8000dbc <HAL_I2SEx_TxRxHalfCpltCallback+0x6c>)
 8000d6e:	88d2      	ldrh	r2, [r2, #6]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]

	//SEGGER_RTT_printf(0, "lSample:%lu\r\n", lSample);
	printf("lSample:%i\r\n", lSample);
 8000d74:	6979      	ldr	r1, [r7, #20]
 8000d76:	4812      	ldr	r0, [pc, #72]	; (8000dc0 <HAL_I2SEx_TxRxHalfCpltCallback+0x70>)
 8000d78:	f003 f9ee 	bl	8004158 <iprintf>

	int ret_sample = Do_PitchShift(lSample, rSample);
 8000d7c:	6939      	ldr	r1, [r7, #16]
 8000d7e:	6978      	ldr	r0, [r7, #20]
 8000d80:	f7ff fee4 	bl	8000b4c <Do_PitchShift>
 8000d84:	60f8      	str	r0, [r7, #12]
	lSample = ret_sample;
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	617b      	str	r3, [r7, #20]
	rSample = ret_sample;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	613b      	str	r3, [r7, #16]

	//restore to buffer
	txBuf[0] = (lSample>>16)&0xFFFF;
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	0c1b      	lsrs	r3, r3, #16
 8000d92:	b29a      	uxth	r2, r3
 8000d94:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <HAL_I2SEx_TxRxHalfCpltCallback+0x74>)
 8000d96:	801a      	strh	r2, [r3, #0]
	txBuf[1] = lSample&0xFFFF;
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	b29a      	uxth	r2, r3
 8000d9c:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <HAL_I2SEx_TxRxHalfCpltCallback+0x74>)
 8000d9e:	805a      	strh	r2, [r3, #2]
	txBuf[2] = (rSample>>16)&0xFFFF;
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	0c1b      	lsrs	r3, r3, #16
 8000da4:	b29a      	uxth	r2, r3
 8000da6:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <HAL_I2SEx_TxRxHalfCpltCallback+0x74>)
 8000da8:	809a      	strh	r2, [r3, #4]
	txBuf[3] = rSample&0xFFFF;
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	b29a      	uxth	r2, r3
 8000dae:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <HAL_I2SEx_TxRxHalfCpltCallback+0x74>)
 8000db0:	80da      	strh	r2, [r3, #6]

}
 8000db2:	bf00      	nop
 8000db4:	3718      	adds	r7, #24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000620 	.word	0x20000620
 8000dc0:	08004f84 	.word	0x08004f84
 8000dc4:	2000060c 	.word	0x2000060c

08000dc8 <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s){
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]

	//restore signed 24 bit sample from 16-bit buffers
	int lSample = (int) (rxBuf[4]<<16)|rxBuf[5];
 8000dd0:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <HAL_I2SEx_TxRxCpltCallback+0x64>)
 8000dd2:	891b      	ldrh	r3, [r3, #8]
 8000dd4:	041b      	lsls	r3, r3, #16
 8000dd6:	4a15      	ldr	r2, [pc, #84]	; (8000e2c <HAL_I2SEx_TxRxCpltCallback+0x64>)
 8000dd8:	8952      	ldrh	r2, [r2, #10]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	617b      	str	r3, [r7, #20]
	int rSample = (int) (rxBuf[6]<<16)|rxBuf[7];
 8000dde:	4b13      	ldr	r3, [pc, #76]	; (8000e2c <HAL_I2SEx_TxRxCpltCallback+0x64>)
 8000de0:	899b      	ldrh	r3, [r3, #12]
 8000de2:	041b      	lsls	r3, r3, #16
 8000de4:	4a11      	ldr	r2, [pc, #68]	; (8000e2c <HAL_I2SEx_TxRxCpltCallback+0x64>)
 8000de6:	89d2      	ldrh	r2, [r2, #14]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]

	//printf("%i\n", lSample);

	int ret_sample = Do_PitchShift(lSample, rSample);
 8000dec:	6939      	ldr	r1, [r7, #16]
 8000dee:	6978      	ldr	r0, [r7, #20]
 8000df0:	f7ff feac 	bl	8000b4c <Do_PitchShift>
 8000df4:	60f8      	str	r0, [r7, #12]
	lSample = ret_sample;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	617b      	str	r3, [r7, #20]
	rSample = ret_sample;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	613b      	str	r3, [r7, #16]

	//restore to buffer
	txBuf[4] = (lSample>>16)&0xFFFF;
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	0c1b      	lsrs	r3, r3, #16
 8000e02:	b29a      	uxth	r2, r3
 8000e04:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <HAL_I2SEx_TxRxCpltCallback+0x68>)
 8000e06:	811a      	strh	r2, [r3, #8]
	txBuf[5] = lSample&0xFFFF;
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <HAL_I2SEx_TxRxCpltCallback+0x68>)
 8000e0e:	815a      	strh	r2, [r3, #10]
	txBuf[6] = (rSample>>16)&0xFFFF;
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	0c1b      	lsrs	r3, r3, #16
 8000e14:	b29a      	uxth	r2, r3
 8000e16:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_I2SEx_TxRxCpltCallback+0x68>)
 8000e18:	819a      	strh	r2, [r3, #12]
	txBuf[7] = rSample&0xFFFF;
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	b29a      	uxth	r2, r3
 8000e1e:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <HAL_I2SEx_TxRxCpltCallback+0x68>)
 8000e20:	81da      	strh	r2, [r3, #14]

}
 8000e22:	bf00      	nop
 8000e24:	3718      	adds	r7, #24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000620 	.word	0x20000620
 8000e30:	2000060c 	.word	0x2000060c

08000e34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e3a:	f000 f9f3 	bl	8001224 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e3e:	f000 f835 	bl	8000eac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e42:	f7ff fc53 	bl	80006ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000e46:	f7ff fc29 	bl	800069c <MX_DMA_Init>
  MX_ADC1_Init();
 8000e4a:	f7ff fb91 	bl	8000570 <MX_ADC1_Init>
  MX_I2S2_Init();
 8000e4e:	f7ff fcd7 	bl	8000800 <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */
  SEGGER_RTT_ConfigUpBuffer(0, NULL, NULL, 0, SEGGER_RTT_MODE_NO_BLOCK_TRIM);
 8000e52:	2301      	movs	r3, #1
 8000e54:	9300      	str	r3, [sp, #0]
 8000e56:	2300      	movs	r3, #0
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	f003 f8cd 	bl	8003ffc <SEGGER_RTT_ConfigUpBuffer>
  //int res = testfunc();
  HAL_I2SEx_TransmitReceive_DMA (&hi2s2, txBuf, rxBuf, 4);
 8000e62:	2304      	movs	r3, #4
 8000e64:	4a0a      	ldr	r2, [pc, #40]	; (8000e90 <main+0x5c>)
 8000e66:	490b      	ldr	r1, [pc, #44]	; (8000e94 <main+0x60>)
 8000e68:	480b      	ldr	r0, [pc, #44]	; (8000e98 <main+0x64>)
 8000e6a:	f001 fd29 	bl	80028c0 <HAL_I2SEx_TransmitReceive_DMA>

	//0°
	WtrP = 0;
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <main+0x68>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]

	Rd_P = 0.0f;
 8000e74:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <main+0x6c>)
 8000e76:	f04f 0200 	mov.w	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
	Shift = 1.0f;
 8000e7c:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <main+0x70>)
 8000e7e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000e82:	601a      	str	r2, [r3, #0]
	CrossFade = 1.0f;
 8000e84:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <main+0x74>)
 8000e86:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000e8a:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <main+0x58>
 8000e8e:	bf00      	nop
 8000e90:	20000620 	.word	0x20000620
 8000e94:	2000060c 	.word	0x2000060c
 8000e98:	200005b0 	.word	0x200005b0
 8000e9c:	20000604 	.word	0x20000604
 8000ea0:	200015dc 	.word	0x200015dc
 8000ea4:	200005f8 	.word	0x200005f8
 8000ea8:	200015d0 	.word	0x200015d0

08000eac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b098      	sub	sp, #96	; 0x60
 8000eb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eb2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000eb6:	2230      	movs	r2, #48	; 0x30
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f003 f943 	bl	8004146 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec0:	f107 031c 	add.w	r3, r7, #28
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ed0:	f107 030c 	add.w	r3, r7, #12
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	4b31      	ldr	r3, [pc, #196]	; (8000fa8 <SystemClock_Config+0xfc>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	4a30      	ldr	r2, [pc, #192]	; (8000fa8 <SystemClock_Config+0xfc>)
 8000ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eec:	6413      	str	r3, [r2, #64]	; 0x40
 8000eee:	4b2e      	ldr	r3, [pc, #184]	; (8000fa8 <SystemClock_Config+0xfc>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000efa:	2300      	movs	r3, #0
 8000efc:	607b      	str	r3, [r7, #4]
 8000efe:	4b2b      	ldr	r3, [pc, #172]	; (8000fac <SystemClock_Config+0x100>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a2a      	ldr	r2, [pc, #168]	; (8000fac <SystemClock_Config+0x100>)
 8000f04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f08:	6013      	str	r3, [r2, #0]
 8000f0a:	4b28      	ldr	r3, [pc, #160]	; (8000fac <SystemClock_Config+0x100>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f16:	2302      	movs	r3, #2
 8000f18:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f1e:	2310      	movs	r3, #16
 8000f20:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f22:	2302      	movs	r3, #2
 8000f24:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f26:	2300      	movs	r3, #0
 8000f28:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f2a:	2310      	movs	r3, #16
 8000f2c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f2e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f32:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f34:	2302      	movs	r3, #2
 8000f36:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f38:	2304      	movs	r3, #4
 8000f3a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f40:	4618      	mov	r0, r3
 8000f42:	f002 f981 	bl	8003248 <HAL_RCC_OscConfig>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000f4c:	f000 f830 	bl	8000fb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f50:	230f      	movs	r3, #15
 8000f52:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f54:	2302      	movs	r3, #2
 8000f56:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000f5c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f60:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f66:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f68:	f107 031c 	add.w	r3, r7, #28
 8000f6c:	2105      	movs	r1, #5
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f002 fbda 	bl	8003728 <HAL_RCC_ClockConfig>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000f7a:	f000 f819 	bl	8000fb0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 384;
 8000f82:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000f86:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	4618      	mov	r0, r3
 8000f92:	f002 fd61 	bl	8003a58 <HAL_RCCEx_PeriphCLKConfig>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000f9c:	f000 f808 	bl	8000fb0 <Error_Handler>
  }
}
 8000fa0:	bf00      	nop
 8000fa2:	3760      	adds	r7, #96	; 0x60
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40007000 	.word	0x40007000

08000fb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
	...

08000fc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	4b10      	ldr	r3, [pc, #64]	; (800100c <HAL_MspInit+0x4c>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fce:	4a0f      	ldr	r2, [pc, #60]	; (800100c <HAL_MspInit+0x4c>)
 8000fd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fd6:	4b0d      	ldr	r3, [pc, #52]	; (800100c <HAL_MspInit+0x4c>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	603b      	str	r3, [r7, #0]
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <HAL_MspInit+0x4c>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fea:	4a08      	ldr	r2, [pc, #32]	; (800100c <HAL_MspInit+0x4c>)
 8000fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_MspInit+0x4c>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffa:	603b      	str	r3, [r7, #0]
 8000ffc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	40023800 	.word	0x40023800

08001010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001022:	e7fe      	b.n	8001022 <HardFault_Handler+0x4>

08001024 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001028:	e7fe      	b.n	8001028 <MemManage_Handler+0x4>

0800102a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800102e:	e7fe      	b.n	800102e <BusFault_Handler+0x4>

08001030 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001034:	e7fe      	b.n	8001034 <UsageFault_Handler+0x4>

08001036 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001064:	f000 f930 	bl	80012c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}

0800106c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8001070:	4802      	ldr	r0, [pc, #8]	; (800107c <DMA1_Stream3_IRQHandler+0x10>)
 8001072:	f000 fdc3 	bl	8001bfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	200004f0 	.word	0x200004f0

08001080 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001084:	4802      	ldr	r0, [pc, #8]	; (8001090 <DMA1_Stream4_IRQHandler+0x10>)
 8001086:	f000 fdb9 	bl	8001bfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000550 	.word	0x20000550

08001094 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
 80010a4:	e00a      	b.n	80010bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010a6:	f3af 8000 	nop.w
 80010aa:	4601      	mov	r1, r0
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	1c5a      	adds	r2, r3, #1
 80010b0:	60ba      	str	r2, [r7, #8]
 80010b2:	b2ca      	uxtb	r2, r1
 80010b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	3301      	adds	r3, #1
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	697a      	ldr	r2, [r7, #20]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	dbf0      	blt.n	80010a6 <_read+0x12>
	}

return len;
 80010c4:	687b      	ldr	r3, [r7, #4]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3718      	adds	r7, #24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <_close>:
	return len;
}
*/

int _close(int file)
{
 80010ce:	b480      	push	{r7}
 80010d0:	b083      	sub	sp, #12
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
	return -1;
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80010da:	4618      	mov	r0, r3
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
 80010ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010f6:	605a      	str	r2, [r3, #4]
	return 0;
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <_isatty>:

int _isatty(int file)
{
 8001106:	b480      	push	{r7}
 8001108:	b083      	sub	sp, #12
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
	return 1;
 800110e:	2301      	movs	r3, #1
}
 8001110:	4618      	mov	r0, r3
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
	return 0;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3714      	adds	r7, #20
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
	...

08001138 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001140:	4a14      	ldr	r2, [pc, #80]	; (8001194 <_sbrk+0x5c>)
 8001142:	4b15      	ldr	r3, [pc, #84]	; (8001198 <_sbrk+0x60>)
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800114c:	4b13      	ldr	r3, [pc, #76]	; (800119c <_sbrk+0x64>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d102      	bne.n	800115a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <_sbrk+0x64>)
 8001156:	4a12      	ldr	r2, [pc, #72]	; (80011a0 <_sbrk+0x68>)
 8001158:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800115a:	4b10      	ldr	r3, [pc, #64]	; (800119c <_sbrk+0x64>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	429a      	cmp	r2, r3
 8001166:	d207      	bcs.n	8001178 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001168:	f002 ffb8 	bl	80040dc <__errno>
 800116c:	4602      	mov	r2, r0
 800116e:	230c      	movs	r3, #12
 8001170:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001172:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001176:	e009      	b.n	800118c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001178:	4b08      	ldr	r3, [pc, #32]	; (800119c <_sbrk+0x64>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800117e:	4b07      	ldr	r3, [pc, #28]	; (800119c <_sbrk+0x64>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4413      	add	r3, r2
 8001186:	4a05      	ldr	r2, [pc, #20]	; (800119c <_sbrk+0x64>)
 8001188:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800118a:	68fb      	ldr	r3, [r7, #12]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20020000 	.word	0x20020000
 8001198:	00000400 	.word	0x00000400
 800119c:	2000008c 	.word	0x2000008c
 80011a0:	200016a0 	.word	0x200016a0

080011a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011a8:	4b08      	ldr	r3, [pc, #32]	; (80011cc <SystemInit+0x28>)
 80011aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ae:	4a07      	ldr	r2, [pc, #28]	; (80011cc <SystemInit+0x28>)
 80011b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011b8:	4b04      	ldr	r3, [pc, #16]	; (80011cc <SystemInit+0x28>)
 80011ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011be:	609a      	str	r2, [r3, #8]
#endif
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001208 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80011d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80011d6:	e003      	b.n	80011e0 <LoopCopyDataInit>

080011d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80011da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80011dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80011de:	3104      	adds	r1, #4

080011e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80011e0:	480b      	ldr	r0, [pc, #44]	; (8001210 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80011e2:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80011e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80011e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80011e8:	d3f6      	bcc.n	80011d8 <CopyDataInit>
  ldr  r2, =_sbss
 80011ea:	4a0b      	ldr	r2, [pc, #44]	; (8001218 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80011ec:	e002      	b.n	80011f4 <LoopFillZerobss>

080011ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80011ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80011f0:	f842 3b04 	str.w	r3, [r2], #4

080011f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80011f4:	4b09      	ldr	r3, [pc, #36]	; (800121c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80011f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80011f8:	d3f9      	bcc.n	80011ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011fa:	f7ff ffd3 	bl	80011a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011fe:	f002 ff73 	bl	80040e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001202:	f7ff fe17 	bl	8000e34 <main>
  bx  lr    
 8001206:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001208:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800120c:	0800506c 	.word	0x0800506c
  ldr  r0, =_sdata
 8001210:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001214:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001218:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 800121c:	2000169c 	.word	0x2000169c

08001220 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001220:	e7fe      	b.n	8001220 <ADC_IRQHandler>
	...

08001224 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001228:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <HAL_Init+0x40>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a0d      	ldr	r2, [pc, #52]	; (8001264 <HAL_Init+0x40>)
 800122e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001232:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001234:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <HAL_Init+0x40>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a0a      	ldr	r2, [pc, #40]	; (8001264 <HAL_Init+0x40>)
 800123a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800123e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001240:	4b08      	ldr	r3, [pc, #32]	; (8001264 <HAL_Init+0x40>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a07      	ldr	r2, [pc, #28]	; (8001264 <HAL_Init+0x40>)
 8001246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800124a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800124c:	2003      	movs	r0, #3
 800124e:	f000 fb8d 	bl	800196c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001252:	2000      	movs	r0, #0
 8001254:	f000 f808 	bl	8001268 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001258:	f7ff feb2 	bl	8000fc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40023c00 	.word	0x40023c00

08001268 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001270:	4b12      	ldr	r3, [pc, #72]	; (80012bc <HAL_InitTick+0x54>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <HAL_InitTick+0x58>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	4619      	mov	r1, r3
 800127a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800127e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001282:	fbb2 f3f3 	udiv	r3, r2, r3
 8001286:	4618      	mov	r0, r3
 8001288:	f000 fba5 	bl	80019d6 <HAL_SYSTICK_Config>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e00e      	b.n	80012b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2b0f      	cmp	r3, #15
 800129a:	d80a      	bhi.n	80012b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800129c:	2200      	movs	r2, #0
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012a4:	f000 fb6d 	bl	8001982 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a8:	4a06      	ldr	r2, [pc, #24]	; (80012c4 <HAL_InitTick+0x5c>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ae:	2300      	movs	r3, #0
 80012b0:	e000      	b.n	80012b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000000 	.word	0x20000000
 80012c0:	20000008 	.word	0x20000008
 80012c4:	20000004 	.word	0x20000004

080012c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <HAL_IncTick+0x20>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_IncTick+0x24>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4413      	add	r3, r2
 80012d8:	4a04      	ldr	r2, [pc, #16]	; (80012ec <HAL_IncTick+0x24>)
 80012da:	6013      	str	r3, [r2, #0]
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	20000008 	.word	0x20000008
 80012ec:	200015ec 	.word	0x200015ec

080012f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  return uwTick;
 80012f4:	4b03      	ldr	r3, [pc, #12]	; (8001304 <HAL_GetTick+0x14>)
 80012f6:	681b      	ldr	r3, [r3, #0]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	200015ec 	.word	0x200015ec

08001308 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001310:	2300      	movs	r3, #0
 8001312:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d101      	bne.n	800131e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e033      	b.n	8001386 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	2b00      	cmp	r3, #0
 8001324:	d109      	bne.n	800133a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff f974 	bl	8000614 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	f003 0310 	and.w	r3, r3, #16
 8001342:	2b00      	cmp	r3, #0
 8001344:	d118      	bne.n	8001378 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800134e:	f023 0302 	bic.w	r3, r3, #2
 8001352:	f043 0202 	orr.w	r2, r3, #2
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f000 f93a 	bl	80015d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f023 0303 	bic.w	r3, r3, #3
 800136e:	f043 0201 	orr.w	r2, r3, #1
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	641a      	str	r2, [r3, #64]	; 0x40
 8001376:	e001      	b.n	800137c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001384:	7bfb      	ldrb	r3, [r7, #15]
}
 8001386:	4618      	mov	r0, r3
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d101      	bne.n	80013ac <HAL_ADC_ConfigChannel+0x1c>
 80013a8:	2302      	movs	r3, #2
 80013aa:	e105      	b.n	80015b8 <HAL_ADC_ConfigChannel+0x228>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2201      	movs	r2, #1
 80013b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b09      	cmp	r3, #9
 80013ba:	d925      	bls.n	8001408 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	68d9      	ldr	r1, [r3, #12]
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	461a      	mov	r2, r3
 80013ca:	4613      	mov	r3, r2
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	4413      	add	r3, r2
 80013d0:	3b1e      	subs	r3, #30
 80013d2:	2207      	movs	r2, #7
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43da      	mvns	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	400a      	ands	r2, r1
 80013e0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	68d9      	ldr	r1, [r3, #12]
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	689a      	ldr	r2, [r3, #8]
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	4618      	mov	r0, r3
 80013f4:	4603      	mov	r3, r0
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	4403      	add	r3, r0
 80013fa:	3b1e      	subs	r3, #30
 80013fc:	409a      	lsls	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	430a      	orrs	r2, r1
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	e022      	b.n	800144e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6919      	ldr	r1, [r3, #16]
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	b29b      	uxth	r3, r3
 8001414:	461a      	mov	r2, r3
 8001416:	4613      	mov	r3, r2
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	4413      	add	r3, r2
 800141c:	2207      	movs	r2, #7
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43da      	mvns	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	400a      	ands	r2, r1
 800142a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6919      	ldr	r1, [r3, #16]
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	689a      	ldr	r2, [r3, #8]
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	b29b      	uxth	r3, r3
 800143c:	4618      	mov	r0, r3
 800143e:	4603      	mov	r3, r0
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	4403      	add	r3, r0
 8001444:	409a      	lsls	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	430a      	orrs	r2, r1
 800144c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2b06      	cmp	r3, #6
 8001454:	d824      	bhi.n	80014a0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685a      	ldr	r2, [r3, #4]
 8001460:	4613      	mov	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4413      	add	r3, r2
 8001466:	3b05      	subs	r3, #5
 8001468:	221f      	movs	r2, #31
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43da      	mvns	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	400a      	ands	r2, r1
 8001476:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	b29b      	uxth	r3, r3
 8001484:	4618      	mov	r0, r3
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685a      	ldr	r2, [r3, #4]
 800148a:	4613      	mov	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4413      	add	r3, r2
 8001490:	3b05      	subs	r3, #5
 8001492:	fa00 f203 	lsl.w	r2, r0, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	430a      	orrs	r2, r1
 800149c:	635a      	str	r2, [r3, #52]	; 0x34
 800149e:	e04c      	b.n	800153a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	2b0c      	cmp	r3, #12
 80014a6:	d824      	bhi.n	80014f2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685a      	ldr	r2, [r3, #4]
 80014b2:	4613      	mov	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	3b23      	subs	r3, #35	; 0x23
 80014ba:	221f      	movs	r2, #31
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	43da      	mvns	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	400a      	ands	r2, r1
 80014c8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	4618      	mov	r0, r3
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685a      	ldr	r2, [r3, #4]
 80014dc:	4613      	mov	r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	3b23      	subs	r3, #35	; 0x23
 80014e4:	fa00 f203 	lsl.w	r2, r0, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	430a      	orrs	r2, r1
 80014ee:	631a      	str	r2, [r3, #48]	; 0x30
 80014f0:	e023      	b.n	800153a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	4613      	mov	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	3b41      	subs	r3, #65	; 0x41
 8001504:	221f      	movs	r2, #31
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43da      	mvns	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	400a      	ands	r2, r1
 8001512:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	b29b      	uxth	r3, r3
 8001520:	4618      	mov	r0, r3
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685a      	ldr	r2, [r3, #4]
 8001526:	4613      	mov	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	3b41      	subs	r3, #65	; 0x41
 800152e:	fa00 f203 	lsl.w	r2, r0, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	430a      	orrs	r2, r1
 8001538:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800153a:	4b22      	ldr	r3, [pc, #136]	; (80015c4 <HAL_ADC_ConfigChannel+0x234>)
 800153c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a21      	ldr	r2, [pc, #132]	; (80015c8 <HAL_ADC_ConfigChannel+0x238>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d109      	bne.n	800155c <HAL_ADC_ConfigChannel+0x1cc>
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2b12      	cmp	r3, #18
 800154e:	d105      	bne.n	800155c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a19      	ldr	r2, [pc, #100]	; (80015c8 <HAL_ADC_ConfigChannel+0x238>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d123      	bne.n	80015ae <HAL_ADC_ConfigChannel+0x21e>
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2b10      	cmp	r3, #16
 800156c:	d003      	beq.n	8001576 <HAL_ADC_ConfigChannel+0x1e6>
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b11      	cmp	r3, #17
 8001574:	d11b      	bne.n	80015ae <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2b10      	cmp	r3, #16
 8001588:	d111      	bne.n	80015ae <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800158a:	4b10      	ldr	r3, [pc, #64]	; (80015cc <HAL_ADC_ConfigChannel+0x23c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a10      	ldr	r2, [pc, #64]	; (80015d0 <HAL_ADC_ConfigChannel+0x240>)
 8001590:	fba2 2303 	umull	r2, r3, r2, r3
 8001594:	0c9a      	lsrs	r2, r3, #18
 8001596:	4613      	mov	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4413      	add	r3, r2
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015a0:	e002      	b.n	80015a8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	3b01      	subs	r3, #1
 80015a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1f9      	bne.n	80015a2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3714      	adds	r7, #20
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	40012300 	.word	0x40012300
 80015c8:	40012000 	.word	0x40012000
 80015cc:	20000000 	.word	0x20000000
 80015d0:	431bde83 	.word	0x431bde83

080015d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015dc:	4b79      	ldr	r3, [pc, #484]	; (80017c4 <ADC_Init+0x1f0>)
 80015de:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	685a      	ldr	r2, [r3, #4]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	431a      	orrs	r2, r3
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001608:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6859      	ldr	r1, [r3, #4]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	691b      	ldr	r3, [r3, #16]
 8001614:	021a      	lsls	r2, r3, #8
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	430a      	orrs	r2, r1
 800161c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	685a      	ldr	r2, [r3, #4]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800162c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6859      	ldr	r1, [r3, #4]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689a      	ldr	r2, [r3, #8]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	430a      	orrs	r2, r1
 800163e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	689a      	ldr	r2, [r3, #8]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800164e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	6899      	ldr	r1, [r3, #8]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	68da      	ldr	r2, [r3, #12]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	430a      	orrs	r2, r1
 8001660:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001666:	4a58      	ldr	r2, [pc, #352]	; (80017c8 <ADC_Init+0x1f4>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d022      	beq.n	80016b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	689a      	ldr	r2, [r3, #8]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800167a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6899      	ldr	r1, [r3, #8]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	430a      	orrs	r2, r1
 800168c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	689a      	ldr	r2, [r3, #8]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800169c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	6899      	ldr	r1, [r3, #8]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	430a      	orrs	r2, r1
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	e00f      	b.n	80016d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	689a      	ldr	r2, [r3, #8]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f022 0202 	bic.w	r2, r2, #2
 80016e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6899      	ldr	r1, [r3, #8]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	7e1b      	ldrb	r3, [r3, #24]
 80016ec:	005a      	lsls	r2, r3, #1
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	430a      	orrs	r2, r1
 80016f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d01b      	beq.n	8001738 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	685a      	ldr	r2, [r3, #4]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800170e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800171e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6859      	ldr	r1, [r3, #4]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172a:	3b01      	subs	r3, #1
 800172c:	035a      	lsls	r2, r3, #13
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	430a      	orrs	r2, r1
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	e007      	b.n	8001748 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001746:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001756:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	3b01      	subs	r3, #1
 8001764:	051a      	lsls	r2, r3, #20
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	430a      	orrs	r2, r1
 800176c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800177c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6899      	ldr	r1, [r3, #8]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800178a:	025a      	lsls	r2, r3, #9
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	430a      	orrs	r2, r1
 8001792:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	689a      	ldr	r2, [r3, #8]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6899      	ldr	r1, [r3, #8]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	695b      	ldr	r3, [r3, #20]
 80017ae:	029a      	lsls	r2, r3, #10
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	430a      	orrs	r2, r1
 80017b6:	609a      	str	r2, [r3, #8]
}
 80017b8:	bf00      	nop
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	40012300 	.word	0x40012300
 80017c8:	0f000001 	.word	0x0f000001

080017cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017dc:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <__NVIC_SetPriorityGrouping+0x44>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017e2:	68ba      	ldr	r2, [r7, #8]
 80017e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017e8:	4013      	ands	r3, r2
 80017ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017fe:	4a04      	ldr	r2, [pc, #16]	; (8001810 <__NVIC_SetPriorityGrouping+0x44>)
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	60d3      	str	r3, [r2, #12]
}
 8001804:	bf00      	nop
 8001806:	3714      	adds	r7, #20
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001818:	4b04      	ldr	r3, [pc, #16]	; (800182c <__NVIC_GetPriorityGrouping+0x18>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	0a1b      	lsrs	r3, r3, #8
 800181e:	f003 0307 	and.w	r3, r3, #7
}
 8001822:	4618      	mov	r0, r3
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800183a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183e:	2b00      	cmp	r3, #0
 8001840:	db0b      	blt.n	800185a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	f003 021f 	and.w	r2, r3, #31
 8001848:	4907      	ldr	r1, [pc, #28]	; (8001868 <__NVIC_EnableIRQ+0x38>)
 800184a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184e:	095b      	lsrs	r3, r3, #5
 8001850:	2001      	movs	r0, #1
 8001852:	fa00 f202 	lsl.w	r2, r0, r2
 8001856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	e000e100 	.word	0xe000e100

0800186c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	6039      	str	r1, [r7, #0]
 8001876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187c:	2b00      	cmp	r3, #0
 800187e:	db0a      	blt.n	8001896 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	b2da      	uxtb	r2, r3
 8001884:	490c      	ldr	r1, [pc, #48]	; (80018b8 <__NVIC_SetPriority+0x4c>)
 8001886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188a:	0112      	lsls	r2, r2, #4
 800188c:	b2d2      	uxtb	r2, r2
 800188e:	440b      	add	r3, r1
 8001890:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001894:	e00a      	b.n	80018ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	b2da      	uxtb	r2, r3
 800189a:	4908      	ldr	r1, [pc, #32]	; (80018bc <__NVIC_SetPriority+0x50>)
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	f003 030f 	and.w	r3, r3, #15
 80018a2:	3b04      	subs	r3, #4
 80018a4:	0112      	lsls	r2, r2, #4
 80018a6:	b2d2      	uxtb	r2, r2
 80018a8:	440b      	add	r3, r1
 80018aa:	761a      	strb	r2, [r3, #24]
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	e000e100 	.word	0xe000e100
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b089      	sub	sp, #36	; 0x24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f1c3 0307 	rsb	r3, r3, #7
 80018da:	2b04      	cmp	r3, #4
 80018dc:	bf28      	it	cs
 80018de:	2304      	movcs	r3, #4
 80018e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	3304      	adds	r3, #4
 80018e6:	2b06      	cmp	r3, #6
 80018e8:	d902      	bls.n	80018f0 <NVIC_EncodePriority+0x30>
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	3b03      	subs	r3, #3
 80018ee:	e000      	b.n	80018f2 <NVIC_EncodePriority+0x32>
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43da      	mvns	r2, r3
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	401a      	ands	r2, r3
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001908:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	fa01 f303 	lsl.w	r3, r1, r3
 8001912:	43d9      	mvns	r1, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001918:	4313      	orrs	r3, r2
         );
}
 800191a:	4618      	mov	r0, r3
 800191c:	3724      	adds	r7, #36	; 0x24
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
	...

08001928 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3b01      	subs	r3, #1
 8001934:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001938:	d301      	bcc.n	800193e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800193a:	2301      	movs	r3, #1
 800193c:	e00f      	b.n	800195e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800193e:	4a0a      	ldr	r2, [pc, #40]	; (8001968 <SysTick_Config+0x40>)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3b01      	subs	r3, #1
 8001944:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001946:	210f      	movs	r1, #15
 8001948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800194c:	f7ff ff8e 	bl	800186c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001950:	4b05      	ldr	r3, [pc, #20]	; (8001968 <SysTick_Config+0x40>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001956:	4b04      	ldr	r3, [pc, #16]	; (8001968 <SysTick_Config+0x40>)
 8001958:	2207      	movs	r2, #7
 800195a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	e000e010 	.word	0xe000e010

0800196c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f7ff ff29 	bl	80017cc <__NVIC_SetPriorityGrouping>
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001982:	b580      	push	{r7, lr}
 8001984:	b086      	sub	sp, #24
 8001986:	af00      	add	r7, sp, #0
 8001988:	4603      	mov	r3, r0
 800198a:	60b9      	str	r1, [r7, #8]
 800198c:	607a      	str	r2, [r7, #4]
 800198e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001994:	f7ff ff3e 	bl	8001814 <__NVIC_GetPriorityGrouping>
 8001998:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	68b9      	ldr	r1, [r7, #8]
 800199e:	6978      	ldr	r0, [r7, #20]
 80019a0:	f7ff ff8e 	bl	80018c0 <NVIC_EncodePriority>
 80019a4:	4602      	mov	r2, r0
 80019a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019aa:	4611      	mov	r1, r2
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff ff5d 	bl	800186c <__NVIC_SetPriority>
}
 80019b2:	bf00      	nop
 80019b4:	3718      	adds	r7, #24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
 80019c0:	4603      	mov	r3, r0
 80019c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff ff31 	bl	8001830 <__NVIC_EnableIRQ>
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b082      	sub	sp, #8
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7ff ffa2 	bl	8001928 <SysTick_Config>
 80019e4:	4603      	mov	r3, r0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
	...

080019f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80019fc:	f7ff fc78 	bl	80012f0 <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d101      	bne.n	8001a0c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e099      	b.n	8001b40 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2202      	movs	r2, #2
 8001a18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f022 0201 	bic.w	r2, r2, #1
 8001a2a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a2c:	e00f      	b.n	8001a4e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a2e:	f7ff fc5f 	bl	80012f0 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b05      	cmp	r3, #5
 8001a3a:	d908      	bls.n	8001a4e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2220      	movs	r2, #32
 8001a40:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2203      	movs	r2, #3
 8001a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e078      	b.n	8001b40 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1e8      	bne.n	8001a2e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a64:	697a      	ldr	r2, [r7, #20]
 8001a66:	4b38      	ldr	r3, [pc, #224]	; (8001b48 <HAL_DMA_Init+0x158>)
 8001a68:	4013      	ands	r3, r2
 8001a6a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a1b      	ldr	r3, [r3, #32]
 8001a98:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa4:	2b04      	cmp	r3, #4
 8001aa6:	d107      	bne.n	8001ab8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	f023 0307 	bic.w	r3, r3, #7
 8001ace:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad4:	697a      	ldr	r2, [r7, #20]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	d117      	bne.n	8001b12 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d00e      	beq.n	8001b12 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 fa6f 	bl	8001fd8 <DMA_CheckFifoParam>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d008      	beq.n	8001b12 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2240      	movs	r2, #64	; 0x40
 8001b04:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e016      	b.n	8001b40 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	697a      	ldr	r2, [r7, #20]
 8001b18:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 fa26 	bl	8001f6c <DMA_CalcBaseAndBitshift>
 8001b20:	4603      	mov	r3, r0
 8001b22:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b28:	223f      	movs	r2, #63	; 0x3f
 8001b2a:	409a      	lsls	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	f010803f 	.word	0xf010803f

08001b4c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
 8001b58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b62:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d101      	bne.n	8001b72 <HAL_DMA_Start_IT+0x26>
 8001b6e:	2302      	movs	r3, #2
 8001b70:	e040      	b.n	8001bf4 <HAL_DMA_Start_IT+0xa8>
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2201      	movs	r2, #1
 8001b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d12f      	bne.n	8001be6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2202      	movs	r2, #2
 8001b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2200      	movs	r2, #0
 8001b92:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	68b9      	ldr	r1, [r7, #8]
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	f000 f9b8 	bl	8001f10 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba4:	223f      	movs	r2, #63	; 0x3f
 8001ba6:	409a      	lsls	r2, r3
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f042 0216 	orr.w	r2, r2, #22
 8001bba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d007      	beq.n	8001bd4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f042 0208 	orr.w	r2, r2, #8
 8001bd2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f042 0201 	orr.w	r2, r2, #1
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	e005      	b.n	8001bf2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3718      	adds	r7, #24
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c08:	4b92      	ldr	r3, [pc, #584]	; (8001e54 <HAL_DMA_IRQHandler+0x258>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a92      	ldr	r2, [pc, #584]	; (8001e58 <HAL_DMA_IRQHandler+0x25c>)
 8001c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c12:	0a9b      	lsrs	r3, r3, #10
 8001c14:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c26:	2208      	movs	r2, #8
 8001c28:	409a      	lsls	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d01a      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d013      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 0204 	bic.w	r2, r2, #4
 8001c4e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c54:	2208      	movs	r2, #8
 8001c56:	409a      	lsls	r2, r3
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c60:	f043 0201 	orr.w	r2, r3, #1
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	409a      	lsls	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4013      	ands	r3, r2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d012      	beq.n	8001c9e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00b      	beq.n	8001c9e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	409a      	lsls	r2, r3
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c96:	f043 0202 	orr.w	r2, r3, #2
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca2:	2204      	movs	r2, #4
 8001ca4:	409a      	lsls	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d012      	beq.n	8001cd4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d00b      	beq.n	8001cd4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc0:	2204      	movs	r2, #4
 8001cc2:	409a      	lsls	r2, r3
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ccc:	f043 0204 	orr.w	r2, r3, #4
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd8:	2210      	movs	r2, #16
 8001cda:	409a      	lsls	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d043      	beq.n	8001d6c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0308 	and.w	r3, r3, #8
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d03c      	beq.n	8001d6c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf6:	2210      	movs	r2, #16
 8001cf8:	409a      	lsls	r2, r3
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d018      	beq.n	8001d3e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d108      	bne.n	8001d2c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d024      	beq.n	8001d6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	4798      	blx	r3
 8001d2a:	e01f      	b.n	8001d6c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d01b      	beq.n	8001d6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	4798      	blx	r3
 8001d3c:	e016      	b.n	8001d6c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d107      	bne.n	8001d5c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 0208 	bic.w	r2, r2, #8
 8001d5a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d70:	2220      	movs	r2, #32
 8001d72:	409a      	lsls	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4013      	ands	r3, r2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f000 808e 	beq.w	8001e9a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0310 	and.w	r3, r3, #16
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f000 8086 	beq.w	8001e9a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d92:	2220      	movs	r2, #32
 8001d94:	409a      	lsls	r2, r3
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b05      	cmp	r3, #5
 8001da4:	d136      	bne.n	8001e14 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 0216 	bic.w	r2, r2, #22
 8001db4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	695a      	ldr	r2, [r3, #20]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dc4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d103      	bne.n	8001dd6 <HAL_DMA_IRQHandler+0x1da>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d007      	beq.n	8001de6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 0208 	bic.w	r2, r2, #8
 8001de4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dea:	223f      	movs	r2, #63	; 0x3f
 8001dec:	409a      	lsls	r2, r3
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d07d      	beq.n	8001f06 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	4798      	blx	r3
        }
        return;
 8001e12:	e078      	b.n	8001f06 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d01c      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d108      	bne.n	8001e42 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d030      	beq.n	8001e9a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	4798      	blx	r3
 8001e40:	e02b      	b.n	8001e9a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d027      	beq.n	8001e9a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	4798      	blx	r3
 8001e52:	e022      	b.n	8001e9a <HAL_DMA_IRQHandler+0x29e>
 8001e54:	20000000 	.word	0x20000000
 8001e58:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d10f      	bne.n	8001e8a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f022 0210 	bic.w	r2, r2, #16
 8001e78:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d032      	beq.n	8001f08 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d022      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2205      	movs	r2, #5
 8001eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f022 0201 	bic.w	r2, r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	60bb      	str	r3, [r7, #8]
 8001ecc:	697a      	ldr	r2, [r7, #20]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d307      	bcc.n	8001ee2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1f2      	bne.n	8001ec6 <HAL_DMA_IRQHandler+0x2ca>
 8001ee0:	e000      	b.n	8001ee4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001ee2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d005      	beq.n	8001f08 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	4798      	blx	r3
 8001f04:	e000      	b.n	8001f08 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001f06:	bf00      	nop
    }
  }
}
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop

08001f10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
 8001f1c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f2c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	2b40      	cmp	r3, #64	; 0x40
 8001f3c:	d108      	bne.n	8001f50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68ba      	ldr	r2, [r7, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f4e:	e007      	b.n	8001f60 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68ba      	ldr	r2, [r7, #8]
 8001f56:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	60da      	str	r2, [r3, #12]
}
 8001f60:	bf00      	nop
 8001f62:	3714      	adds	r7, #20
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	3b10      	subs	r3, #16
 8001f7c:	4a14      	ldr	r2, [pc, #80]	; (8001fd0 <DMA_CalcBaseAndBitshift+0x64>)
 8001f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f82:	091b      	lsrs	r3, r3, #4
 8001f84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f86:	4a13      	ldr	r2, [pc, #76]	; (8001fd4 <DMA_CalcBaseAndBitshift+0x68>)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2b03      	cmp	r3, #3
 8001f98:	d909      	bls.n	8001fae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001fa2:	f023 0303 	bic.w	r3, r3, #3
 8001fa6:	1d1a      	adds	r2, r3, #4
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	659a      	str	r2, [r3, #88]	; 0x58
 8001fac:	e007      	b.n	8001fbe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001fb6:	f023 0303 	bic.w	r3, r3, #3
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	aaaaaaab 	.word	0xaaaaaaab
 8001fd4:	08004fbc 	.word	0x08004fbc

08001fd8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d11f      	bne.n	8002032 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	2b03      	cmp	r3, #3
 8001ff6:	d855      	bhi.n	80020a4 <DMA_CheckFifoParam+0xcc>
 8001ff8:	a201      	add	r2, pc, #4	; (adr r2, 8002000 <DMA_CheckFifoParam+0x28>)
 8001ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ffe:	bf00      	nop
 8002000:	08002011 	.word	0x08002011
 8002004:	08002023 	.word	0x08002023
 8002008:	08002011 	.word	0x08002011
 800200c:	080020a5 	.word	0x080020a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002014:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d045      	beq.n	80020a8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002020:	e042      	b.n	80020a8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002026:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800202a:	d13f      	bne.n	80020ac <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002030:	e03c      	b.n	80020ac <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800203a:	d121      	bne.n	8002080 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	2b03      	cmp	r3, #3
 8002040:	d836      	bhi.n	80020b0 <DMA_CheckFifoParam+0xd8>
 8002042:	a201      	add	r2, pc, #4	; (adr r2, 8002048 <DMA_CheckFifoParam+0x70>)
 8002044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002048:	08002059 	.word	0x08002059
 800204c:	0800205f 	.word	0x0800205f
 8002050:	08002059 	.word	0x08002059
 8002054:	08002071 	.word	0x08002071
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	73fb      	strb	r3, [r7, #15]
      break;
 800205c:	e02f      	b.n	80020be <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002062:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d024      	beq.n	80020b4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800206e:	e021      	b.n	80020b4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002074:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002078:	d11e      	bne.n	80020b8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800207e:	e01b      	b.n	80020b8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	2b02      	cmp	r3, #2
 8002084:	d902      	bls.n	800208c <DMA_CheckFifoParam+0xb4>
 8002086:	2b03      	cmp	r3, #3
 8002088:	d003      	beq.n	8002092 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800208a:	e018      	b.n	80020be <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	73fb      	strb	r3, [r7, #15]
      break;
 8002090:	e015      	b.n	80020be <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002096:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00e      	beq.n	80020bc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	73fb      	strb	r3, [r7, #15]
      break;
 80020a2:	e00b      	b.n	80020bc <DMA_CheckFifoParam+0xe4>
      break;
 80020a4:	bf00      	nop
 80020a6:	e00a      	b.n	80020be <DMA_CheckFifoParam+0xe6>
      break;
 80020a8:	bf00      	nop
 80020aa:	e008      	b.n	80020be <DMA_CheckFifoParam+0xe6>
      break;
 80020ac:	bf00      	nop
 80020ae:	e006      	b.n	80020be <DMA_CheckFifoParam+0xe6>
      break;
 80020b0:	bf00      	nop
 80020b2:	e004      	b.n	80020be <DMA_CheckFifoParam+0xe6>
      break;
 80020b4:	bf00      	nop
 80020b6:	e002      	b.n	80020be <DMA_CheckFifoParam+0xe6>
      break;   
 80020b8:	bf00      	nop
 80020ba:	e000      	b.n	80020be <DMA_CheckFifoParam+0xe6>
      break;
 80020bc:	bf00      	nop
    }
  } 
  
  return status; 
 80020be:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b089      	sub	sp, #36	; 0x24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020da:	2300      	movs	r3, #0
 80020dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020de:	2300      	movs	r3, #0
 80020e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020e2:	2300      	movs	r3, #0
 80020e4:	61fb      	str	r3, [r7, #28]
 80020e6:	e16b      	b.n	80023c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020e8:	2201      	movs	r2, #1
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	4013      	ands	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	429a      	cmp	r2, r3
 8002102:	f040 815a 	bne.w	80023ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d00b      	beq.n	8002126 <HAL_GPIO_Init+0x5a>
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b02      	cmp	r3, #2
 8002114:	d007      	beq.n	8002126 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800211a:	2b11      	cmp	r3, #17
 800211c:	d003      	beq.n	8002126 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b12      	cmp	r3, #18
 8002124:	d130      	bne.n	8002188 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	2203      	movs	r2, #3
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	43db      	mvns	r3, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4013      	ands	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	68da      	ldr	r2, [r3, #12]
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4313      	orrs	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800215c:	2201      	movs	r2, #1
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	43db      	mvns	r3, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4013      	ands	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	091b      	lsrs	r3, r3, #4
 8002172:	f003 0201 	and.w	r2, r3, #1
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4313      	orrs	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	2203      	movs	r2, #3
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4013      	ands	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d003      	beq.n	80021c8 <HAL_GPIO_Init+0xfc>
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	2b12      	cmp	r3, #18
 80021c6:	d123      	bne.n	8002210 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	08da      	lsrs	r2, r3, #3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3208      	adds	r2, #8
 80021d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	220f      	movs	r2, #15
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4013      	ands	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	691a      	ldr	r2, [r3, #16]
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	08da      	lsrs	r2, r3, #3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3208      	adds	r2, #8
 800220a:	69b9      	ldr	r1, [r7, #24]
 800220c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	2203      	movs	r2, #3
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4013      	ands	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f003 0203 	and.w	r2, r3, #3
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4313      	orrs	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224c:	2b00      	cmp	r3, #0
 800224e:	f000 80b4 	beq.w	80023ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	60fb      	str	r3, [r7, #12]
 8002256:	4b5f      	ldr	r3, [pc, #380]	; (80023d4 <HAL_GPIO_Init+0x308>)
 8002258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225a:	4a5e      	ldr	r2, [pc, #376]	; (80023d4 <HAL_GPIO_Init+0x308>)
 800225c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002260:	6453      	str	r3, [r2, #68]	; 0x44
 8002262:	4b5c      	ldr	r3, [pc, #368]	; (80023d4 <HAL_GPIO_Init+0x308>)
 8002264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800226e:	4a5a      	ldr	r2, [pc, #360]	; (80023d8 <HAL_GPIO_Init+0x30c>)
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	089b      	lsrs	r3, r3, #2
 8002274:	3302      	adds	r3, #2
 8002276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800227a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	f003 0303 	and.w	r3, r3, #3
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	220f      	movs	r2, #15
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43db      	mvns	r3, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4013      	ands	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a51      	ldr	r2, [pc, #324]	; (80023dc <HAL_GPIO_Init+0x310>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d02b      	beq.n	80022f2 <HAL_GPIO_Init+0x226>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a50      	ldr	r2, [pc, #320]	; (80023e0 <HAL_GPIO_Init+0x314>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d025      	beq.n	80022ee <HAL_GPIO_Init+0x222>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a4f      	ldr	r2, [pc, #316]	; (80023e4 <HAL_GPIO_Init+0x318>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d01f      	beq.n	80022ea <HAL_GPIO_Init+0x21e>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a4e      	ldr	r2, [pc, #312]	; (80023e8 <HAL_GPIO_Init+0x31c>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d019      	beq.n	80022e6 <HAL_GPIO_Init+0x21a>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a4d      	ldr	r2, [pc, #308]	; (80023ec <HAL_GPIO_Init+0x320>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d013      	beq.n	80022e2 <HAL_GPIO_Init+0x216>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a4c      	ldr	r2, [pc, #304]	; (80023f0 <HAL_GPIO_Init+0x324>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d00d      	beq.n	80022de <HAL_GPIO_Init+0x212>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a4b      	ldr	r2, [pc, #300]	; (80023f4 <HAL_GPIO_Init+0x328>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d007      	beq.n	80022da <HAL_GPIO_Init+0x20e>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a4a      	ldr	r2, [pc, #296]	; (80023f8 <HAL_GPIO_Init+0x32c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d101      	bne.n	80022d6 <HAL_GPIO_Init+0x20a>
 80022d2:	2307      	movs	r3, #7
 80022d4:	e00e      	b.n	80022f4 <HAL_GPIO_Init+0x228>
 80022d6:	2308      	movs	r3, #8
 80022d8:	e00c      	b.n	80022f4 <HAL_GPIO_Init+0x228>
 80022da:	2306      	movs	r3, #6
 80022dc:	e00a      	b.n	80022f4 <HAL_GPIO_Init+0x228>
 80022de:	2305      	movs	r3, #5
 80022e0:	e008      	b.n	80022f4 <HAL_GPIO_Init+0x228>
 80022e2:	2304      	movs	r3, #4
 80022e4:	e006      	b.n	80022f4 <HAL_GPIO_Init+0x228>
 80022e6:	2303      	movs	r3, #3
 80022e8:	e004      	b.n	80022f4 <HAL_GPIO_Init+0x228>
 80022ea:	2302      	movs	r3, #2
 80022ec:	e002      	b.n	80022f4 <HAL_GPIO_Init+0x228>
 80022ee:	2301      	movs	r3, #1
 80022f0:	e000      	b.n	80022f4 <HAL_GPIO_Init+0x228>
 80022f2:	2300      	movs	r3, #0
 80022f4:	69fa      	ldr	r2, [r7, #28]
 80022f6:	f002 0203 	and.w	r2, r2, #3
 80022fa:	0092      	lsls	r2, r2, #2
 80022fc:	4093      	lsls	r3, r2
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4313      	orrs	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002304:	4934      	ldr	r1, [pc, #208]	; (80023d8 <HAL_GPIO_Init+0x30c>)
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	089b      	lsrs	r3, r3, #2
 800230a:	3302      	adds	r3, #2
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002312:	4b3a      	ldr	r3, [pc, #232]	; (80023fc <HAL_GPIO_Init+0x330>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	43db      	mvns	r3, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4013      	ands	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	4313      	orrs	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002336:	4a31      	ldr	r2, [pc, #196]	; (80023fc <HAL_GPIO_Init+0x330>)
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800233c:	4b2f      	ldr	r3, [pc, #188]	; (80023fc <HAL_GPIO_Init+0x330>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	43db      	mvns	r3, r3
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4013      	ands	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d003      	beq.n	8002360 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	4313      	orrs	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002360:	4a26      	ldr	r2, [pc, #152]	; (80023fc <HAL_GPIO_Init+0x330>)
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002366:	4b25      	ldr	r3, [pc, #148]	; (80023fc <HAL_GPIO_Init+0x330>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	43db      	mvns	r3, r3
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	4013      	ands	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d003      	beq.n	800238a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	4313      	orrs	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800238a:	4a1c      	ldr	r2, [pc, #112]	; (80023fc <HAL_GPIO_Init+0x330>)
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002390:	4b1a      	ldr	r3, [pc, #104]	; (80023fc <HAL_GPIO_Init+0x330>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	43db      	mvns	r3, r3
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4013      	ands	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d003      	beq.n	80023b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023b4:	4a11      	ldr	r2, [pc, #68]	; (80023fc <HAL_GPIO_Init+0x330>)
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	3301      	adds	r3, #1
 80023be:	61fb      	str	r3, [r7, #28]
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	2b0f      	cmp	r3, #15
 80023c4:	f67f ae90 	bls.w	80020e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023c8:	bf00      	nop
 80023ca:	3724      	adds	r7, #36	; 0x24
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	40023800 	.word	0x40023800
 80023d8:	40013800 	.word	0x40013800
 80023dc:	40020000 	.word	0x40020000
 80023e0:	40020400 	.word	0x40020400
 80023e4:	40020800 	.word	0x40020800
 80023e8:	40020c00 	.word	0x40020c00
 80023ec:	40021000 	.word	0x40021000
 80023f0:	40021400 	.word	0x40021400
 80023f4:	40021800 	.word	0x40021800
 80023f8:	40021c00 	.word	0x40021c00
 80023fc:	40013c00 	.word	0x40013c00

08002400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	807b      	strh	r3, [r7, #2]
 800240c:	4613      	mov	r3, r2
 800240e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002410:	787b      	ldrb	r3, [r7, #1]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002416:	887a      	ldrh	r2, [r7, #2]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800241c:	e003      	b.n	8002426 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800241e:	887b      	ldrh	r3, [r7, #2]
 8002420:	041a      	lsls	r2, r3, #16
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	619a      	str	r2, [r3, #24]
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
	...

08002434 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b088      	sub	sp, #32
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e128      	b.n	8002698 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d109      	bne.n	8002466 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a90      	ldr	r2, [pc, #576]	; (80026a0 <HAL_I2S_Init+0x26c>)
 800245e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f7fe f9fd 	bl	8000860 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2202      	movs	r2, #2
 800246a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	69db      	ldr	r3, [r3, #28]
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	6812      	ldr	r2, [r2, #0]
 8002478:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800247c:	f023 030f 	bic.w	r3, r3, #15
 8002480:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2202      	movs	r2, #2
 8002488:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	2b02      	cmp	r3, #2
 8002490:	d060      	beq.n	8002554 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d102      	bne.n	80024a0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800249a:	2310      	movs	r3, #16
 800249c:	617b      	str	r3, [r7, #20]
 800249e:	e001      	b.n	80024a4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80024a0:	2320      	movs	r3, #32
 80024a2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	2b20      	cmp	r3, #32
 80024aa:	d802      	bhi.n	80024b2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80024b2:	2001      	movs	r0, #1
 80024b4:	f001 fbb2 	bl	8003c1c <HAL_RCCEx_GetPeriphCLKFreq>
 80024b8:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024c2:	d125      	bne.n	8002510 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d010      	beq.n	80024ee <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80024d6:	4613      	mov	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4413      	add	r3, r2
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	461a      	mov	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e8:	3305      	adds	r3, #5
 80024ea:	613b      	str	r3, [r7, #16]
 80024ec:	e01f      	b.n	800252e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80024f8:	4613      	mov	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	4413      	add	r3, r2
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	461a      	mov	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	fbb2 f3f3 	udiv	r3, r2, r3
 800250a:	3305      	adds	r3, #5
 800250c:	613b      	str	r3, [r7, #16]
 800250e:	e00e      	b.n	800252e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	fbb2 f2f3 	udiv	r2, r2, r3
 8002518:	4613      	mov	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4413      	add	r3, r2
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	461a      	mov	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	fbb2 f3f3 	udiv	r3, r2, r3
 800252a:	3305      	adds	r3, #5
 800252c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	4a5c      	ldr	r2, [pc, #368]	; (80026a4 <HAL_I2S_Init+0x270>)
 8002532:	fba2 2303 	umull	r2, r3, r2, r3
 8002536:	08db      	lsrs	r3, r3, #3
 8002538:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	085b      	lsrs	r3, r3, #1
 800254a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	021b      	lsls	r3, r3, #8
 8002550:	61bb      	str	r3, [r7, #24]
 8002552:	e003      	b.n	800255c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002554:	2302      	movs	r3, #2
 8002556:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002558:	2300      	movs	r3, #0
 800255a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d902      	bls.n	8002568 <HAL_I2S_Init+0x134>
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	2bff      	cmp	r3, #255	; 0xff
 8002566:	d907      	bls.n	8002578 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256c:	f043 0210 	orr.w	r2, r3, #16
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e08f      	b.n	8002698 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691a      	ldr	r2, [r3, #16]
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	ea42 0103 	orr.w	r1, r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	69fa      	ldr	r2, [r7, #28]
 8002588:	430a      	orrs	r2, r1
 800258a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002596:	f023 030f 	bic.w	r3, r3, #15
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6851      	ldr	r1, [r2, #4]
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	6892      	ldr	r2, [r2, #8]
 80025a2:	4311      	orrs	r1, r2
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	68d2      	ldr	r2, [r2, #12]
 80025a8:	4311      	orrs	r1, r2
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	6992      	ldr	r2, [r2, #24]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	431a      	orrs	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025ba:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d161      	bne.n	8002688 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a38      	ldr	r2, [pc, #224]	; (80026a8 <HAL_I2S_Init+0x274>)
 80025c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a37      	ldr	r2, [pc, #220]	; (80026ac <HAL_I2S_Init+0x278>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d101      	bne.n	80025d8 <HAL_I2S_Init+0x1a4>
 80025d4:	4b36      	ldr	r3, [pc, #216]	; (80026b0 <HAL_I2S_Init+0x27c>)
 80025d6:	e001      	b.n	80025dc <HAL_I2S_Init+0x1a8>
 80025d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	6812      	ldr	r2, [r2, #0]
 80025e2:	4932      	ldr	r1, [pc, #200]	; (80026ac <HAL_I2S_Init+0x278>)
 80025e4:	428a      	cmp	r2, r1
 80025e6:	d101      	bne.n	80025ec <HAL_I2S_Init+0x1b8>
 80025e8:	4a31      	ldr	r2, [pc, #196]	; (80026b0 <HAL_I2S_Init+0x27c>)
 80025ea:	e001      	b.n	80025f0 <HAL_I2S_Init+0x1bc>
 80025ec:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80025f0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80025f4:	f023 030f 	bic.w	r3, r3, #15
 80025f8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a2b      	ldr	r2, [pc, #172]	; (80026ac <HAL_I2S_Init+0x278>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d101      	bne.n	8002608 <HAL_I2S_Init+0x1d4>
 8002604:	4b2a      	ldr	r3, [pc, #168]	; (80026b0 <HAL_I2S_Init+0x27c>)
 8002606:	e001      	b.n	800260c <HAL_I2S_Init+0x1d8>
 8002608:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800260c:	2202      	movs	r2, #2
 800260e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a25      	ldr	r2, [pc, #148]	; (80026ac <HAL_I2S_Init+0x278>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d101      	bne.n	800261e <HAL_I2S_Init+0x1ea>
 800261a:	4b25      	ldr	r3, [pc, #148]	; (80026b0 <HAL_I2S_Init+0x27c>)
 800261c:	e001      	b.n	8002622 <HAL_I2S_Init+0x1ee>
 800261e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800262e:	d003      	beq.n	8002638 <HAL_I2S_Init+0x204>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d103      	bne.n	8002640 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002638:	f44f 7380 	mov.w	r3, #256	; 0x100
 800263c:	613b      	str	r3, [r7, #16]
 800263e:	e001      	b.n	8002644 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002640:	2300      	movs	r3, #0
 8002642:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	b299      	uxth	r1, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800265a:	4303      	orrs	r3, r0
 800265c:	b29b      	uxth	r3, r3
 800265e:	430b      	orrs	r3, r1
 8002660:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002662:	4313      	orrs	r3, r2
 8002664:	b29a      	uxth	r2, r3
 8002666:	897b      	ldrh	r3, [r7, #10]
 8002668:	4313      	orrs	r3, r2
 800266a:	b29b      	uxth	r3, r3
 800266c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002670:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a0d      	ldr	r2, [pc, #52]	; (80026ac <HAL_I2S_Init+0x278>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d101      	bne.n	8002680 <HAL_I2S_Init+0x24c>
 800267c:	4b0c      	ldr	r3, [pc, #48]	; (80026b0 <HAL_I2S_Init+0x27c>)
 800267e:	e001      	b.n	8002684 <HAL_I2S_Init+0x250>
 8002680:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002684:	897a      	ldrh	r2, [r7, #10]
 8002686:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3720      	adds	r7, #32
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	080027ab 	.word	0x080027ab
 80026a4:	cccccccd 	.word	0xcccccccd
 80026a8:	08002bd5 	.word	0x08002bd5
 80026ac:	40003800 	.word	0x40003800
 80026b0:	40003400 	.word	0x40003400

080026b4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	881a      	ldrh	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002708:	1c9a      	adds	r2, r3, #2
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002712:	b29b      	uxth	r3, r3
 8002714:	3b01      	subs	r3, #1
 8002716:	b29a      	uxth	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002720:	b29b      	uxth	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10e      	bne.n	8002744 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002734:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7ff ffb8 	bl	80026b4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002744:	bf00      	nop
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68da      	ldr	r2, [r3, #12]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275e:	b292      	uxth	r2, r2
 8002760:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002766:	1c9a      	adds	r2, r3, #2
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002770:	b29b      	uxth	r3, r3
 8002772:	3b01      	subs	r3, #1
 8002774:	b29a      	uxth	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800277e:	b29b      	uxth	r3, r3
 8002780:	2b00      	cmp	r3, #0
 8002782:	d10e      	bne.n	80027a2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002792:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f7ff ff93 	bl	80026c8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80027a2:	bf00      	nop
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b086      	sub	sp, #24
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	d13a      	bne.n	800283c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d109      	bne.n	80027e4 <I2S_IRQHandler+0x3a>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027da:	2b40      	cmp	r3, #64	; 0x40
 80027dc:	d102      	bne.n	80027e4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7ff ffb4 	bl	800274c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ea:	2b40      	cmp	r3, #64	; 0x40
 80027ec:	d126      	bne.n	800283c <I2S_IRQHandler+0x92>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f003 0320 	and.w	r3, r3, #32
 80027f8:	2b20      	cmp	r3, #32
 80027fa:	d11f      	bne.n	800283c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800280a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800280c:	2300      	movs	r3, #0
 800280e:	613b      	str	r3, [r7, #16]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	613b      	str	r3, [r7, #16]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	613b      	str	r3, [r7, #16]
 8002820:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282e:	f043 0202 	orr.w	r2, r3, #2
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f7ff ff50 	bl	80026dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b03      	cmp	r3, #3
 8002846:	d136      	bne.n	80028b6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b02      	cmp	r3, #2
 8002850:	d109      	bne.n	8002866 <I2S_IRQHandler+0xbc>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800285c:	2b80      	cmp	r3, #128	; 0x80
 800285e:	d102      	bne.n	8002866 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f7ff ff45 	bl	80026f0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	f003 0308 	and.w	r3, r3, #8
 800286c:	2b08      	cmp	r3, #8
 800286e:	d122      	bne.n	80028b6 <I2S_IRQHandler+0x10c>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f003 0320 	and.w	r3, r3, #32
 800287a:	2b20      	cmp	r3, #32
 800287c:	d11b      	bne.n	80028b6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800288c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800288e:	2300      	movs	r3, #0
 8002890:	60fb      	str	r3, [r7, #12]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	60fb      	str	r3, [r7, #12]
 800289a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a8:	f043 0204 	orr.w	r2, r3, #4
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7ff ff13 	bl	80026dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80028b6:	bf00      	nop
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
	...

080028c0 <HAL_I2SEx_TransmitReceive_DMA>:
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pTxData, uint16_t *pRxData,
                                                uint16_t Size)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b088      	sub	sp, #32
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
 80028cc:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 80028d2:	2300      	movs	r3, #0
 80028d4:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80028d6:	2300      	movs	r3, #0
 80028d8:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d002      	beq.n	80028ec <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 80028e6:	2302      	movs	r3, #2
 80028e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80028ea:	e160      	b.n	8002bae <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d005      	beq.n	80028fe <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d002      	beq.n	80028fe <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 80028f8:	887b      	ldrh	r3, [r7, #2]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e15a      	b.n	8002bb8 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b01      	cmp	r3, #1
 800290c:	d101      	bne.n	8002912 <HAL_I2SEx_TransmitReceive_DMA+0x52>
 800290e:	2302      	movs	r3, #2
 8002910:	e152      	b.n	8002bb8 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 800291a:	68ba      	ldr	r2, [r7, #8]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	69db      	ldr	r3, [r3, #28]
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	2b03      	cmp	r3, #3
 8002936:	d002      	beq.n	800293e <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	2b05      	cmp	r3, #5
 800293c:	d114      	bne.n	8002968 <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 800293e:	887b      	ldrh	r3, [r7, #2]
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	b29a      	uxth	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002948:	887b      	ldrh	r3, [r7, #2]
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	b29a      	uxth	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 8002952:	887b      	ldrh	r3, [r7, #2]
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	b29a      	uxth	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 800295c:	887b      	ldrh	r3, [r7, #2]
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	b29a      	uxth	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	865a      	strh	r2, [r3, #50]	; 0x32
 8002966:	e00b      	b.n	8002980 <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	887a      	ldrh	r2, [r7, #2]
 800296c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	887a      	ldrh	r2, [r7, #2]
 8002972:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	887a      	ldrh	r2, [r7, #2]
 8002978:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	887a      	ldrh	r2, [r7, #2]
 800297e:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2205      	movs	r2, #5
 800298a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002992:	4a8b      	ldr	r2, [pc, #556]	; (8002bc0 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8002994:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800299a:	4a8a      	ldr	r2, [pc, #552]	; (8002bc4 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 800299c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a2:	4a89      	ldr	r2, [pc, #548]	; (8002bc8 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 80029a4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback  = I2SEx_TxRxDMAHalfCplt;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029aa:	4a85      	ldr	r2, [pc, #532]	; (8002bc0 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 80029ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b2:	4a84      	ldr	r2, [pc, #528]	; (8002bc4 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 80029b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ba:	4a83      	ldr	r2, [pc, #524]	; (8002bc8 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 80029bc:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	69db      	ldr	r3, [r3, #28]
 80029c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029c8:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029d0:	d002      	beq.n	80029d8 <HAL_I2SEx_TransmitReceive_DMA+0x118>
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d16b      	bne.n	8002ab0 <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 80029d8:	1d3b      	adds	r3, r7, #4
 80029da:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a79      	ldr	r2, [pc, #484]	; (8002bcc <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d101      	bne.n	80029ee <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 80029ea:	4b79      	ldr	r3, [pc, #484]	; (8002bd0 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80029ec:	e001      	b.n	80029f2 <HAL_I2SEx_TransmitReceive_DMA+0x132>
 80029ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029f2:	330c      	adds	r3, #12
 80029f4:	4619      	mov	r1, r3
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	f7ff f8a4 	bl	8001b4c <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a70      	ldr	r2, [pc, #448]	; (8002bcc <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d101      	bne.n	8002a12 <HAL_I2SEx_TransmitReceive_DMA+0x152>
 8002a0e:	4b70      	ldr	r3, [pc, #448]	; (8002bd0 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002a10:	e001      	b.n	8002a16 <HAL_I2SEx_TransmitReceive_DMA+0x156>
 8002a12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a16:	685a      	ldr	r2, [r3, #4]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	496b      	ldr	r1, [pc, #428]	; (8002bcc <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002a1e:	428b      	cmp	r3, r1
 8002a20:	d101      	bne.n	8002a26 <HAL_I2SEx_TransmitReceive_DMA+0x166>
 8002a22:	4b6b      	ldr	r3, [pc, #428]	; (8002bd0 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002a24:	e001      	b.n	8002a2a <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 8002a26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a2a:	f042 0201 	orr.w	r2, r2, #1
 8002a2e:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8002a30:	f107 0308 	add.w	r3, r7, #8
 8002a34:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	6819      	ldr	r1, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	330c      	adds	r3, #12
 8002a44:	461a      	mov	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	f7ff f87e 	bl	8001b4c <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f042 0202 	orr.w	r2, r2, #2
 8002a5e:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a6e:	f000 809e 	beq.w	8002bae <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a55      	ldr	r2, [pc, #340]	; (8002bcc <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d101      	bne.n	8002a80 <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 8002a7c:	4b54      	ldr	r3, [pc, #336]	; (8002bd0 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002a7e:	e001      	b.n	8002a84 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 8002a80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a84:	69da      	ldr	r2, [r3, #28]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4950      	ldr	r1, [pc, #320]	; (8002bcc <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002a8c:	428b      	cmp	r3, r1
 8002a8e:	d101      	bne.n	8002a94 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 8002a90:	4b4f      	ldr	r3, [pc, #316]	; (8002bd0 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002a92:	e001      	b.n	8002a98 <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 8002a94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a9c:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	69da      	ldr	r2, [r3, #28]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002aac:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002aae:	e07e      	b.n	8002bae <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002abe:	d10a      	bne.n	8002ad6 <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	613b      	str	r3, [r7, #16]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	613b      	str	r3, [r7, #16]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	613b      	str	r3, [r7, #16]
 8002ad4:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8002ad6:	f107 0308 	add.w	r3, r7, #8
 8002ada:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	6819      	ldr	r1, [r3, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a38      	ldr	r2, [pc, #224]	; (8002bcc <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d101      	bne.n	8002af2 <HAL_I2SEx_TransmitReceive_DMA+0x232>
 8002aee:	4b38      	ldr	r3, [pc, #224]	; (8002bd0 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002af0:	e001      	b.n	8002af6 <HAL_I2SEx_TransmitReceive_DMA+0x236>
 8002af2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002af6:	330c      	adds	r3, #12
 8002af8:	461a      	mov	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	f7ff f824 	bl	8001b4c <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a30      	ldr	r2, [pc, #192]	; (8002bcc <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d101      	bne.n	8002b12 <HAL_I2SEx_TransmitReceive_DMA+0x252>
 8002b0e:	4b30      	ldr	r3, [pc, #192]	; (8002bd0 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002b10:	e001      	b.n	8002b16 <HAL_I2SEx_TransmitReceive_DMA+0x256>
 8002b12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	492b      	ldr	r1, [pc, #172]	; (8002bcc <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002b1e:	428b      	cmp	r3, r1
 8002b20:	d101      	bne.n	8002b26 <HAL_I2SEx_TransmitReceive_DMA+0x266>
 8002b22:	4b2b      	ldr	r3, [pc, #172]	; (8002bd0 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002b24:	e001      	b.n	8002b2a <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 8002b26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b2a:	f042 0202 	orr.w	r2, r2, #2
 8002b2e:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8002b30:	1d3b      	adds	r3, r7, #4
 8002b32:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	330c      	adds	r3, #12
 8002b3e:	4619      	mov	r1, r3
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	f7fe ffff 	bl	8001b4c <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f042 0201 	orr.w	r2, r2, #1
 8002b5c:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	69db      	ldr	r3, [r3, #28]
 8002b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b6c:	d01e      	beq.n	8002bac <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a16      	ldr	r2, [pc, #88]	; (8002bcc <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d101      	bne.n	8002b7c <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 8002b78:	4b15      	ldr	r3, [pc, #84]	; (8002bd0 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002b7a:	e001      	b.n	8002b80 <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 8002b7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b80:	69da      	ldr	r2, [r3, #28]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4911      	ldr	r1, [pc, #68]	; (8002bcc <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002b88:	428b      	cmp	r3, r1
 8002b8a:	d101      	bne.n	8002b90 <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 8002b8c:	4b10      	ldr	r3, [pc, #64]	; (8002bd0 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002b8e:	e001      	b.n	8002b94 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 8002b90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b98:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	69da      	ldr	r2, [r3, #28]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ba8:	61da      	str	r2, [r3, #28]
 8002baa:	e000      	b.n	8002bae <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 8002bac:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 8002bb6:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3720      	adds	r7, #32
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	08002e7d 	.word	0x08002e7d
 8002bc4:	08002e99 	.word	0x08002e99
 8002bc8:	08002fd1 	.word	0x08002fd1
 8002bcc:	40003800 	.word	0x40003800
 8002bd0:	40003400 	.word	0x40003400

08002bd4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b088      	sub	sp, #32
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4aa2      	ldr	r2, [pc, #648]	; (8002e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d101      	bne.n	8002bf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002bee:	4ba2      	ldr	r3, [pc, #648]	; (8002e78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002bf0:	e001      	b.n	8002bf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002bf2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a9b      	ldr	r2, [pc, #620]	; (8002e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d101      	bne.n	8002c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002c0c:	4b9a      	ldr	r3, [pc, #616]	; (8002e78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c0e:	e001      	b.n	8002c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002c10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c20:	d004      	beq.n	8002c2c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f040 8099 	bne.w	8002d5e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d107      	bne.n	8002c46 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d002      	beq.n	8002c46 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 fa05 	bl	8003050 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d107      	bne.n	8002c60 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d002      	beq.n	8002c60 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 faa8 	bl	80031b0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c66:	2b40      	cmp	r3, #64	; 0x40
 8002c68:	d13a      	bne.n	8002ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	f003 0320 	and.w	r3, r3, #32
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d035      	beq.n	8002ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a7e      	ldr	r2, [pc, #504]	; (8002e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d101      	bne.n	8002c82 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002c7e:	4b7e      	ldr	r3, [pc, #504]	; (8002e78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c80:	e001      	b.n	8002c86 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002c82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4979      	ldr	r1, [pc, #484]	; (8002e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c8e:	428b      	cmp	r3, r1
 8002c90:	d101      	bne.n	8002c96 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002c92:	4b79      	ldr	r3, [pc, #484]	; (8002e78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c94:	e001      	b.n	8002c9a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002c96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c9a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c9e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002cae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd2:	f043 0202 	orr.w	r2, r3, #2
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f7ff fcfe 	bl	80026dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	f003 0308 	and.w	r3, r3, #8
 8002ce6:	2b08      	cmp	r3, #8
 8002ce8:	f040 80be 	bne.w	8002e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	f003 0320 	and.w	r3, r3, #32
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f000 80b8 	beq.w	8002e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d06:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a59      	ldr	r2, [pc, #356]	; (8002e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d101      	bne.n	8002d16 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002d12:	4b59      	ldr	r3, [pc, #356]	; (8002e78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d14:	e001      	b.n	8002d1a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002d16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4954      	ldr	r1, [pc, #336]	; (8002e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d22:	428b      	cmp	r3, r1
 8002d24:	d101      	bne.n	8002d2a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002d26:	4b54      	ldr	r3, [pc, #336]	; (8002e78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d28:	e001      	b.n	8002d2e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002d2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d2e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d32:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002d34:	2300      	movs	r3, #0
 8002d36:	60bb      	str	r3, [r7, #8]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	60bb      	str	r3, [r7, #8]
 8002d40:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4e:	f043 0204 	orr.w	r2, r3, #4
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7ff fcc0 	bl	80026dc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d5c:	e084      	b.n	8002e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d107      	bne.n	8002d78 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d002      	beq.n	8002d78 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f99e 	bl	80030b4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d107      	bne.n	8002d92 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d002      	beq.n	8002d92 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 f9dd 	bl	800314c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d98:	2b40      	cmp	r3, #64	; 0x40
 8002d9a:	d12f      	bne.n	8002dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	f003 0320 	and.w	r3, r3, #32
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d02a      	beq.n	8002dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	685a      	ldr	r2, [r3, #4]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002db4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a2e      	ldr	r2, [pc, #184]	; (8002e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d101      	bne.n	8002dc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002dc0:	4b2d      	ldr	r3, [pc, #180]	; (8002e78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002dc2:	e001      	b.n	8002dc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002dc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4929      	ldr	r1, [pc, #164]	; (8002e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002dd0:	428b      	cmp	r3, r1
 8002dd2:	d101      	bne.n	8002dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002dd4:	4b28      	ldr	r3, [pc, #160]	; (8002e78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002dd6:	e001      	b.n	8002ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002dd8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ddc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002de0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dee:	f043 0202 	orr.w	r2, r3, #2
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7ff fc70 	bl	80026dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	f003 0308 	and.w	r3, r3, #8
 8002e02:	2b08      	cmp	r3, #8
 8002e04:	d131      	bne.n	8002e6a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	f003 0320 	and.w	r3, r3, #32
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d02c      	beq.n	8002e6a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a17      	ldr	r2, [pc, #92]	; (8002e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d101      	bne.n	8002e1e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002e1a:	4b17      	ldr	r3, [pc, #92]	; (8002e78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002e1c:	e001      	b.n	8002e22 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002e1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4912      	ldr	r1, [pc, #72]	; (8002e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002e2a:	428b      	cmp	r3, r1
 8002e2c:	d101      	bne.n	8002e32 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8002e2e:	4b12      	ldr	r3, [pc, #72]	; (8002e78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002e30:	e001      	b.n	8002e36 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002e32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e36:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e3a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e4a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e58:	f043 0204 	orr.w	r2, r3, #4
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f7ff fc3b 	bl	80026dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e66:	e000      	b.n	8002e6a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002e68:	bf00      	nop
}
 8002e6a:	bf00      	nop
 8002e6c:	3720      	adds	r7, #32
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	40003800 	.word	0x40003800
 8002e78:	40003400 	.word	0x40003400

08002e7c <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e88:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f7fd ff60 	bl	8000d50 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002e90:	bf00      	nop
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea4:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f040 8084 	bne.w	8002fb8 <I2SEx_TxRxDMACplt+0x120>
  {
    if (hi2s->hdmarx == hdma)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d13c      	bne.n	8002f34 <I2SEx_TxRxDMACplt+0x9c>
    {
      /* Disable Rx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	69db      	ldr	r3, [r3, #28]
 8002ec0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ec8:	d006      	beq.n	8002ed8 <I2SEx_TxRxDMACplt+0x40>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	69db      	ldr	r3, [r3, #28]
 8002ed0:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d116      	bne.n	8002f06 <I2SEx_TxRxDMACplt+0x6e>
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a3a      	ldr	r2, [pc, #232]	; (8002fc8 <I2SEx_TxRxDMACplt+0x130>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d101      	bne.n	8002ee6 <I2SEx_TxRxDMACplt+0x4e>
 8002ee2:	4b3a      	ldr	r3, [pc, #232]	; (8002fcc <I2SEx_TxRxDMACplt+0x134>)
 8002ee4:	e001      	b.n	8002eea <I2SEx_TxRxDMACplt+0x52>
 8002ee6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4935      	ldr	r1, [pc, #212]	; (8002fc8 <I2SEx_TxRxDMACplt+0x130>)
 8002ef2:	428b      	cmp	r3, r1
 8002ef4:	d101      	bne.n	8002efa <I2SEx_TxRxDMACplt+0x62>
 8002ef6:	4b35      	ldr	r3, [pc, #212]	; (8002fcc <I2SEx_TxRxDMACplt+0x134>)
 8002ef8:	e001      	b.n	8002efe <I2SEx_TxRxDMACplt+0x66>
 8002efa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002efe:	f022 0201 	bic.w	r2, r2, #1
 8002f02:	605a      	str	r2, [r3, #4]
 8002f04:	e007      	b.n	8002f16 <I2SEx_TxRxDMACplt+0x7e>
      }
      else
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 0201 	bic.w	r2, r2, #1
 8002f14:	605a      	str	r2, [r3, #4]
      }

      hi2s->RxXferCount = 0U;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	865a      	strh	r2, [r3, #50]	; 0x32

      if (hi2s->TxXferCount == 0U)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d106      	bne.n	8002f34 <I2SEx_TxRxDMACplt+0x9c>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f7fd ff4a 	bl	8000dc8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }

    if (hi2s->hdmatx == hdma)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d13c      	bne.n	8002fb8 <I2SEx_TxRxDMACplt+0x120>
    {
      /* Disable Tx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	69db      	ldr	r3, [r3, #28]
 8002f44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f4c:	d006      	beq.n	8002f5c <I2SEx_TxRxDMACplt+0xc4>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d108      	bne.n	8002f6e <I2SEx_TxRxDMACplt+0xd6>
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0202 	bic.w	r2, r2, #2
 8002f6a:	605a      	str	r2, [r3, #4]
 8002f6c:	e015      	b.n	8002f9a <I2SEx_TxRxDMACplt+0x102>
      }
      else
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a15      	ldr	r2, [pc, #84]	; (8002fc8 <I2SEx_TxRxDMACplt+0x130>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d101      	bne.n	8002f7c <I2SEx_TxRxDMACplt+0xe4>
 8002f78:	4b14      	ldr	r3, [pc, #80]	; (8002fcc <I2SEx_TxRxDMACplt+0x134>)
 8002f7a:	e001      	b.n	8002f80 <I2SEx_TxRxDMACplt+0xe8>
 8002f7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4910      	ldr	r1, [pc, #64]	; (8002fc8 <I2SEx_TxRxDMACplt+0x130>)
 8002f88:	428b      	cmp	r3, r1
 8002f8a:	d101      	bne.n	8002f90 <I2SEx_TxRxDMACplt+0xf8>
 8002f8c:	4b0f      	ldr	r3, [pc, #60]	; (8002fcc <I2SEx_TxRxDMACplt+0x134>)
 8002f8e:	e001      	b.n	8002f94 <I2SEx_TxRxDMACplt+0xfc>
 8002f90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f94:	f022 0202 	bic.w	r2, r2, #2
 8002f98:	605a      	str	r2, [r3, #4]
      }

      hi2s->TxXferCount = 0U;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2s->RxXferCount == 0U)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d106      	bne.n	8002fb8 <I2SEx_TxRxDMACplt+0x120>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f7fd ff08 	bl	8000dc8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }
  }
  // Fixes bug - https://github.com/STMicroelectronics/STM32CubeF4/issues/8
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f7fd ff05 	bl	8000dc8 <HAL_I2SEx_TxRxCpltCallback>

}
 8002fbe:	bf00      	nop
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40003800 	.word	0x40003800
 8002fcc:	40003400 	.word	0x40003400

08002fd0 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fdc:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0203 	bic.w	r2, r2, #3
 8002fec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a15      	ldr	r2, [pc, #84]	; (8003048 <I2SEx_TxRxDMAError+0x78>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d101      	bne.n	8002ffc <I2SEx_TxRxDMAError+0x2c>
 8002ff8:	4b14      	ldr	r3, [pc, #80]	; (800304c <I2SEx_TxRxDMAError+0x7c>)
 8002ffa:	e001      	b.n	8003000 <I2SEx_TxRxDMAError+0x30>
 8002ffc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4910      	ldr	r1, [pc, #64]	; (8003048 <I2SEx_TxRxDMAError+0x78>)
 8003008:	428b      	cmp	r3, r1
 800300a:	d101      	bne.n	8003010 <I2SEx_TxRxDMAError+0x40>
 800300c:	4b0f      	ldr	r3, [pc, #60]	; (800304c <I2SEx_TxRxDMAError+0x7c>)
 800300e:	e001      	b.n	8003014 <I2SEx_TxRxDMAError+0x44>
 8003010:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003014:	f022 0203 	bic.w	r2, r2, #3
 8003018:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003032:	f043 0208 	orr.w	r2, r3, #8
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f7ff fb4e 	bl	80026dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003040:	bf00      	nop
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40003800 	.word	0x40003800
 800304c:	40003400 	.word	0x40003400

08003050 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305c:	1c99      	adds	r1, r3, #2
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	6251      	str	r1, [r2, #36]	; 0x24
 8003062:	881a      	ldrh	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800306e:	b29b      	uxth	r3, r3
 8003070:	3b01      	subs	r3, #1
 8003072:	b29a      	uxth	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307c:	b29b      	uxth	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d113      	bne.n	80030aa <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003090:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003096:	b29b      	uxth	r3, r3
 8003098:	2b00      	cmp	r3, #0
 800309a:	d106      	bne.n	80030aa <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f7fd fe8f 	bl	8000dc8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80030aa:	bf00      	nop
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
	...

080030b4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c0:	1c99      	adds	r1, r3, #2
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6251      	str	r1, [r2, #36]	; 0x24
 80030c6:	8819      	ldrh	r1, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a1d      	ldr	r2, [pc, #116]	; (8003144 <I2SEx_TxISR_I2SExt+0x90>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d101      	bne.n	80030d6 <I2SEx_TxISR_I2SExt+0x22>
 80030d2:	4b1d      	ldr	r3, [pc, #116]	; (8003148 <I2SEx_TxISR_I2SExt+0x94>)
 80030d4:	e001      	b.n	80030da <I2SEx_TxISR_I2SExt+0x26>
 80030d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030da:	460a      	mov	r2, r1
 80030dc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	3b01      	subs	r3, #1
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d121      	bne.n	800313a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a12      	ldr	r2, [pc, #72]	; (8003144 <I2SEx_TxISR_I2SExt+0x90>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d101      	bne.n	8003104 <I2SEx_TxISR_I2SExt+0x50>
 8003100:	4b11      	ldr	r3, [pc, #68]	; (8003148 <I2SEx_TxISR_I2SExt+0x94>)
 8003102:	e001      	b.n	8003108 <I2SEx_TxISR_I2SExt+0x54>
 8003104:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	490d      	ldr	r1, [pc, #52]	; (8003144 <I2SEx_TxISR_I2SExt+0x90>)
 8003110:	428b      	cmp	r3, r1
 8003112:	d101      	bne.n	8003118 <I2SEx_TxISR_I2SExt+0x64>
 8003114:	4b0c      	ldr	r3, [pc, #48]	; (8003148 <I2SEx_TxISR_I2SExt+0x94>)
 8003116:	e001      	b.n	800311c <I2SEx_TxISR_I2SExt+0x68>
 8003118:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800311c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003120:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003126:	b29b      	uxth	r3, r3
 8003128:	2b00      	cmp	r3, #0
 800312a:	d106      	bne.n	800313a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f7fd fe47 	bl	8000dc8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800313a:	bf00      	nop
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	40003800 	.word	0x40003800
 8003148:	40003400 	.word	0x40003400

0800314c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68d8      	ldr	r0, [r3, #12]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315e:	1c99      	adds	r1, r3, #2
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003164:	b282      	uxth	r2, r0
 8003166:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800316c:	b29b      	uxth	r3, r3
 800316e:	3b01      	subs	r3, #1
 8003170:	b29a      	uxth	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800317a:	b29b      	uxth	r3, r3
 800317c:	2b00      	cmp	r3, #0
 800317e:	d113      	bne.n	80031a8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800318e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003194:	b29b      	uxth	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d106      	bne.n	80031a8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f7fd fe10 	bl	8000dc8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80031a8:	bf00      	nop
 80031aa:	3708      	adds	r7, #8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a20      	ldr	r2, [pc, #128]	; (8003240 <I2SEx_RxISR_I2SExt+0x90>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d101      	bne.n	80031c6 <I2SEx_RxISR_I2SExt+0x16>
 80031c2:	4b20      	ldr	r3, [pc, #128]	; (8003244 <I2SEx_RxISR_I2SExt+0x94>)
 80031c4:	e001      	b.n	80031ca <I2SEx_RxISR_I2SExt+0x1a>
 80031c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031ca:	68d8      	ldr	r0, [r3, #12]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d0:	1c99      	adds	r1, r3, #2
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80031d6:	b282      	uxth	r2, r0
 80031d8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80031de:	b29b      	uxth	r3, r3
 80031e0:	3b01      	subs	r3, #1
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d121      	bne.n	8003236 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a12      	ldr	r2, [pc, #72]	; (8003240 <I2SEx_RxISR_I2SExt+0x90>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d101      	bne.n	8003200 <I2SEx_RxISR_I2SExt+0x50>
 80031fc:	4b11      	ldr	r3, [pc, #68]	; (8003244 <I2SEx_RxISR_I2SExt+0x94>)
 80031fe:	e001      	b.n	8003204 <I2SEx_RxISR_I2SExt+0x54>
 8003200:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	490d      	ldr	r1, [pc, #52]	; (8003240 <I2SEx_RxISR_I2SExt+0x90>)
 800320c:	428b      	cmp	r3, r1
 800320e:	d101      	bne.n	8003214 <I2SEx_RxISR_I2SExt+0x64>
 8003210:	4b0c      	ldr	r3, [pc, #48]	; (8003244 <I2SEx_RxISR_I2SExt+0x94>)
 8003212:	e001      	b.n	8003218 <I2SEx_RxISR_I2SExt+0x68>
 8003214:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003218:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800321c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003222:	b29b      	uxth	r3, r3
 8003224:	2b00      	cmp	r3, #0
 8003226:	d106      	bne.n	8003236 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f7fd fdc9 	bl	8000dc8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003236:	bf00      	nop
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40003800 	.word	0x40003800
 8003244:	40003400 	.word	0x40003400

08003248 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e25b      	b.n	8003712 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d075      	beq.n	8003352 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003266:	4ba3      	ldr	r3, [pc, #652]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 030c 	and.w	r3, r3, #12
 800326e:	2b04      	cmp	r3, #4
 8003270:	d00c      	beq.n	800328c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003272:	4ba0      	ldr	r3, [pc, #640]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800327a:	2b08      	cmp	r3, #8
 800327c:	d112      	bne.n	80032a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800327e:	4b9d      	ldr	r3, [pc, #628]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003286:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800328a:	d10b      	bne.n	80032a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800328c:	4b99      	ldr	r3, [pc, #612]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d05b      	beq.n	8003350 <HAL_RCC_OscConfig+0x108>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d157      	bne.n	8003350 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e236      	b.n	8003712 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ac:	d106      	bne.n	80032bc <HAL_RCC_OscConfig+0x74>
 80032ae:	4b91      	ldr	r3, [pc, #580]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a90      	ldr	r2, [pc, #576]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 80032b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032b8:	6013      	str	r3, [r2, #0]
 80032ba:	e01d      	b.n	80032f8 <HAL_RCC_OscConfig+0xb0>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032c4:	d10c      	bne.n	80032e0 <HAL_RCC_OscConfig+0x98>
 80032c6:	4b8b      	ldr	r3, [pc, #556]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a8a      	ldr	r2, [pc, #552]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 80032cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032d0:	6013      	str	r3, [r2, #0]
 80032d2:	4b88      	ldr	r3, [pc, #544]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a87      	ldr	r2, [pc, #540]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 80032d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032dc:	6013      	str	r3, [r2, #0]
 80032de:	e00b      	b.n	80032f8 <HAL_RCC_OscConfig+0xb0>
 80032e0:	4b84      	ldr	r3, [pc, #528]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a83      	ldr	r2, [pc, #524]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 80032e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ea:	6013      	str	r3, [r2, #0]
 80032ec:	4b81      	ldr	r3, [pc, #516]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a80      	ldr	r2, [pc, #512]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 80032f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d013      	beq.n	8003328 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003300:	f7fd fff6 	bl	80012f0 <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003306:	e008      	b.n	800331a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003308:	f7fd fff2 	bl	80012f0 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b64      	cmp	r3, #100	; 0x64
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e1fb      	b.n	8003712 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800331a:	4b76      	ldr	r3, [pc, #472]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d0f0      	beq.n	8003308 <HAL_RCC_OscConfig+0xc0>
 8003326:	e014      	b.n	8003352 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003328:	f7fd ffe2 	bl	80012f0 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003330:	f7fd ffde 	bl	80012f0 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b64      	cmp	r3, #100	; 0x64
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e1e7      	b.n	8003712 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003342:	4b6c      	ldr	r3, [pc, #432]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1f0      	bne.n	8003330 <HAL_RCC_OscConfig+0xe8>
 800334e:	e000      	b.n	8003352 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d063      	beq.n	8003426 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800335e:	4b65      	ldr	r3, [pc, #404]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 030c 	and.w	r3, r3, #12
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00b      	beq.n	8003382 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800336a:	4b62      	ldr	r3, [pc, #392]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003372:	2b08      	cmp	r3, #8
 8003374:	d11c      	bne.n	80033b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003376:	4b5f      	ldr	r3, [pc, #380]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d116      	bne.n	80033b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003382:	4b5c      	ldr	r3, [pc, #368]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d005      	beq.n	800339a <HAL_RCC_OscConfig+0x152>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d001      	beq.n	800339a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e1bb      	b.n	8003712 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800339a:	4b56      	ldr	r3, [pc, #344]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	4952      	ldr	r1, [pc, #328]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ae:	e03a      	b.n	8003426 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d020      	beq.n	80033fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033b8:	4b4f      	ldr	r3, [pc, #316]	; (80034f8 <HAL_RCC_OscConfig+0x2b0>)
 80033ba:	2201      	movs	r2, #1
 80033bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033be:	f7fd ff97 	bl	80012f0 <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c4:	e008      	b.n	80033d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033c6:	f7fd ff93 	bl	80012f0 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e19c      	b.n	8003712 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d8:	4b46      	ldr	r3, [pc, #280]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d0f0      	beq.n	80033c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e4:	4b43      	ldr	r3, [pc, #268]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	4940      	ldr	r1, [pc, #256]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	600b      	str	r3, [r1, #0]
 80033f8:	e015      	b.n	8003426 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033fa:	4b3f      	ldr	r3, [pc, #252]	; (80034f8 <HAL_RCC_OscConfig+0x2b0>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003400:	f7fd ff76 	bl	80012f0 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003408:	f7fd ff72 	bl	80012f0 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e17b      	b.n	8003712 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800341a:	4b36      	ldr	r3, [pc, #216]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1f0      	bne.n	8003408 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0308 	and.w	r3, r3, #8
 800342e:	2b00      	cmp	r3, #0
 8003430:	d030      	beq.n	8003494 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d016      	beq.n	8003468 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800343a:	4b30      	ldr	r3, [pc, #192]	; (80034fc <HAL_RCC_OscConfig+0x2b4>)
 800343c:	2201      	movs	r2, #1
 800343e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003440:	f7fd ff56 	bl	80012f0 <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003448:	f7fd ff52 	bl	80012f0 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e15b      	b.n	8003712 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800345a:	4b26      	ldr	r3, [pc, #152]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 800345c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d0f0      	beq.n	8003448 <HAL_RCC_OscConfig+0x200>
 8003466:	e015      	b.n	8003494 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003468:	4b24      	ldr	r3, [pc, #144]	; (80034fc <HAL_RCC_OscConfig+0x2b4>)
 800346a:	2200      	movs	r2, #0
 800346c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800346e:	f7fd ff3f 	bl	80012f0 <HAL_GetTick>
 8003472:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003474:	e008      	b.n	8003488 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003476:	f7fd ff3b 	bl	80012f0 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e144      	b.n	8003712 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003488:	4b1a      	ldr	r3, [pc, #104]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 800348a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1f0      	bne.n	8003476 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0304 	and.w	r3, r3, #4
 800349c:	2b00      	cmp	r3, #0
 800349e:	f000 80a0 	beq.w	80035e2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034a2:	2300      	movs	r3, #0
 80034a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034a6:	4b13      	ldr	r3, [pc, #76]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10f      	bne.n	80034d2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034b2:	2300      	movs	r3, #0
 80034b4:	60bb      	str	r3, [r7, #8]
 80034b6:	4b0f      	ldr	r3, [pc, #60]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	4a0e      	ldr	r2, [pc, #56]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 80034bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034c0:	6413      	str	r3, [r2, #64]	; 0x40
 80034c2:	4b0c      	ldr	r3, [pc, #48]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ca:	60bb      	str	r3, [r7, #8]
 80034cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034ce:	2301      	movs	r3, #1
 80034d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d2:	4b0b      	ldr	r3, [pc, #44]	; (8003500 <HAL_RCC_OscConfig+0x2b8>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d121      	bne.n	8003522 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034de:	4b08      	ldr	r3, [pc, #32]	; (8003500 <HAL_RCC_OscConfig+0x2b8>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a07      	ldr	r2, [pc, #28]	; (8003500 <HAL_RCC_OscConfig+0x2b8>)
 80034e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ea:	f7fd ff01 	bl	80012f0 <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f0:	e011      	b.n	8003516 <HAL_RCC_OscConfig+0x2ce>
 80034f2:	bf00      	nop
 80034f4:	40023800 	.word	0x40023800
 80034f8:	42470000 	.word	0x42470000
 80034fc:	42470e80 	.word	0x42470e80
 8003500:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003504:	f7fd fef4 	bl	80012f0 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e0fd      	b.n	8003712 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003516:	4b81      	ldr	r3, [pc, #516]	; (800371c <HAL_RCC_OscConfig+0x4d4>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351e:	2b00      	cmp	r3, #0
 8003520:	d0f0      	beq.n	8003504 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d106      	bne.n	8003538 <HAL_RCC_OscConfig+0x2f0>
 800352a:	4b7d      	ldr	r3, [pc, #500]	; (8003720 <HAL_RCC_OscConfig+0x4d8>)
 800352c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352e:	4a7c      	ldr	r2, [pc, #496]	; (8003720 <HAL_RCC_OscConfig+0x4d8>)
 8003530:	f043 0301 	orr.w	r3, r3, #1
 8003534:	6713      	str	r3, [r2, #112]	; 0x70
 8003536:	e01c      	b.n	8003572 <HAL_RCC_OscConfig+0x32a>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	2b05      	cmp	r3, #5
 800353e:	d10c      	bne.n	800355a <HAL_RCC_OscConfig+0x312>
 8003540:	4b77      	ldr	r3, [pc, #476]	; (8003720 <HAL_RCC_OscConfig+0x4d8>)
 8003542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003544:	4a76      	ldr	r2, [pc, #472]	; (8003720 <HAL_RCC_OscConfig+0x4d8>)
 8003546:	f043 0304 	orr.w	r3, r3, #4
 800354a:	6713      	str	r3, [r2, #112]	; 0x70
 800354c:	4b74      	ldr	r3, [pc, #464]	; (8003720 <HAL_RCC_OscConfig+0x4d8>)
 800354e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003550:	4a73      	ldr	r2, [pc, #460]	; (8003720 <HAL_RCC_OscConfig+0x4d8>)
 8003552:	f043 0301 	orr.w	r3, r3, #1
 8003556:	6713      	str	r3, [r2, #112]	; 0x70
 8003558:	e00b      	b.n	8003572 <HAL_RCC_OscConfig+0x32a>
 800355a:	4b71      	ldr	r3, [pc, #452]	; (8003720 <HAL_RCC_OscConfig+0x4d8>)
 800355c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355e:	4a70      	ldr	r2, [pc, #448]	; (8003720 <HAL_RCC_OscConfig+0x4d8>)
 8003560:	f023 0301 	bic.w	r3, r3, #1
 8003564:	6713      	str	r3, [r2, #112]	; 0x70
 8003566:	4b6e      	ldr	r3, [pc, #440]	; (8003720 <HAL_RCC_OscConfig+0x4d8>)
 8003568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356a:	4a6d      	ldr	r2, [pc, #436]	; (8003720 <HAL_RCC_OscConfig+0x4d8>)
 800356c:	f023 0304 	bic.w	r3, r3, #4
 8003570:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d015      	beq.n	80035a6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800357a:	f7fd feb9 	bl	80012f0 <HAL_GetTick>
 800357e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003580:	e00a      	b.n	8003598 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003582:	f7fd feb5 	bl	80012f0 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003590:	4293      	cmp	r3, r2
 8003592:	d901      	bls.n	8003598 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e0bc      	b.n	8003712 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003598:	4b61      	ldr	r3, [pc, #388]	; (8003720 <HAL_RCC_OscConfig+0x4d8>)
 800359a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d0ee      	beq.n	8003582 <HAL_RCC_OscConfig+0x33a>
 80035a4:	e014      	b.n	80035d0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035a6:	f7fd fea3 	bl	80012f0 <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ac:	e00a      	b.n	80035c4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035ae:	f7fd fe9f 	bl	80012f0 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035bc:	4293      	cmp	r3, r2
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e0a6      	b.n	8003712 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035c4:	4b56      	ldr	r3, [pc, #344]	; (8003720 <HAL_RCC_OscConfig+0x4d8>)
 80035c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1ee      	bne.n	80035ae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035d0:	7dfb      	ldrb	r3, [r7, #23]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d105      	bne.n	80035e2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035d6:	4b52      	ldr	r3, [pc, #328]	; (8003720 <HAL_RCC_OscConfig+0x4d8>)
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	4a51      	ldr	r2, [pc, #324]	; (8003720 <HAL_RCC_OscConfig+0x4d8>)
 80035dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f000 8092 	beq.w	8003710 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035ec:	4b4c      	ldr	r3, [pc, #304]	; (8003720 <HAL_RCC_OscConfig+0x4d8>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f003 030c 	and.w	r3, r3, #12
 80035f4:	2b08      	cmp	r3, #8
 80035f6:	d05c      	beq.n	80036b2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d141      	bne.n	8003684 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003600:	4b48      	ldr	r3, [pc, #288]	; (8003724 <HAL_RCC_OscConfig+0x4dc>)
 8003602:	2200      	movs	r2, #0
 8003604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003606:	f7fd fe73 	bl	80012f0 <HAL_GetTick>
 800360a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800360c:	e008      	b.n	8003620 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800360e:	f7fd fe6f 	bl	80012f0 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e078      	b.n	8003712 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003620:	4b3f      	ldr	r3, [pc, #252]	; (8003720 <HAL_RCC_OscConfig+0x4d8>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1f0      	bne.n	800360e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	69da      	ldr	r2, [r3, #28]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	431a      	orrs	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	019b      	lsls	r3, r3, #6
 800363c:	431a      	orrs	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003642:	085b      	lsrs	r3, r3, #1
 8003644:	3b01      	subs	r3, #1
 8003646:	041b      	lsls	r3, r3, #16
 8003648:	431a      	orrs	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364e:	061b      	lsls	r3, r3, #24
 8003650:	4933      	ldr	r1, [pc, #204]	; (8003720 <HAL_RCC_OscConfig+0x4d8>)
 8003652:	4313      	orrs	r3, r2
 8003654:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003656:	4b33      	ldr	r3, [pc, #204]	; (8003724 <HAL_RCC_OscConfig+0x4dc>)
 8003658:	2201      	movs	r2, #1
 800365a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365c:	f7fd fe48 	bl	80012f0 <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003664:	f7fd fe44 	bl	80012f0 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e04d      	b.n	8003712 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003676:	4b2a      	ldr	r3, [pc, #168]	; (8003720 <HAL_RCC_OscConfig+0x4d8>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d0f0      	beq.n	8003664 <HAL_RCC_OscConfig+0x41c>
 8003682:	e045      	b.n	8003710 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003684:	4b27      	ldr	r3, [pc, #156]	; (8003724 <HAL_RCC_OscConfig+0x4dc>)
 8003686:	2200      	movs	r2, #0
 8003688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800368a:	f7fd fe31 	bl	80012f0 <HAL_GetTick>
 800368e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003690:	e008      	b.n	80036a4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003692:	f7fd fe2d 	bl	80012f0 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b02      	cmp	r3, #2
 800369e:	d901      	bls.n	80036a4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e036      	b.n	8003712 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036a4:	4b1e      	ldr	r3, [pc, #120]	; (8003720 <HAL_RCC_OscConfig+0x4d8>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1f0      	bne.n	8003692 <HAL_RCC_OscConfig+0x44a>
 80036b0:	e02e      	b.n	8003710 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d101      	bne.n	80036be <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e029      	b.n	8003712 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036be:	4b18      	ldr	r3, [pc, #96]	; (8003720 <HAL_RCC_OscConfig+0x4d8>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	69db      	ldr	r3, [r3, #28]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d11c      	bne.n	800370c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036dc:	429a      	cmp	r2, r3
 80036de:	d115      	bne.n	800370c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036e6:	4013      	ands	r3, r2
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d10d      	bne.n	800370c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d106      	bne.n	800370c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003708:	429a      	cmp	r2, r3
 800370a:	d001      	beq.n	8003710 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e000      	b.n	8003712 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3718      	adds	r7, #24
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	40007000 	.word	0x40007000
 8003720:	40023800 	.word	0x40023800
 8003724:	42470060 	.word	0x42470060

08003728 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e0cc      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800373c:	4b68      	ldr	r3, [pc, #416]	; (80038e0 <HAL_RCC_ClockConfig+0x1b8>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 030f 	and.w	r3, r3, #15
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	429a      	cmp	r2, r3
 8003748:	d90c      	bls.n	8003764 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800374a:	4b65      	ldr	r3, [pc, #404]	; (80038e0 <HAL_RCC_ClockConfig+0x1b8>)
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	b2d2      	uxtb	r2, r2
 8003750:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003752:	4b63      	ldr	r3, [pc, #396]	; (80038e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 030f 	and.w	r3, r3, #15
 800375a:	683a      	ldr	r2, [r7, #0]
 800375c:	429a      	cmp	r2, r3
 800375e:	d001      	beq.n	8003764 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e0b8      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d020      	beq.n	80037b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b00      	cmp	r3, #0
 800377a:	d005      	beq.n	8003788 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800377c:	4b59      	ldr	r3, [pc, #356]	; (80038e4 <HAL_RCC_ClockConfig+0x1bc>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	4a58      	ldr	r2, [pc, #352]	; (80038e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003782:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003786:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0308 	and.w	r3, r3, #8
 8003790:	2b00      	cmp	r3, #0
 8003792:	d005      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003794:	4b53      	ldr	r3, [pc, #332]	; (80038e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	4a52      	ldr	r2, [pc, #328]	; (80038e4 <HAL_RCC_ClockConfig+0x1bc>)
 800379a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800379e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037a0:	4b50      	ldr	r3, [pc, #320]	; (80038e4 <HAL_RCC_ClockConfig+0x1bc>)
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	494d      	ldr	r1, [pc, #308]	; (80038e4 <HAL_RCC_ClockConfig+0x1bc>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d044      	beq.n	8003848 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d107      	bne.n	80037d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037c6:	4b47      	ldr	r3, [pc, #284]	; (80038e4 <HAL_RCC_ClockConfig+0x1bc>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d119      	bne.n	8003806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e07f      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d003      	beq.n	80037e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037e2:	2b03      	cmp	r3, #3
 80037e4:	d107      	bne.n	80037f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037e6:	4b3f      	ldr	r3, [pc, #252]	; (80038e4 <HAL_RCC_ClockConfig+0x1bc>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d109      	bne.n	8003806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e06f      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f6:	4b3b      	ldr	r3, [pc, #236]	; (80038e4 <HAL_RCC_ClockConfig+0x1bc>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e067      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003806:	4b37      	ldr	r3, [pc, #220]	; (80038e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f023 0203 	bic.w	r2, r3, #3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	4934      	ldr	r1, [pc, #208]	; (80038e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003814:	4313      	orrs	r3, r2
 8003816:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003818:	f7fd fd6a 	bl	80012f0 <HAL_GetTick>
 800381c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800381e:	e00a      	b.n	8003836 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003820:	f7fd fd66 	bl	80012f0 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	f241 3288 	movw	r2, #5000	; 0x1388
 800382e:	4293      	cmp	r3, r2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e04f      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003836:	4b2b      	ldr	r3, [pc, #172]	; (80038e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f003 020c 	and.w	r2, r3, #12
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	429a      	cmp	r2, r3
 8003846:	d1eb      	bne.n	8003820 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003848:	4b25      	ldr	r3, [pc, #148]	; (80038e0 <HAL_RCC_ClockConfig+0x1b8>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 030f 	and.w	r3, r3, #15
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	429a      	cmp	r2, r3
 8003854:	d20c      	bcs.n	8003870 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003856:	4b22      	ldr	r3, [pc, #136]	; (80038e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	b2d2      	uxtb	r2, r2
 800385c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800385e:	4b20      	ldr	r3, [pc, #128]	; (80038e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 030f 	and.w	r3, r3, #15
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	429a      	cmp	r2, r3
 800386a:	d001      	beq.n	8003870 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e032      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0304 	and.w	r3, r3, #4
 8003878:	2b00      	cmp	r3, #0
 800387a:	d008      	beq.n	800388e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800387c:	4b19      	ldr	r3, [pc, #100]	; (80038e4 <HAL_RCC_ClockConfig+0x1bc>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	4916      	ldr	r1, [pc, #88]	; (80038e4 <HAL_RCC_ClockConfig+0x1bc>)
 800388a:	4313      	orrs	r3, r2
 800388c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0308 	and.w	r3, r3, #8
 8003896:	2b00      	cmp	r3, #0
 8003898:	d009      	beq.n	80038ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800389a:	4b12      	ldr	r3, [pc, #72]	; (80038e4 <HAL_RCC_ClockConfig+0x1bc>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	490e      	ldr	r1, [pc, #56]	; (80038e4 <HAL_RCC_ClockConfig+0x1bc>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038ae:	f000 f821 	bl	80038f4 <HAL_RCC_GetSysClockFreq>
 80038b2:	4601      	mov	r1, r0
 80038b4:	4b0b      	ldr	r3, [pc, #44]	; (80038e4 <HAL_RCC_ClockConfig+0x1bc>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	091b      	lsrs	r3, r3, #4
 80038ba:	f003 030f 	and.w	r3, r3, #15
 80038be:	4a0a      	ldr	r2, [pc, #40]	; (80038e8 <HAL_RCC_ClockConfig+0x1c0>)
 80038c0:	5cd3      	ldrb	r3, [r2, r3]
 80038c2:	fa21 f303 	lsr.w	r3, r1, r3
 80038c6:	4a09      	ldr	r2, [pc, #36]	; (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 80038c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038ca:	4b09      	ldr	r3, [pc, #36]	; (80038f0 <HAL_RCC_ClockConfig+0x1c8>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7fd fcca 	bl	8001268 <HAL_InitTick>

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	40023c00 	.word	0x40023c00
 80038e4:	40023800 	.word	0x40023800
 80038e8:	08004fac 	.word	0x08004fac
 80038ec:	20000000 	.word	0x20000000
 80038f0:	20000004 	.word	0x20000004

080038f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038fa:	2300      	movs	r3, #0
 80038fc:	607b      	str	r3, [r7, #4]
 80038fe:	2300      	movs	r3, #0
 8003900:	60fb      	str	r3, [r7, #12]
 8003902:	2300      	movs	r3, #0
 8003904:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003906:	2300      	movs	r3, #0
 8003908:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800390a:	4b50      	ldr	r3, [pc, #320]	; (8003a4c <HAL_RCC_GetSysClockFreq+0x158>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f003 030c 	and.w	r3, r3, #12
 8003912:	2b04      	cmp	r3, #4
 8003914:	d007      	beq.n	8003926 <HAL_RCC_GetSysClockFreq+0x32>
 8003916:	2b08      	cmp	r3, #8
 8003918:	d008      	beq.n	800392c <HAL_RCC_GetSysClockFreq+0x38>
 800391a:	2b00      	cmp	r3, #0
 800391c:	f040 808d 	bne.w	8003a3a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003920:	4b4b      	ldr	r3, [pc, #300]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003922:	60bb      	str	r3, [r7, #8]
       break;
 8003924:	e08c      	b.n	8003a40 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003926:	4b4b      	ldr	r3, [pc, #300]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x160>)
 8003928:	60bb      	str	r3, [r7, #8]
      break;
 800392a:	e089      	b.n	8003a40 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800392c:	4b47      	ldr	r3, [pc, #284]	; (8003a4c <HAL_RCC_GetSysClockFreq+0x158>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003934:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003936:	4b45      	ldr	r3, [pc, #276]	; (8003a4c <HAL_RCC_GetSysClockFreq+0x158>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d023      	beq.n	800398a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003942:	4b42      	ldr	r3, [pc, #264]	; (8003a4c <HAL_RCC_GetSysClockFreq+0x158>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	099b      	lsrs	r3, r3, #6
 8003948:	f04f 0400 	mov.w	r4, #0
 800394c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003950:	f04f 0200 	mov.w	r2, #0
 8003954:	ea03 0501 	and.w	r5, r3, r1
 8003958:	ea04 0602 	and.w	r6, r4, r2
 800395c:	4a3d      	ldr	r2, [pc, #244]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x160>)
 800395e:	fb02 f106 	mul.w	r1, r2, r6
 8003962:	2200      	movs	r2, #0
 8003964:	fb02 f205 	mul.w	r2, r2, r5
 8003968:	440a      	add	r2, r1
 800396a:	493a      	ldr	r1, [pc, #232]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x160>)
 800396c:	fba5 0101 	umull	r0, r1, r5, r1
 8003970:	1853      	adds	r3, r2, r1
 8003972:	4619      	mov	r1, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f04f 0400 	mov.w	r4, #0
 800397a:	461a      	mov	r2, r3
 800397c:	4623      	mov	r3, r4
 800397e:	f7fc fc77 	bl	8000270 <__aeabi_uldivmod>
 8003982:	4603      	mov	r3, r0
 8003984:	460c      	mov	r4, r1
 8003986:	60fb      	str	r3, [r7, #12]
 8003988:	e049      	b.n	8003a1e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800398a:	4b30      	ldr	r3, [pc, #192]	; (8003a4c <HAL_RCC_GetSysClockFreq+0x158>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	099b      	lsrs	r3, r3, #6
 8003990:	f04f 0400 	mov.w	r4, #0
 8003994:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003998:	f04f 0200 	mov.w	r2, #0
 800399c:	ea03 0501 	and.w	r5, r3, r1
 80039a0:	ea04 0602 	and.w	r6, r4, r2
 80039a4:	4629      	mov	r1, r5
 80039a6:	4632      	mov	r2, r6
 80039a8:	f04f 0300 	mov.w	r3, #0
 80039ac:	f04f 0400 	mov.w	r4, #0
 80039b0:	0154      	lsls	r4, r2, #5
 80039b2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80039b6:	014b      	lsls	r3, r1, #5
 80039b8:	4619      	mov	r1, r3
 80039ba:	4622      	mov	r2, r4
 80039bc:	1b49      	subs	r1, r1, r5
 80039be:	eb62 0206 	sbc.w	r2, r2, r6
 80039c2:	f04f 0300 	mov.w	r3, #0
 80039c6:	f04f 0400 	mov.w	r4, #0
 80039ca:	0194      	lsls	r4, r2, #6
 80039cc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80039d0:	018b      	lsls	r3, r1, #6
 80039d2:	1a5b      	subs	r3, r3, r1
 80039d4:	eb64 0402 	sbc.w	r4, r4, r2
 80039d8:	f04f 0100 	mov.w	r1, #0
 80039dc:	f04f 0200 	mov.w	r2, #0
 80039e0:	00e2      	lsls	r2, r4, #3
 80039e2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80039e6:	00d9      	lsls	r1, r3, #3
 80039e8:	460b      	mov	r3, r1
 80039ea:	4614      	mov	r4, r2
 80039ec:	195b      	adds	r3, r3, r5
 80039ee:	eb44 0406 	adc.w	r4, r4, r6
 80039f2:	f04f 0100 	mov.w	r1, #0
 80039f6:	f04f 0200 	mov.w	r2, #0
 80039fa:	02a2      	lsls	r2, r4, #10
 80039fc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003a00:	0299      	lsls	r1, r3, #10
 8003a02:	460b      	mov	r3, r1
 8003a04:	4614      	mov	r4, r2
 8003a06:	4618      	mov	r0, r3
 8003a08:	4621      	mov	r1, r4
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f04f 0400 	mov.w	r4, #0
 8003a10:	461a      	mov	r2, r3
 8003a12:	4623      	mov	r3, r4
 8003a14:	f7fc fc2c 	bl	8000270 <__aeabi_uldivmod>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	460c      	mov	r4, r1
 8003a1c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a1e:	4b0b      	ldr	r3, [pc, #44]	; (8003a4c <HAL_RCC_GetSysClockFreq+0x158>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	0c1b      	lsrs	r3, r3, #16
 8003a24:	f003 0303 	and.w	r3, r3, #3
 8003a28:	3301      	adds	r3, #1
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a36:	60bb      	str	r3, [r7, #8]
      break;
 8003a38:	e002      	b.n	8003a40 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a3a:	4b05      	ldr	r3, [pc, #20]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003a3c:	60bb      	str	r3, [r7, #8]
      break;
 8003a3e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a40:	68bb      	ldr	r3, [r7, #8]
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3714      	adds	r7, #20
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	40023800 	.word	0x40023800
 8003a50:	00f42400 	.word	0x00f42400
 8003a54:	017d7840 	.word	0x017d7840

08003a58 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a60:	2300      	movs	r3, #0
 8003a62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003a64:	2300      	movs	r3, #0
 8003a66:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0301 	and.w	r3, r3, #1
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d105      	bne.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d035      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a80:	4b62      	ldr	r3, [pc, #392]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a86:	f7fd fc33 	bl	80012f0 <HAL_GetTick>
 8003a8a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a8c:	e008      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003a8e:	f7fd fc2f 	bl	80012f0 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e0b0      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003aa0:	4b5b      	ldr	r3, [pc, #364]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1f0      	bne.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	019a      	lsls	r2, r3, #6
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	071b      	lsls	r3, r3, #28
 8003ab8:	4955      	ldr	r1, [pc, #340]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ac0:	4b52      	ldr	r3, [pc, #328]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ac6:	f7fd fc13 	bl	80012f0 <HAL_GetTick>
 8003aca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003acc:	e008      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003ace:	f7fd fc0f 	bl	80012f0 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d901      	bls.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e090      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ae0:	4b4b      	ldr	r3, [pc, #300]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d0f0      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 8083 	beq.w	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003afa:	2300      	movs	r3, #0
 8003afc:	60fb      	str	r3, [r7, #12]
 8003afe:	4b44      	ldr	r3, [pc, #272]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b02:	4a43      	ldr	r2, [pc, #268]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b08:	6413      	str	r3, [r2, #64]	; 0x40
 8003b0a:	4b41      	ldr	r3, [pc, #260]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b12:	60fb      	str	r3, [r7, #12]
 8003b14:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003b16:	4b3f      	ldr	r3, [pc, #252]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a3e      	ldr	r2, [pc, #248]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b20:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b22:	f7fd fbe5 	bl	80012f0 <HAL_GetTick>
 8003b26:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003b28:	e008      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003b2a:	f7fd fbe1 	bl	80012f0 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d901      	bls.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e062      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003b3c:	4b35      	ldr	r3, [pc, #212]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d0f0      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b48:	4b31      	ldr	r3, [pc, #196]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b50:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d02f      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d028      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b66:	4b2a      	ldr	r3, [pc, #168]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b6e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b70:	4b29      	ldr	r3, [pc, #164]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003b72:	2201      	movs	r2, #1
 8003b74:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b76:	4b28      	ldr	r3, [pc, #160]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003b7c:	4a24      	ldr	r2, [pc, #144]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b82:	4b23      	ldr	r3, [pc, #140]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d114      	bne.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003b8e:	f7fd fbaf 	bl	80012f0 <HAL_GetTick>
 8003b92:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b94:	e00a      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b96:	f7fd fbab 	bl	80012f0 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d901      	bls.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e02a      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bac:	4b18      	ldr	r3, [pc, #96]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d0ee      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bc4:	d10d      	bne.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003bc6:	4b12      	ldr	r3, [pc, #72]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003bd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bda:	490d      	ldr	r1, [pc, #52]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	608b      	str	r3, [r1, #8]
 8003be0:	e005      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003be2:	4b0b      	ldr	r3, [pc, #44]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	4a0a      	ldr	r2, [pc, #40]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003be8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003bec:	6093      	str	r3, [r2, #8]
 8003bee:	4b08      	ldr	r3, [pc, #32]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bf0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bfa:	4905      	ldr	r1, [pc, #20]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	42470068 	.word	0x42470068
 8003c10:	40023800 	.word	0x40023800
 8003c14:	40007000 	.word	0x40007000
 8003c18:	42470e40 	.word	0x42470e40

08003c1c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b087      	sub	sp, #28
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003c24:	2300      	movs	r3, #0
 8003c26:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003c30:	2300      	movs	r3, #0
 8003c32:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d13d      	bne.n	8003cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003c3a:	4b22      	ldr	r3, [pc, #136]	; (8003cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c42:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d004      	beq.n	8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d12f      	bne.n	8003cae <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003c4e:	4b1e      	ldr	r3, [pc, #120]	; (8003cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003c50:	617b      	str	r3, [r7, #20]
          break;
 8003c52:	e02f      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003c54:	4b1b      	ldr	r3, [pc, #108]	; (8003cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c60:	d108      	bne.n	8003c74 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003c62:	4b18      	ldr	r3, [pc, #96]	; (8003cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c6a:	4a18      	ldr	r2, [pc, #96]	; (8003ccc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c70:	613b      	str	r3, [r7, #16]
 8003c72:	e007      	b.n	8003c84 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003c74:	4b13      	ldr	r3, [pc, #76]	; (8003cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c7c:	4a14      	ldr	r2, [pc, #80]	; (8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c82:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003c84:	4b0f      	ldr	r3, [pc, #60]	; (8003cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003c86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c8a:	099b      	lsrs	r3, r3, #6
 8003c8c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	fb02 f303 	mul.w	r3, r2, r3
 8003c96:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003c98:	4b0a      	ldr	r3, [pc, #40]	; (8003cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003c9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c9e:	0f1b      	lsrs	r3, r3, #28
 8003ca0:	f003 0307 	and.w	r3, r3, #7
 8003ca4:	68ba      	ldr	r2, [r7, #8]
 8003ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003caa:	617b      	str	r3, [r7, #20]
          break;
 8003cac:	e002      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	617b      	str	r3, [r7, #20]
          break;
 8003cb2:	bf00      	nop
        }
      }
      break;
 8003cb4:	bf00      	nop
    }
  }
  return frequency;
 8003cb6:	697b      	ldr	r3, [r7, #20]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	371c      	adds	r7, #28
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	40023800 	.word	0x40023800
 8003cc8:	00bb8000 	.word	0x00bb8000
 8003ccc:	017d7840 	.word	0x017d7840
 8003cd0:	00f42400 	.word	0x00f42400

08003cd4 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003cda:	4b24      	ldr	r3, [pc, #144]	; (8003d6c <_DoInit+0x98>)
 8003cdc:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2203      	movs	r2, #3
 8003ce2:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2203      	movs	r2, #3
 8003ce8:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a20      	ldr	r2, [pc, #128]	; (8003d70 <_DoInit+0x9c>)
 8003cee:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a20      	ldr	r2, [pc, #128]	; (8003d74 <_DoInit+0xa0>)
 8003cf4:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003cfc:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a17      	ldr	r2, [pc, #92]	; (8003d70 <_DoInit+0x9c>)
 8003d14:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a17      	ldr	r2, [pc, #92]	; (8003d78 <_DoInit+0xa4>)
 8003d1a:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2210      	movs	r2, #16
 8003d20:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	3307      	adds	r3, #7
 8003d38:	4a10      	ldr	r2, [pc, #64]	; (8003d7c <_DoInit+0xa8>)
 8003d3a:	6810      	ldr	r0, [r2, #0]
 8003d3c:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003d3e:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a0e      	ldr	r2, [pc, #56]	; (8003d80 <_DoInit+0xac>)
 8003d46:	6810      	ldr	r0, [r2, #0]
 8003d48:	6018      	str	r0, [r3, #0]
 8003d4a:	8891      	ldrh	r1, [r2, #4]
 8003d4c:	7992      	ldrb	r2, [r2, #6]
 8003d4e:	8099      	strh	r1, [r3, #4]
 8003d50:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003d52:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2220      	movs	r2, #32
 8003d5a:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003d5c:	f3bf 8f5f 	dmb	sy
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr
 8003d6c:	200015f0 	.word	0x200015f0
 8003d70:	08004f94 	.word	0x08004f94
 8003d74:	20000090 	.word	0x20000090
 8003d78:	20000490 	.word	0x20000490
 8003d7c:	08004fa0 	.word	0x08004fa0
 8003d80:	08004fa4 	.word	0x08004fa4

08003d84 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b08a      	sub	sp, #40	; 0x28
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003d90:	2300      	movs	r3, #0
 8003d92:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d905      	bls.n	8003db4 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	3b01      	subs	r3, #1
 8003db0:	627b      	str	r3, [r7, #36]	; 0x24
 8003db2:	e007      	b.n	8003dc4 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	69b9      	ldr	r1, [r7, #24]
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	1acb      	subs	r3, r1, r3
 8003dbe:	4413      	add	r3, r2
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	689a      	ldr	r2, [r3, #8]
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	bf28      	it	cs
 8003dd2:	4613      	movcs	r3, r2
 8003dd4:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	bf28      	it	cs
 8003dde:	4613      	movcs	r3, r2
 8003de0:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	4413      	add	r3, r2
 8003dea:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dee:	68b9      	ldr	r1, [r7, #8]
 8003df0:	6978      	ldr	r0, [r7, #20]
 8003df2:	f000 f99d 	bl	8004130 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003df6:	6a3a      	ldr	r2, [r7, #32]
 8003df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfa:	4413      	add	r3, r2
 8003dfc:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e02:	4413      	add	r3, r2
 8003e04:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003e0e:	69fa      	ldr	r2, [r7, #28]
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	4413      	add	r3, r2
 8003e14:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	69fa      	ldr	r2, [r7, #28]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d101      	bne.n	8003e24 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003e20:	2300      	movs	r3, #0
 8003e22:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003e24:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	69fa      	ldr	r2, [r7, #28]
 8003e2c:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1b2      	bne.n	8003d9a <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003e34:	6a3b      	ldr	r3, [r7, #32]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3728      	adds	r7, #40	; 0x28
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b088      	sub	sp, #32
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	60f8      	str	r0, [r7, #12]
 8003e46:	60b9      	str	r1, [r7, #8]
 8003e48:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	689a      	ldr	r2, [r3, #8]
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d911      	bls.n	8003e86 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	685a      	ldr	r2, [r3, #4]
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	4413      	add	r3, r2
 8003e6a:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	68b9      	ldr	r1, [r7, #8]
 8003e70:	6938      	ldr	r0, [r7, #16]
 8003e72:	f000 f95d 	bl	8004130 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003e76:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003e7a:	69fa      	ldr	r2, [r7, #28]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	441a      	add	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003e84:	e01f      	b.n	8003ec6 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	4413      	add	r3, r2
 8003e92:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	68b9      	ldr	r1, [r7, #8]
 8003e98:	6938      	ldr	r0, [r7, #16]
 8003e9a:	f000 f949 	bl	8004130 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003eac:	68ba      	ldr	r2, [r7, #8]
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	6938      	ldr	r0, [r7, #16]
 8003eb8:	f000 f93a 	bl	8004130 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003ebc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	60da      	str	r2, [r3, #12]
}
 8003ec6:	bf00      	nop
 8003ec8:	3720      	adds	r7, #32
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003ece:	b480      	push	{r7}
 8003ed0:	b087      	sub	sp, #28
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d808      	bhi.n	8003efc <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	689a      	ldr	r2, [r3, #8]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	1ad2      	subs	r2, r2, r3
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	617b      	str	r3, [r7, #20]
 8003efa:	e004      	b.n	8003f06 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	3b01      	subs	r3, #1
 8003f04:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003f06:	697b      	ldr	r3, [r7, #20]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	371c      	adds	r7, #28
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b088      	sub	sp, #32
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	1c5a      	adds	r2, r3, #1
 8003f28:	4613      	mov	r3, r2
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	4413      	add	r3, r2
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	4a1e      	ldr	r2, [pc, #120]	; (8003fac <SEGGER_RTT_WriteNoLock+0x98>)
 8003f32:	4413      	add	r3, r2
 8003f34:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d017      	beq.n	8003f6e <SEGGER_RTT_WriteNoLock+0x5a>
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d302      	bcc.n	8003f48 <SEGGER_RTT_WriteNoLock+0x34>
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d023      	beq.n	8003f8e <SEGGER_RTT_WriteNoLock+0x7a>
 8003f46:	e029      	b.n	8003f9c <SEGGER_RTT_WriteNoLock+0x88>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003f48:	6978      	ldr	r0, [r7, #20]
 8003f4a:	f7ff ffc0 	bl	8003ece <_GetAvailWriteSpace>
 8003f4e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d202      	bcs.n	8003f5e <SEGGER_RTT_WriteNoLock+0x4a>
      Status = 0u;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003f5c:	e021      	b.n	8003fa2 <SEGGER_RTT_WriteNoLock+0x8e>
      Status = NumBytes;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	69b9      	ldr	r1, [r7, #24]
 8003f66:	6978      	ldr	r0, [r7, #20]
 8003f68:	f7ff ff69 	bl	8003e3e <_WriteNoCheck>
    break;
 8003f6c:	e019      	b.n	8003fa2 <SEGGER_RTT_WriteNoLock+0x8e>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003f6e:	6978      	ldr	r0, [r7, #20]
 8003f70:	f7ff ffad 	bl	8003ece <_GetAvailWriteSpace>
 8003f74:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	bf28      	it	cs
 8003f7e:	4613      	movcs	r3, r2
 8003f80:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003f82:	69fa      	ldr	r2, [r7, #28]
 8003f84:	69b9      	ldr	r1, [r7, #24]
 8003f86:	6978      	ldr	r0, [r7, #20]
 8003f88:	f7ff ff59 	bl	8003e3e <_WriteNoCheck>
    break;
 8003f8c:	e009      	b.n	8003fa2 <SEGGER_RTT_WriteNoLock+0x8e>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	69b9      	ldr	r1, [r7, #24]
 8003f92:	6978      	ldr	r0, [r7, #20]
 8003f94:	f7ff fef6 	bl	8003d84 <_WriteBlocking>
 8003f98:	61f8      	str	r0, [r7, #28]
    break;
 8003f9a:	e002      	b.n	8003fa2 <SEGGER_RTT_WriteNoLock+0x8e>
  default:
    Status = 0u;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	61fb      	str	r3, [r7, #28]
    break;
 8003fa0:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003fa2:	69fb      	ldr	r3, [r7, #28]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3720      	adds	r7, #32
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	200015f0 	.word	0x200015f0

08003fb0 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b088      	sub	sp, #32
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003fbc:	4b0e      	ldr	r3, [pc, #56]	; (8003ff8 <SEGGER_RTT_Write+0x48>)
 8003fbe:	61fb      	str	r3, [r7, #28]
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d101      	bne.n	8003fce <SEGGER_RTT_Write+0x1e>
 8003fca:	f7ff fe83 	bl	8003cd4 <_DoInit>
  SEGGER_RTT_LOCK();
 8003fce:	f3ef 8311 	mrs	r3, BASEPRI
 8003fd2:	f04f 0120 	mov.w	r1, #32
 8003fd6:	f381 8811 	msr	BASEPRI, r1
 8003fda:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	68b9      	ldr	r1, [r7, #8]
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f7ff ff97 	bl	8003f14 <SEGGER_RTT_WriteNoLock>
 8003fe6:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8003fee:	697b      	ldr	r3, [r7, #20]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3720      	adds	r7, #32
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	200015f0 	.word	0x200015f0

08003ffc <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b088      	sub	sp, #32
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
 8004008:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800400a:	4b33      	ldr	r3, [pc, #204]	; (80040d8 <SEGGER_RTT_ConfigUpBuffer+0xdc>)
 800400c:	61bb      	str	r3, [r7, #24]
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b00      	cmp	r3, #0
 8004016:	d101      	bne.n	800401c <SEGGER_RTT_ConfigUpBuffer+0x20>
 8004018:	f7ff fe5c 	bl	8003cd4 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800401c:	4b2e      	ldr	r3, [pc, #184]	; (80040d8 <SEGGER_RTT_ConfigUpBuffer+0xdc>)
 800401e:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumUpBuffers) {
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	461a      	mov	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	4293      	cmp	r3, r2
 800402a:	d24c      	bcs.n	80040c6 <SEGGER_RTT_ConfigUpBuffer+0xca>
    SEGGER_RTT_LOCK();
 800402c:	f3ef 8311 	mrs	r3, BASEPRI
 8004030:	f04f 0120 	mov.w	r1, #32
 8004034:	f381 8811 	msr	BASEPRI, r1
 8004038:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d032      	beq.n	80040a6 <SEGGER_RTT_ConfigUpBuffer+0xaa>
      pRTTCB->aUp[BufferIndex].sName        = sName;
 8004040:	6979      	ldr	r1, [r7, #20]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	1c5a      	adds	r2, r3, #1
 8004046:	4613      	mov	r3, r2
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	4413      	add	r3, r2
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	440b      	add	r3, r1
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	601a      	str	r2, [r3, #0]
      pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004054:	6979      	ldr	r1, [r7, #20]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	1c5a      	adds	r2, r3, #1
 800405a:	4613      	mov	r3, r2
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	4413      	add	r3, r2
 8004060:	00db      	lsls	r3, r3, #3
 8004062:	440b      	add	r3, r1
 8004064:	3304      	adds	r3, #4
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	601a      	str	r2, [r3, #0]
      pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800406a:	6979      	ldr	r1, [r7, #20]
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	4613      	mov	r3, r2
 8004070:	005b      	lsls	r3, r3, #1
 8004072:	4413      	add	r3, r2
 8004074:	00db      	lsls	r3, r3, #3
 8004076:	440b      	add	r3, r1
 8004078:	3320      	adds	r3, #32
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	601a      	str	r2, [r3, #0]
      pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800407e:	6979      	ldr	r1, [r7, #20]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	4613      	mov	r3, r2
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	4413      	add	r3, r2
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	440b      	add	r3, r1
 800408c:	3328      	adds	r3, #40	; 0x28
 800408e:	2200      	movs	r2, #0
 8004090:	601a      	str	r2, [r3, #0]
      pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004092:	6979      	ldr	r1, [r7, #20]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	4613      	mov	r3, r2
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	4413      	add	r3, r2
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	440b      	add	r3, r1
 80040a0:	3324      	adds	r3, #36	; 0x24
 80040a2:	2200      	movs	r2, #0
 80040a4:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aUp[BufferIndex].Flags          = Flags;
 80040a6:	6979      	ldr	r1, [r7, #20]
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	4613      	mov	r3, r2
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	4413      	add	r3, r2
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	440b      	add	r3, r1
 80040b4:	332c      	adds	r3, #44	; 0x2c
 80040b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040b8:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80040c0:	2300      	movs	r3, #0
 80040c2:	61fb      	str	r3, [r7, #28]
 80040c4:	e002      	b.n	80040cc <SEGGER_RTT_ConfigUpBuffer+0xd0>
  } else {
    r = -1;
 80040c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040ca:	61fb      	str	r3, [r7, #28]
  }
  return r;
 80040cc:	69fb      	ldr	r3, [r7, #28]
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3720      	adds	r7, #32
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	200015f0 	.word	0x200015f0

080040dc <__errno>:
 80040dc:	4b01      	ldr	r3, [pc, #4]	; (80040e4 <__errno+0x8>)
 80040de:	6818      	ldr	r0, [r3, #0]
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	2000000c 	.word	0x2000000c

080040e8 <__libc_init_array>:
 80040e8:	b570      	push	{r4, r5, r6, lr}
 80040ea:	4e0d      	ldr	r6, [pc, #52]	; (8004120 <__libc_init_array+0x38>)
 80040ec:	4c0d      	ldr	r4, [pc, #52]	; (8004124 <__libc_init_array+0x3c>)
 80040ee:	1ba4      	subs	r4, r4, r6
 80040f0:	10a4      	asrs	r4, r4, #2
 80040f2:	2500      	movs	r5, #0
 80040f4:	42a5      	cmp	r5, r4
 80040f6:	d109      	bne.n	800410c <__libc_init_array+0x24>
 80040f8:	4e0b      	ldr	r6, [pc, #44]	; (8004128 <__libc_init_array+0x40>)
 80040fa:	4c0c      	ldr	r4, [pc, #48]	; (800412c <__libc_init_array+0x44>)
 80040fc:	f000 ff36 	bl	8004f6c <_init>
 8004100:	1ba4      	subs	r4, r4, r6
 8004102:	10a4      	asrs	r4, r4, #2
 8004104:	2500      	movs	r5, #0
 8004106:	42a5      	cmp	r5, r4
 8004108:	d105      	bne.n	8004116 <__libc_init_array+0x2e>
 800410a:	bd70      	pop	{r4, r5, r6, pc}
 800410c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004110:	4798      	blx	r3
 8004112:	3501      	adds	r5, #1
 8004114:	e7ee      	b.n	80040f4 <__libc_init_array+0xc>
 8004116:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800411a:	4798      	blx	r3
 800411c:	3501      	adds	r5, #1
 800411e:	e7f2      	b.n	8004106 <__libc_init_array+0x1e>
 8004120:	08005064 	.word	0x08005064
 8004124:	08005064 	.word	0x08005064
 8004128:	08005064 	.word	0x08005064
 800412c:	08005068 	.word	0x08005068

08004130 <memcpy>:
 8004130:	b510      	push	{r4, lr}
 8004132:	1e43      	subs	r3, r0, #1
 8004134:	440a      	add	r2, r1
 8004136:	4291      	cmp	r1, r2
 8004138:	d100      	bne.n	800413c <memcpy+0xc>
 800413a:	bd10      	pop	{r4, pc}
 800413c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004140:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004144:	e7f7      	b.n	8004136 <memcpy+0x6>

08004146 <memset>:
 8004146:	4402      	add	r2, r0
 8004148:	4603      	mov	r3, r0
 800414a:	4293      	cmp	r3, r2
 800414c:	d100      	bne.n	8004150 <memset+0xa>
 800414e:	4770      	bx	lr
 8004150:	f803 1b01 	strb.w	r1, [r3], #1
 8004154:	e7f9      	b.n	800414a <memset+0x4>
	...

08004158 <iprintf>:
 8004158:	b40f      	push	{r0, r1, r2, r3}
 800415a:	4b0a      	ldr	r3, [pc, #40]	; (8004184 <iprintf+0x2c>)
 800415c:	b513      	push	{r0, r1, r4, lr}
 800415e:	681c      	ldr	r4, [r3, #0]
 8004160:	b124      	cbz	r4, 800416c <iprintf+0x14>
 8004162:	69a3      	ldr	r3, [r4, #24]
 8004164:	b913      	cbnz	r3, 800416c <iprintf+0x14>
 8004166:	4620      	mov	r0, r4
 8004168:	f000 f84e 	bl	8004208 <__sinit>
 800416c:	ab05      	add	r3, sp, #20
 800416e:	9a04      	ldr	r2, [sp, #16]
 8004170:	68a1      	ldr	r1, [r4, #8]
 8004172:	9301      	str	r3, [sp, #4]
 8004174:	4620      	mov	r0, r4
 8004176:	f000 f955 	bl	8004424 <_vfiprintf_r>
 800417a:	b002      	add	sp, #8
 800417c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004180:	b004      	add	sp, #16
 8004182:	4770      	bx	lr
 8004184:	2000000c 	.word	0x2000000c

08004188 <std>:
 8004188:	2300      	movs	r3, #0
 800418a:	b510      	push	{r4, lr}
 800418c:	4604      	mov	r4, r0
 800418e:	e9c0 3300 	strd	r3, r3, [r0]
 8004192:	6083      	str	r3, [r0, #8]
 8004194:	8181      	strh	r1, [r0, #12]
 8004196:	6643      	str	r3, [r0, #100]	; 0x64
 8004198:	81c2      	strh	r2, [r0, #14]
 800419a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800419e:	6183      	str	r3, [r0, #24]
 80041a0:	4619      	mov	r1, r3
 80041a2:	2208      	movs	r2, #8
 80041a4:	305c      	adds	r0, #92	; 0x5c
 80041a6:	f7ff ffce 	bl	8004146 <memset>
 80041aa:	4b05      	ldr	r3, [pc, #20]	; (80041c0 <std+0x38>)
 80041ac:	6263      	str	r3, [r4, #36]	; 0x24
 80041ae:	4b05      	ldr	r3, [pc, #20]	; (80041c4 <std+0x3c>)
 80041b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80041b2:	4b05      	ldr	r3, [pc, #20]	; (80041c8 <std+0x40>)
 80041b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80041b6:	4b05      	ldr	r3, [pc, #20]	; (80041cc <std+0x44>)
 80041b8:	6224      	str	r4, [r4, #32]
 80041ba:	6323      	str	r3, [r4, #48]	; 0x30
 80041bc:	bd10      	pop	{r4, pc}
 80041be:	bf00      	nop
 80041c0:	08004981 	.word	0x08004981
 80041c4:	080049a3 	.word	0x080049a3
 80041c8:	080049db 	.word	0x080049db
 80041cc:	080049ff 	.word	0x080049ff

080041d0 <_cleanup_r>:
 80041d0:	4901      	ldr	r1, [pc, #4]	; (80041d8 <_cleanup_r+0x8>)
 80041d2:	f000 b885 	b.w	80042e0 <_fwalk_reent>
 80041d6:	bf00      	nop
 80041d8:	08004cd9 	.word	0x08004cd9

080041dc <__sfmoreglue>:
 80041dc:	b570      	push	{r4, r5, r6, lr}
 80041de:	1e4a      	subs	r2, r1, #1
 80041e0:	2568      	movs	r5, #104	; 0x68
 80041e2:	4355      	muls	r5, r2
 80041e4:	460e      	mov	r6, r1
 80041e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80041ea:	f000 f897 	bl	800431c <_malloc_r>
 80041ee:	4604      	mov	r4, r0
 80041f0:	b140      	cbz	r0, 8004204 <__sfmoreglue+0x28>
 80041f2:	2100      	movs	r1, #0
 80041f4:	e9c0 1600 	strd	r1, r6, [r0]
 80041f8:	300c      	adds	r0, #12
 80041fa:	60a0      	str	r0, [r4, #8]
 80041fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004200:	f7ff ffa1 	bl	8004146 <memset>
 8004204:	4620      	mov	r0, r4
 8004206:	bd70      	pop	{r4, r5, r6, pc}

08004208 <__sinit>:
 8004208:	6983      	ldr	r3, [r0, #24]
 800420a:	b510      	push	{r4, lr}
 800420c:	4604      	mov	r4, r0
 800420e:	bb33      	cbnz	r3, 800425e <__sinit+0x56>
 8004210:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004214:	6503      	str	r3, [r0, #80]	; 0x50
 8004216:	4b12      	ldr	r3, [pc, #72]	; (8004260 <__sinit+0x58>)
 8004218:	4a12      	ldr	r2, [pc, #72]	; (8004264 <__sinit+0x5c>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6282      	str	r2, [r0, #40]	; 0x28
 800421e:	4298      	cmp	r0, r3
 8004220:	bf04      	itt	eq
 8004222:	2301      	moveq	r3, #1
 8004224:	6183      	streq	r3, [r0, #24]
 8004226:	f000 f81f 	bl	8004268 <__sfp>
 800422a:	6060      	str	r0, [r4, #4]
 800422c:	4620      	mov	r0, r4
 800422e:	f000 f81b 	bl	8004268 <__sfp>
 8004232:	60a0      	str	r0, [r4, #8]
 8004234:	4620      	mov	r0, r4
 8004236:	f000 f817 	bl	8004268 <__sfp>
 800423a:	2200      	movs	r2, #0
 800423c:	60e0      	str	r0, [r4, #12]
 800423e:	2104      	movs	r1, #4
 8004240:	6860      	ldr	r0, [r4, #4]
 8004242:	f7ff ffa1 	bl	8004188 <std>
 8004246:	2201      	movs	r2, #1
 8004248:	2109      	movs	r1, #9
 800424a:	68a0      	ldr	r0, [r4, #8]
 800424c:	f7ff ff9c 	bl	8004188 <std>
 8004250:	2202      	movs	r2, #2
 8004252:	2112      	movs	r1, #18
 8004254:	68e0      	ldr	r0, [r4, #12]
 8004256:	f7ff ff97 	bl	8004188 <std>
 800425a:	2301      	movs	r3, #1
 800425c:	61a3      	str	r3, [r4, #24]
 800425e:	bd10      	pop	{r4, pc}
 8004260:	08004fc4 	.word	0x08004fc4
 8004264:	080041d1 	.word	0x080041d1

08004268 <__sfp>:
 8004268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800426a:	4b1b      	ldr	r3, [pc, #108]	; (80042d8 <__sfp+0x70>)
 800426c:	681e      	ldr	r6, [r3, #0]
 800426e:	69b3      	ldr	r3, [r6, #24]
 8004270:	4607      	mov	r7, r0
 8004272:	b913      	cbnz	r3, 800427a <__sfp+0x12>
 8004274:	4630      	mov	r0, r6
 8004276:	f7ff ffc7 	bl	8004208 <__sinit>
 800427a:	3648      	adds	r6, #72	; 0x48
 800427c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004280:	3b01      	subs	r3, #1
 8004282:	d503      	bpl.n	800428c <__sfp+0x24>
 8004284:	6833      	ldr	r3, [r6, #0]
 8004286:	b133      	cbz	r3, 8004296 <__sfp+0x2e>
 8004288:	6836      	ldr	r6, [r6, #0]
 800428a:	e7f7      	b.n	800427c <__sfp+0x14>
 800428c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004290:	b16d      	cbz	r5, 80042ae <__sfp+0x46>
 8004292:	3468      	adds	r4, #104	; 0x68
 8004294:	e7f4      	b.n	8004280 <__sfp+0x18>
 8004296:	2104      	movs	r1, #4
 8004298:	4638      	mov	r0, r7
 800429a:	f7ff ff9f 	bl	80041dc <__sfmoreglue>
 800429e:	6030      	str	r0, [r6, #0]
 80042a0:	2800      	cmp	r0, #0
 80042a2:	d1f1      	bne.n	8004288 <__sfp+0x20>
 80042a4:	230c      	movs	r3, #12
 80042a6:	603b      	str	r3, [r7, #0]
 80042a8:	4604      	mov	r4, r0
 80042aa:	4620      	mov	r0, r4
 80042ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042ae:	4b0b      	ldr	r3, [pc, #44]	; (80042dc <__sfp+0x74>)
 80042b0:	6665      	str	r5, [r4, #100]	; 0x64
 80042b2:	e9c4 5500 	strd	r5, r5, [r4]
 80042b6:	60a5      	str	r5, [r4, #8]
 80042b8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80042bc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80042c0:	2208      	movs	r2, #8
 80042c2:	4629      	mov	r1, r5
 80042c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80042c8:	f7ff ff3d 	bl	8004146 <memset>
 80042cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80042d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80042d4:	e7e9      	b.n	80042aa <__sfp+0x42>
 80042d6:	bf00      	nop
 80042d8:	08004fc4 	.word	0x08004fc4
 80042dc:	ffff0001 	.word	0xffff0001

080042e0 <_fwalk_reent>:
 80042e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042e4:	4680      	mov	r8, r0
 80042e6:	4689      	mov	r9, r1
 80042e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80042ec:	2600      	movs	r6, #0
 80042ee:	b914      	cbnz	r4, 80042f6 <_fwalk_reent+0x16>
 80042f0:	4630      	mov	r0, r6
 80042f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042f6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80042fa:	3f01      	subs	r7, #1
 80042fc:	d501      	bpl.n	8004302 <_fwalk_reent+0x22>
 80042fe:	6824      	ldr	r4, [r4, #0]
 8004300:	e7f5      	b.n	80042ee <_fwalk_reent+0xe>
 8004302:	89ab      	ldrh	r3, [r5, #12]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d907      	bls.n	8004318 <_fwalk_reent+0x38>
 8004308:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800430c:	3301      	adds	r3, #1
 800430e:	d003      	beq.n	8004318 <_fwalk_reent+0x38>
 8004310:	4629      	mov	r1, r5
 8004312:	4640      	mov	r0, r8
 8004314:	47c8      	blx	r9
 8004316:	4306      	orrs	r6, r0
 8004318:	3568      	adds	r5, #104	; 0x68
 800431a:	e7ee      	b.n	80042fa <_fwalk_reent+0x1a>

0800431c <_malloc_r>:
 800431c:	b570      	push	{r4, r5, r6, lr}
 800431e:	1ccd      	adds	r5, r1, #3
 8004320:	f025 0503 	bic.w	r5, r5, #3
 8004324:	3508      	adds	r5, #8
 8004326:	2d0c      	cmp	r5, #12
 8004328:	bf38      	it	cc
 800432a:	250c      	movcc	r5, #12
 800432c:	2d00      	cmp	r5, #0
 800432e:	4606      	mov	r6, r0
 8004330:	db01      	blt.n	8004336 <_malloc_r+0x1a>
 8004332:	42a9      	cmp	r1, r5
 8004334:	d903      	bls.n	800433e <_malloc_r+0x22>
 8004336:	230c      	movs	r3, #12
 8004338:	6033      	str	r3, [r6, #0]
 800433a:	2000      	movs	r0, #0
 800433c:	bd70      	pop	{r4, r5, r6, pc}
 800433e:	f000 fd6b 	bl	8004e18 <__malloc_lock>
 8004342:	4a21      	ldr	r2, [pc, #132]	; (80043c8 <_malloc_r+0xac>)
 8004344:	6814      	ldr	r4, [r2, #0]
 8004346:	4621      	mov	r1, r4
 8004348:	b991      	cbnz	r1, 8004370 <_malloc_r+0x54>
 800434a:	4c20      	ldr	r4, [pc, #128]	; (80043cc <_malloc_r+0xb0>)
 800434c:	6823      	ldr	r3, [r4, #0]
 800434e:	b91b      	cbnz	r3, 8004358 <_malloc_r+0x3c>
 8004350:	4630      	mov	r0, r6
 8004352:	f000 fb05 	bl	8004960 <_sbrk_r>
 8004356:	6020      	str	r0, [r4, #0]
 8004358:	4629      	mov	r1, r5
 800435a:	4630      	mov	r0, r6
 800435c:	f000 fb00 	bl	8004960 <_sbrk_r>
 8004360:	1c43      	adds	r3, r0, #1
 8004362:	d124      	bne.n	80043ae <_malloc_r+0x92>
 8004364:	230c      	movs	r3, #12
 8004366:	6033      	str	r3, [r6, #0]
 8004368:	4630      	mov	r0, r6
 800436a:	f000 fd56 	bl	8004e1a <__malloc_unlock>
 800436e:	e7e4      	b.n	800433a <_malloc_r+0x1e>
 8004370:	680b      	ldr	r3, [r1, #0]
 8004372:	1b5b      	subs	r3, r3, r5
 8004374:	d418      	bmi.n	80043a8 <_malloc_r+0x8c>
 8004376:	2b0b      	cmp	r3, #11
 8004378:	d90f      	bls.n	800439a <_malloc_r+0x7e>
 800437a:	600b      	str	r3, [r1, #0]
 800437c:	50cd      	str	r5, [r1, r3]
 800437e:	18cc      	adds	r4, r1, r3
 8004380:	4630      	mov	r0, r6
 8004382:	f000 fd4a 	bl	8004e1a <__malloc_unlock>
 8004386:	f104 000b 	add.w	r0, r4, #11
 800438a:	1d23      	adds	r3, r4, #4
 800438c:	f020 0007 	bic.w	r0, r0, #7
 8004390:	1ac3      	subs	r3, r0, r3
 8004392:	d0d3      	beq.n	800433c <_malloc_r+0x20>
 8004394:	425a      	negs	r2, r3
 8004396:	50e2      	str	r2, [r4, r3]
 8004398:	e7d0      	b.n	800433c <_malloc_r+0x20>
 800439a:	428c      	cmp	r4, r1
 800439c:	684b      	ldr	r3, [r1, #4]
 800439e:	bf16      	itet	ne
 80043a0:	6063      	strne	r3, [r4, #4]
 80043a2:	6013      	streq	r3, [r2, #0]
 80043a4:	460c      	movne	r4, r1
 80043a6:	e7eb      	b.n	8004380 <_malloc_r+0x64>
 80043a8:	460c      	mov	r4, r1
 80043aa:	6849      	ldr	r1, [r1, #4]
 80043ac:	e7cc      	b.n	8004348 <_malloc_r+0x2c>
 80043ae:	1cc4      	adds	r4, r0, #3
 80043b0:	f024 0403 	bic.w	r4, r4, #3
 80043b4:	42a0      	cmp	r0, r4
 80043b6:	d005      	beq.n	80043c4 <_malloc_r+0xa8>
 80043b8:	1a21      	subs	r1, r4, r0
 80043ba:	4630      	mov	r0, r6
 80043bc:	f000 fad0 	bl	8004960 <_sbrk_r>
 80043c0:	3001      	adds	r0, #1
 80043c2:	d0cf      	beq.n	8004364 <_malloc_r+0x48>
 80043c4:	6025      	str	r5, [r4, #0]
 80043c6:	e7db      	b.n	8004380 <_malloc_r+0x64>
 80043c8:	200004a0 	.word	0x200004a0
 80043cc:	200004a4 	.word	0x200004a4

080043d0 <__sfputc_r>:
 80043d0:	6893      	ldr	r3, [r2, #8]
 80043d2:	3b01      	subs	r3, #1
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	b410      	push	{r4}
 80043d8:	6093      	str	r3, [r2, #8]
 80043da:	da08      	bge.n	80043ee <__sfputc_r+0x1e>
 80043dc:	6994      	ldr	r4, [r2, #24]
 80043de:	42a3      	cmp	r3, r4
 80043e0:	db01      	blt.n	80043e6 <__sfputc_r+0x16>
 80043e2:	290a      	cmp	r1, #10
 80043e4:	d103      	bne.n	80043ee <__sfputc_r+0x1e>
 80043e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043ea:	f000 bb0d 	b.w	8004a08 <__swbuf_r>
 80043ee:	6813      	ldr	r3, [r2, #0]
 80043f0:	1c58      	adds	r0, r3, #1
 80043f2:	6010      	str	r0, [r2, #0]
 80043f4:	7019      	strb	r1, [r3, #0]
 80043f6:	4608      	mov	r0, r1
 80043f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <__sfputs_r>:
 80043fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004400:	4606      	mov	r6, r0
 8004402:	460f      	mov	r7, r1
 8004404:	4614      	mov	r4, r2
 8004406:	18d5      	adds	r5, r2, r3
 8004408:	42ac      	cmp	r4, r5
 800440a:	d101      	bne.n	8004410 <__sfputs_r+0x12>
 800440c:	2000      	movs	r0, #0
 800440e:	e007      	b.n	8004420 <__sfputs_r+0x22>
 8004410:	463a      	mov	r2, r7
 8004412:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004416:	4630      	mov	r0, r6
 8004418:	f7ff ffda 	bl	80043d0 <__sfputc_r>
 800441c:	1c43      	adds	r3, r0, #1
 800441e:	d1f3      	bne.n	8004408 <__sfputs_r+0xa>
 8004420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004424 <_vfiprintf_r>:
 8004424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004428:	460c      	mov	r4, r1
 800442a:	b09d      	sub	sp, #116	; 0x74
 800442c:	4617      	mov	r7, r2
 800442e:	461d      	mov	r5, r3
 8004430:	4606      	mov	r6, r0
 8004432:	b118      	cbz	r0, 800443c <_vfiprintf_r+0x18>
 8004434:	6983      	ldr	r3, [r0, #24]
 8004436:	b90b      	cbnz	r3, 800443c <_vfiprintf_r+0x18>
 8004438:	f7ff fee6 	bl	8004208 <__sinit>
 800443c:	4b7c      	ldr	r3, [pc, #496]	; (8004630 <_vfiprintf_r+0x20c>)
 800443e:	429c      	cmp	r4, r3
 8004440:	d158      	bne.n	80044f4 <_vfiprintf_r+0xd0>
 8004442:	6874      	ldr	r4, [r6, #4]
 8004444:	89a3      	ldrh	r3, [r4, #12]
 8004446:	0718      	lsls	r0, r3, #28
 8004448:	d55e      	bpl.n	8004508 <_vfiprintf_r+0xe4>
 800444a:	6923      	ldr	r3, [r4, #16]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d05b      	beq.n	8004508 <_vfiprintf_r+0xe4>
 8004450:	2300      	movs	r3, #0
 8004452:	9309      	str	r3, [sp, #36]	; 0x24
 8004454:	2320      	movs	r3, #32
 8004456:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800445a:	2330      	movs	r3, #48	; 0x30
 800445c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004460:	9503      	str	r5, [sp, #12]
 8004462:	f04f 0b01 	mov.w	fp, #1
 8004466:	46b8      	mov	r8, r7
 8004468:	4645      	mov	r5, r8
 800446a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800446e:	b10b      	cbz	r3, 8004474 <_vfiprintf_r+0x50>
 8004470:	2b25      	cmp	r3, #37	; 0x25
 8004472:	d154      	bne.n	800451e <_vfiprintf_r+0xfa>
 8004474:	ebb8 0a07 	subs.w	sl, r8, r7
 8004478:	d00b      	beq.n	8004492 <_vfiprintf_r+0x6e>
 800447a:	4653      	mov	r3, sl
 800447c:	463a      	mov	r2, r7
 800447e:	4621      	mov	r1, r4
 8004480:	4630      	mov	r0, r6
 8004482:	f7ff ffbc 	bl	80043fe <__sfputs_r>
 8004486:	3001      	adds	r0, #1
 8004488:	f000 80c2 	beq.w	8004610 <_vfiprintf_r+0x1ec>
 800448c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800448e:	4453      	add	r3, sl
 8004490:	9309      	str	r3, [sp, #36]	; 0x24
 8004492:	f898 3000 	ldrb.w	r3, [r8]
 8004496:	2b00      	cmp	r3, #0
 8004498:	f000 80ba 	beq.w	8004610 <_vfiprintf_r+0x1ec>
 800449c:	2300      	movs	r3, #0
 800449e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044a6:	9304      	str	r3, [sp, #16]
 80044a8:	9307      	str	r3, [sp, #28]
 80044aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80044ae:	931a      	str	r3, [sp, #104]	; 0x68
 80044b0:	46a8      	mov	r8, r5
 80044b2:	2205      	movs	r2, #5
 80044b4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80044b8:	485e      	ldr	r0, [pc, #376]	; (8004634 <_vfiprintf_r+0x210>)
 80044ba:	f7fb fe89 	bl	80001d0 <memchr>
 80044be:	9b04      	ldr	r3, [sp, #16]
 80044c0:	bb78      	cbnz	r0, 8004522 <_vfiprintf_r+0xfe>
 80044c2:	06d9      	lsls	r1, r3, #27
 80044c4:	bf44      	itt	mi
 80044c6:	2220      	movmi	r2, #32
 80044c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80044cc:	071a      	lsls	r2, r3, #28
 80044ce:	bf44      	itt	mi
 80044d0:	222b      	movmi	r2, #43	; 0x2b
 80044d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80044d6:	782a      	ldrb	r2, [r5, #0]
 80044d8:	2a2a      	cmp	r2, #42	; 0x2a
 80044da:	d02a      	beq.n	8004532 <_vfiprintf_r+0x10e>
 80044dc:	9a07      	ldr	r2, [sp, #28]
 80044de:	46a8      	mov	r8, r5
 80044e0:	2000      	movs	r0, #0
 80044e2:	250a      	movs	r5, #10
 80044e4:	4641      	mov	r1, r8
 80044e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044ea:	3b30      	subs	r3, #48	; 0x30
 80044ec:	2b09      	cmp	r3, #9
 80044ee:	d969      	bls.n	80045c4 <_vfiprintf_r+0x1a0>
 80044f0:	b360      	cbz	r0, 800454c <_vfiprintf_r+0x128>
 80044f2:	e024      	b.n	800453e <_vfiprintf_r+0x11a>
 80044f4:	4b50      	ldr	r3, [pc, #320]	; (8004638 <_vfiprintf_r+0x214>)
 80044f6:	429c      	cmp	r4, r3
 80044f8:	d101      	bne.n	80044fe <_vfiprintf_r+0xda>
 80044fa:	68b4      	ldr	r4, [r6, #8]
 80044fc:	e7a2      	b.n	8004444 <_vfiprintf_r+0x20>
 80044fe:	4b4f      	ldr	r3, [pc, #316]	; (800463c <_vfiprintf_r+0x218>)
 8004500:	429c      	cmp	r4, r3
 8004502:	bf08      	it	eq
 8004504:	68f4      	ldreq	r4, [r6, #12]
 8004506:	e79d      	b.n	8004444 <_vfiprintf_r+0x20>
 8004508:	4621      	mov	r1, r4
 800450a:	4630      	mov	r0, r6
 800450c:	f000 fae0 	bl	8004ad0 <__swsetup_r>
 8004510:	2800      	cmp	r0, #0
 8004512:	d09d      	beq.n	8004450 <_vfiprintf_r+0x2c>
 8004514:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004518:	b01d      	add	sp, #116	; 0x74
 800451a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800451e:	46a8      	mov	r8, r5
 8004520:	e7a2      	b.n	8004468 <_vfiprintf_r+0x44>
 8004522:	4a44      	ldr	r2, [pc, #272]	; (8004634 <_vfiprintf_r+0x210>)
 8004524:	1a80      	subs	r0, r0, r2
 8004526:	fa0b f000 	lsl.w	r0, fp, r0
 800452a:	4318      	orrs	r0, r3
 800452c:	9004      	str	r0, [sp, #16]
 800452e:	4645      	mov	r5, r8
 8004530:	e7be      	b.n	80044b0 <_vfiprintf_r+0x8c>
 8004532:	9a03      	ldr	r2, [sp, #12]
 8004534:	1d11      	adds	r1, r2, #4
 8004536:	6812      	ldr	r2, [r2, #0]
 8004538:	9103      	str	r1, [sp, #12]
 800453a:	2a00      	cmp	r2, #0
 800453c:	db01      	blt.n	8004542 <_vfiprintf_r+0x11e>
 800453e:	9207      	str	r2, [sp, #28]
 8004540:	e004      	b.n	800454c <_vfiprintf_r+0x128>
 8004542:	4252      	negs	r2, r2
 8004544:	f043 0302 	orr.w	r3, r3, #2
 8004548:	9207      	str	r2, [sp, #28]
 800454a:	9304      	str	r3, [sp, #16]
 800454c:	f898 3000 	ldrb.w	r3, [r8]
 8004550:	2b2e      	cmp	r3, #46	; 0x2e
 8004552:	d10e      	bne.n	8004572 <_vfiprintf_r+0x14e>
 8004554:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004558:	2b2a      	cmp	r3, #42	; 0x2a
 800455a:	d138      	bne.n	80045ce <_vfiprintf_r+0x1aa>
 800455c:	9b03      	ldr	r3, [sp, #12]
 800455e:	1d1a      	adds	r2, r3, #4
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	9203      	str	r2, [sp, #12]
 8004564:	2b00      	cmp	r3, #0
 8004566:	bfb8      	it	lt
 8004568:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800456c:	f108 0802 	add.w	r8, r8, #2
 8004570:	9305      	str	r3, [sp, #20]
 8004572:	4d33      	ldr	r5, [pc, #204]	; (8004640 <_vfiprintf_r+0x21c>)
 8004574:	f898 1000 	ldrb.w	r1, [r8]
 8004578:	2203      	movs	r2, #3
 800457a:	4628      	mov	r0, r5
 800457c:	f7fb fe28 	bl	80001d0 <memchr>
 8004580:	b140      	cbz	r0, 8004594 <_vfiprintf_r+0x170>
 8004582:	2340      	movs	r3, #64	; 0x40
 8004584:	1b40      	subs	r0, r0, r5
 8004586:	fa03 f000 	lsl.w	r0, r3, r0
 800458a:	9b04      	ldr	r3, [sp, #16]
 800458c:	4303      	orrs	r3, r0
 800458e:	f108 0801 	add.w	r8, r8, #1
 8004592:	9304      	str	r3, [sp, #16]
 8004594:	f898 1000 	ldrb.w	r1, [r8]
 8004598:	482a      	ldr	r0, [pc, #168]	; (8004644 <_vfiprintf_r+0x220>)
 800459a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800459e:	2206      	movs	r2, #6
 80045a0:	f108 0701 	add.w	r7, r8, #1
 80045a4:	f7fb fe14 	bl	80001d0 <memchr>
 80045a8:	2800      	cmp	r0, #0
 80045aa:	d037      	beq.n	800461c <_vfiprintf_r+0x1f8>
 80045ac:	4b26      	ldr	r3, [pc, #152]	; (8004648 <_vfiprintf_r+0x224>)
 80045ae:	bb1b      	cbnz	r3, 80045f8 <_vfiprintf_r+0x1d4>
 80045b0:	9b03      	ldr	r3, [sp, #12]
 80045b2:	3307      	adds	r3, #7
 80045b4:	f023 0307 	bic.w	r3, r3, #7
 80045b8:	3308      	adds	r3, #8
 80045ba:	9303      	str	r3, [sp, #12]
 80045bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045be:	444b      	add	r3, r9
 80045c0:	9309      	str	r3, [sp, #36]	; 0x24
 80045c2:	e750      	b.n	8004466 <_vfiprintf_r+0x42>
 80045c4:	fb05 3202 	mla	r2, r5, r2, r3
 80045c8:	2001      	movs	r0, #1
 80045ca:	4688      	mov	r8, r1
 80045cc:	e78a      	b.n	80044e4 <_vfiprintf_r+0xc0>
 80045ce:	2300      	movs	r3, #0
 80045d0:	f108 0801 	add.w	r8, r8, #1
 80045d4:	9305      	str	r3, [sp, #20]
 80045d6:	4619      	mov	r1, r3
 80045d8:	250a      	movs	r5, #10
 80045da:	4640      	mov	r0, r8
 80045dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045e0:	3a30      	subs	r2, #48	; 0x30
 80045e2:	2a09      	cmp	r2, #9
 80045e4:	d903      	bls.n	80045ee <_vfiprintf_r+0x1ca>
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d0c3      	beq.n	8004572 <_vfiprintf_r+0x14e>
 80045ea:	9105      	str	r1, [sp, #20]
 80045ec:	e7c1      	b.n	8004572 <_vfiprintf_r+0x14e>
 80045ee:	fb05 2101 	mla	r1, r5, r1, r2
 80045f2:	2301      	movs	r3, #1
 80045f4:	4680      	mov	r8, r0
 80045f6:	e7f0      	b.n	80045da <_vfiprintf_r+0x1b6>
 80045f8:	ab03      	add	r3, sp, #12
 80045fa:	9300      	str	r3, [sp, #0]
 80045fc:	4622      	mov	r2, r4
 80045fe:	4b13      	ldr	r3, [pc, #76]	; (800464c <_vfiprintf_r+0x228>)
 8004600:	a904      	add	r1, sp, #16
 8004602:	4630      	mov	r0, r6
 8004604:	f3af 8000 	nop.w
 8004608:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800460c:	4681      	mov	r9, r0
 800460e:	d1d5      	bne.n	80045bc <_vfiprintf_r+0x198>
 8004610:	89a3      	ldrh	r3, [r4, #12]
 8004612:	065b      	lsls	r3, r3, #25
 8004614:	f53f af7e 	bmi.w	8004514 <_vfiprintf_r+0xf0>
 8004618:	9809      	ldr	r0, [sp, #36]	; 0x24
 800461a:	e77d      	b.n	8004518 <_vfiprintf_r+0xf4>
 800461c:	ab03      	add	r3, sp, #12
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	4622      	mov	r2, r4
 8004622:	4b0a      	ldr	r3, [pc, #40]	; (800464c <_vfiprintf_r+0x228>)
 8004624:	a904      	add	r1, sp, #16
 8004626:	4630      	mov	r0, r6
 8004628:	f000 f888 	bl	800473c <_printf_i>
 800462c:	e7ec      	b.n	8004608 <_vfiprintf_r+0x1e4>
 800462e:	bf00      	nop
 8004630:	08004fe8 	.word	0x08004fe8
 8004634:	08005028 	.word	0x08005028
 8004638:	08005008 	.word	0x08005008
 800463c:	08004fc8 	.word	0x08004fc8
 8004640:	0800502e 	.word	0x0800502e
 8004644:	08005032 	.word	0x08005032
 8004648:	00000000 	.word	0x00000000
 800464c:	080043ff 	.word	0x080043ff

08004650 <_printf_common>:
 8004650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004654:	4691      	mov	r9, r2
 8004656:	461f      	mov	r7, r3
 8004658:	688a      	ldr	r2, [r1, #8]
 800465a:	690b      	ldr	r3, [r1, #16]
 800465c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004660:	4293      	cmp	r3, r2
 8004662:	bfb8      	it	lt
 8004664:	4613      	movlt	r3, r2
 8004666:	f8c9 3000 	str.w	r3, [r9]
 800466a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800466e:	4606      	mov	r6, r0
 8004670:	460c      	mov	r4, r1
 8004672:	b112      	cbz	r2, 800467a <_printf_common+0x2a>
 8004674:	3301      	adds	r3, #1
 8004676:	f8c9 3000 	str.w	r3, [r9]
 800467a:	6823      	ldr	r3, [r4, #0]
 800467c:	0699      	lsls	r1, r3, #26
 800467e:	bf42      	ittt	mi
 8004680:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004684:	3302      	addmi	r3, #2
 8004686:	f8c9 3000 	strmi.w	r3, [r9]
 800468a:	6825      	ldr	r5, [r4, #0]
 800468c:	f015 0506 	ands.w	r5, r5, #6
 8004690:	d107      	bne.n	80046a2 <_printf_common+0x52>
 8004692:	f104 0a19 	add.w	sl, r4, #25
 8004696:	68e3      	ldr	r3, [r4, #12]
 8004698:	f8d9 2000 	ldr.w	r2, [r9]
 800469c:	1a9b      	subs	r3, r3, r2
 800469e:	42ab      	cmp	r3, r5
 80046a0:	dc28      	bgt.n	80046f4 <_printf_common+0xa4>
 80046a2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80046a6:	6822      	ldr	r2, [r4, #0]
 80046a8:	3300      	adds	r3, #0
 80046aa:	bf18      	it	ne
 80046ac:	2301      	movne	r3, #1
 80046ae:	0692      	lsls	r2, r2, #26
 80046b0:	d42d      	bmi.n	800470e <_printf_common+0xbe>
 80046b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046b6:	4639      	mov	r1, r7
 80046b8:	4630      	mov	r0, r6
 80046ba:	47c0      	blx	r8
 80046bc:	3001      	adds	r0, #1
 80046be:	d020      	beq.n	8004702 <_printf_common+0xb2>
 80046c0:	6823      	ldr	r3, [r4, #0]
 80046c2:	68e5      	ldr	r5, [r4, #12]
 80046c4:	f8d9 2000 	ldr.w	r2, [r9]
 80046c8:	f003 0306 	and.w	r3, r3, #6
 80046cc:	2b04      	cmp	r3, #4
 80046ce:	bf08      	it	eq
 80046d0:	1aad      	subeq	r5, r5, r2
 80046d2:	68a3      	ldr	r3, [r4, #8]
 80046d4:	6922      	ldr	r2, [r4, #16]
 80046d6:	bf0c      	ite	eq
 80046d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046dc:	2500      	movne	r5, #0
 80046de:	4293      	cmp	r3, r2
 80046e0:	bfc4      	itt	gt
 80046e2:	1a9b      	subgt	r3, r3, r2
 80046e4:	18ed      	addgt	r5, r5, r3
 80046e6:	f04f 0900 	mov.w	r9, #0
 80046ea:	341a      	adds	r4, #26
 80046ec:	454d      	cmp	r5, r9
 80046ee:	d11a      	bne.n	8004726 <_printf_common+0xd6>
 80046f0:	2000      	movs	r0, #0
 80046f2:	e008      	b.n	8004706 <_printf_common+0xb6>
 80046f4:	2301      	movs	r3, #1
 80046f6:	4652      	mov	r2, sl
 80046f8:	4639      	mov	r1, r7
 80046fa:	4630      	mov	r0, r6
 80046fc:	47c0      	blx	r8
 80046fe:	3001      	adds	r0, #1
 8004700:	d103      	bne.n	800470a <_printf_common+0xba>
 8004702:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800470a:	3501      	adds	r5, #1
 800470c:	e7c3      	b.n	8004696 <_printf_common+0x46>
 800470e:	18e1      	adds	r1, r4, r3
 8004710:	1c5a      	adds	r2, r3, #1
 8004712:	2030      	movs	r0, #48	; 0x30
 8004714:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004718:	4422      	add	r2, r4
 800471a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800471e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004722:	3302      	adds	r3, #2
 8004724:	e7c5      	b.n	80046b2 <_printf_common+0x62>
 8004726:	2301      	movs	r3, #1
 8004728:	4622      	mov	r2, r4
 800472a:	4639      	mov	r1, r7
 800472c:	4630      	mov	r0, r6
 800472e:	47c0      	blx	r8
 8004730:	3001      	adds	r0, #1
 8004732:	d0e6      	beq.n	8004702 <_printf_common+0xb2>
 8004734:	f109 0901 	add.w	r9, r9, #1
 8004738:	e7d8      	b.n	80046ec <_printf_common+0x9c>
	...

0800473c <_printf_i>:
 800473c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004740:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004744:	460c      	mov	r4, r1
 8004746:	7e09      	ldrb	r1, [r1, #24]
 8004748:	b085      	sub	sp, #20
 800474a:	296e      	cmp	r1, #110	; 0x6e
 800474c:	4617      	mov	r7, r2
 800474e:	4606      	mov	r6, r0
 8004750:	4698      	mov	r8, r3
 8004752:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004754:	f000 80b3 	beq.w	80048be <_printf_i+0x182>
 8004758:	d822      	bhi.n	80047a0 <_printf_i+0x64>
 800475a:	2963      	cmp	r1, #99	; 0x63
 800475c:	d036      	beq.n	80047cc <_printf_i+0x90>
 800475e:	d80a      	bhi.n	8004776 <_printf_i+0x3a>
 8004760:	2900      	cmp	r1, #0
 8004762:	f000 80b9 	beq.w	80048d8 <_printf_i+0x19c>
 8004766:	2958      	cmp	r1, #88	; 0x58
 8004768:	f000 8083 	beq.w	8004872 <_printf_i+0x136>
 800476c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004770:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004774:	e032      	b.n	80047dc <_printf_i+0xa0>
 8004776:	2964      	cmp	r1, #100	; 0x64
 8004778:	d001      	beq.n	800477e <_printf_i+0x42>
 800477a:	2969      	cmp	r1, #105	; 0x69
 800477c:	d1f6      	bne.n	800476c <_printf_i+0x30>
 800477e:	6820      	ldr	r0, [r4, #0]
 8004780:	6813      	ldr	r3, [r2, #0]
 8004782:	0605      	lsls	r5, r0, #24
 8004784:	f103 0104 	add.w	r1, r3, #4
 8004788:	d52a      	bpl.n	80047e0 <_printf_i+0xa4>
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6011      	str	r1, [r2, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	da03      	bge.n	800479a <_printf_i+0x5e>
 8004792:	222d      	movs	r2, #45	; 0x2d
 8004794:	425b      	negs	r3, r3
 8004796:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800479a:	486f      	ldr	r0, [pc, #444]	; (8004958 <_printf_i+0x21c>)
 800479c:	220a      	movs	r2, #10
 800479e:	e039      	b.n	8004814 <_printf_i+0xd8>
 80047a0:	2973      	cmp	r1, #115	; 0x73
 80047a2:	f000 809d 	beq.w	80048e0 <_printf_i+0x1a4>
 80047a6:	d808      	bhi.n	80047ba <_printf_i+0x7e>
 80047a8:	296f      	cmp	r1, #111	; 0x6f
 80047aa:	d020      	beq.n	80047ee <_printf_i+0xb2>
 80047ac:	2970      	cmp	r1, #112	; 0x70
 80047ae:	d1dd      	bne.n	800476c <_printf_i+0x30>
 80047b0:	6823      	ldr	r3, [r4, #0]
 80047b2:	f043 0320 	orr.w	r3, r3, #32
 80047b6:	6023      	str	r3, [r4, #0]
 80047b8:	e003      	b.n	80047c2 <_printf_i+0x86>
 80047ba:	2975      	cmp	r1, #117	; 0x75
 80047bc:	d017      	beq.n	80047ee <_printf_i+0xb2>
 80047be:	2978      	cmp	r1, #120	; 0x78
 80047c0:	d1d4      	bne.n	800476c <_printf_i+0x30>
 80047c2:	2378      	movs	r3, #120	; 0x78
 80047c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80047c8:	4864      	ldr	r0, [pc, #400]	; (800495c <_printf_i+0x220>)
 80047ca:	e055      	b.n	8004878 <_printf_i+0x13c>
 80047cc:	6813      	ldr	r3, [r2, #0]
 80047ce:	1d19      	adds	r1, r3, #4
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6011      	str	r1, [r2, #0]
 80047d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047dc:	2301      	movs	r3, #1
 80047de:	e08c      	b.n	80048fa <_printf_i+0x1be>
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	6011      	str	r1, [r2, #0]
 80047e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80047e8:	bf18      	it	ne
 80047ea:	b21b      	sxthne	r3, r3
 80047ec:	e7cf      	b.n	800478e <_printf_i+0x52>
 80047ee:	6813      	ldr	r3, [r2, #0]
 80047f0:	6825      	ldr	r5, [r4, #0]
 80047f2:	1d18      	adds	r0, r3, #4
 80047f4:	6010      	str	r0, [r2, #0]
 80047f6:	0628      	lsls	r0, r5, #24
 80047f8:	d501      	bpl.n	80047fe <_printf_i+0xc2>
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	e002      	b.n	8004804 <_printf_i+0xc8>
 80047fe:	0668      	lsls	r0, r5, #25
 8004800:	d5fb      	bpl.n	80047fa <_printf_i+0xbe>
 8004802:	881b      	ldrh	r3, [r3, #0]
 8004804:	4854      	ldr	r0, [pc, #336]	; (8004958 <_printf_i+0x21c>)
 8004806:	296f      	cmp	r1, #111	; 0x6f
 8004808:	bf14      	ite	ne
 800480a:	220a      	movne	r2, #10
 800480c:	2208      	moveq	r2, #8
 800480e:	2100      	movs	r1, #0
 8004810:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004814:	6865      	ldr	r5, [r4, #4]
 8004816:	60a5      	str	r5, [r4, #8]
 8004818:	2d00      	cmp	r5, #0
 800481a:	f2c0 8095 	blt.w	8004948 <_printf_i+0x20c>
 800481e:	6821      	ldr	r1, [r4, #0]
 8004820:	f021 0104 	bic.w	r1, r1, #4
 8004824:	6021      	str	r1, [r4, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d13d      	bne.n	80048a6 <_printf_i+0x16a>
 800482a:	2d00      	cmp	r5, #0
 800482c:	f040 808e 	bne.w	800494c <_printf_i+0x210>
 8004830:	4665      	mov	r5, ip
 8004832:	2a08      	cmp	r2, #8
 8004834:	d10b      	bne.n	800484e <_printf_i+0x112>
 8004836:	6823      	ldr	r3, [r4, #0]
 8004838:	07db      	lsls	r3, r3, #31
 800483a:	d508      	bpl.n	800484e <_printf_i+0x112>
 800483c:	6923      	ldr	r3, [r4, #16]
 800483e:	6862      	ldr	r2, [r4, #4]
 8004840:	429a      	cmp	r2, r3
 8004842:	bfde      	ittt	le
 8004844:	2330      	movle	r3, #48	; 0x30
 8004846:	f805 3c01 	strble.w	r3, [r5, #-1]
 800484a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800484e:	ebac 0305 	sub.w	r3, ip, r5
 8004852:	6123      	str	r3, [r4, #16]
 8004854:	f8cd 8000 	str.w	r8, [sp]
 8004858:	463b      	mov	r3, r7
 800485a:	aa03      	add	r2, sp, #12
 800485c:	4621      	mov	r1, r4
 800485e:	4630      	mov	r0, r6
 8004860:	f7ff fef6 	bl	8004650 <_printf_common>
 8004864:	3001      	adds	r0, #1
 8004866:	d14d      	bne.n	8004904 <_printf_i+0x1c8>
 8004868:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800486c:	b005      	add	sp, #20
 800486e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004872:	4839      	ldr	r0, [pc, #228]	; (8004958 <_printf_i+0x21c>)
 8004874:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004878:	6813      	ldr	r3, [r2, #0]
 800487a:	6821      	ldr	r1, [r4, #0]
 800487c:	1d1d      	adds	r5, r3, #4
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	6015      	str	r5, [r2, #0]
 8004882:	060a      	lsls	r2, r1, #24
 8004884:	d50b      	bpl.n	800489e <_printf_i+0x162>
 8004886:	07ca      	lsls	r2, r1, #31
 8004888:	bf44      	itt	mi
 800488a:	f041 0120 	orrmi.w	r1, r1, #32
 800488e:	6021      	strmi	r1, [r4, #0]
 8004890:	b91b      	cbnz	r3, 800489a <_printf_i+0x15e>
 8004892:	6822      	ldr	r2, [r4, #0]
 8004894:	f022 0220 	bic.w	r2, r2, #32
 8004898:	6022      	str	r2, [r4, #0]
 800489a:	2210      	movs	r2, #16
 800489c:	e7b7      	b.n	800480e <_printf_i+0xd2>
 800489e:	064d      	lsls	r5, r1, #25
 80048a0:	bf48      	it	mi
 80048a2:	b29b      	uxthmi	r3, r3
 80048a4:	e7ef      	b.n	8004886 <_printf_i+0x14a>
 80048a6:	4665      	mov	r5, ip
 80048a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80048ac:	fb02 3311 	mls	r3, r2, r1, r3
 80048b0:	5cc3      	ldrb	r3, [r0, r3]
 80048b2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80048b6:	460b      	mov	r3, r1
 80048b8:	2900      	cmp	r1, #0
 80048ba:	d1f5      	bne.n	80048a8 <_printf_i+0x16c>
 80048bc:	e7b9      	b.n	8004832 <_printf_i+0xf6>
 80048be:	6813      	ldr	r3, [r2, #0]
 80048c0:	6825      	ldr	r5, [r4, #0]
 80048c2:	6961      	ldr	r1, [r4, #20]
 80048c4:	1d18      	adds	r0, r3, #4
 80048c6:	6010      	str	r0, [r2, #0]
 80048c8:	0628      	lsls	r0, r5, #24
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	d501      	bpl.n	80048d2 <_printf_i+0x196>
 80048ce:	6019      	str	r1, [r3, #0]
 80048d0:	e002      	b.n	80048d8 <_printf_i+0x19c>
 80048d2:	066a      	lsls	r2, r5, #25
 80048d4:	d5fb      	bpl.n	80048ce <_printf_i+0x192>
 80048d6:	8019      	strh	r1, [r3, #0]
 80048d8:	2300      	movs	r3, #0
 80048da:	6123      	str	r3, [r4, #16]
 80048dc:	4665      	mov	r5, ip
 80048de:	e7b9      	b.n	8004854 <_printf_i+0x118>
 80048e0:	6813      	ldr	r3, [r2, #0]
 80048e2:	1d19      	adds	r1, r3, #4
 80048e4:	6011      	str	r1, [r2, #0]
 80048e6:	681d      	ldr	r5, [r3, #0]
 80048e8:	6862      	ldr	r2, [r4, #4]
 80048ea:	2100      	movs	r1, #0
 80048ec:	4628      	mov	r0, r5
 80048ee:	f7fb fc6f 	bl	80001d0 <memchr>
 80048f2:	b108      	cbz	r0, 80048f8 <_printf_i+0x1bc>
 80048f4:	1b40      	subs	r0, r0, r5
 80048f6:	6060      	str	r0, [r4, #4]
 80048f8:	6863      	ldr	r3, [r4, #4]
 80048fa:	6123      	str	r3, [r4, #16]
 80048fc:	2300      	movs	r3, #0
 80048fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004902:	e7a7      	b.n	8004854 <_printf_i+0x118>
 8004904:	6923      	ldr	r3, [r4, #16]
 8004906:	462a      	mov	r2, r5
 8004908:	4639      	mov	r1, r7
 800490a:	4630      	mov	r0, r6
 800490c:	47c0      	blx	r8
 800490e:	3001      	adds	r0, #1
 8004910:	d0aa      	beq.n	8004868 <_printf_i+0x12c>
 8004912:	6823      	ldr	r3, [r4, #0]
 8004914:	079b      	lsls	r3, r3, #30
 8004916:	d413      	bmi.n	8004940 <_printf_i+0x204>
 8004918:	68e0      	ldr	r0, [r4, #12]
 800491a:	9b03      	ldr	r3, [sp, #12]
 800491c:	4298      	cmp	r0, r3
 800491e:	bfb8      	it	lt
 8004920:	4618      	movlt	r0, r3
 8004922:	e7a3      	b.n	800486c <_printf_i+0x130>
 8004924:	2301      	movs	r3, #1
 8004926:	464a      	mov	r2, r9
 8004928:	4639      	mov	r1, r7
 800492a:	4630      	mov	r0, r6
 800492c:	47c0      	blx	r8
 800492e:	3001      	adds	r0, #1
 8004930:	d09a      	beq.n	8004868 <_printf_i+0x12c>
 8004932:	3501      	adds	r5, #1
 8004934:	68e3      	ldr	r3, [r4, #12]
 8004936:	9a03      	ldr	r2, [sp, #12]
 8004938:	1a9b      	subs	r3, r3, r2
 800493a:	42ab      	cmp	r3, r5
 800493c:	dcf2      	bgt.n	8004924 <_printf_i+0x1e8>
 800493e:	e7eb      	b.n	8004918 <_printf_i+0x1dc>
 8004940:	2500      	movs	r5, #0
 8004942:	f104 0919 	add.w	r9, r4, #25
 8004946:	e7f5      	b.n	8004934 <_printf_i+0x1f8>
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1ac      	bne.n	80048a6 <_printf_i+0x16a>
 800494c:	7803      	ldrb	r3, [r0, #0]
 800494e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004952:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004956:	e76c      	b.n	8004832 <_printf_i+0xf6>
 8004958:	08005039 	.word	0x08005039
 800495c:	0800504a 	.word	0x0800504a

08004960 <_sbrk_r>:
 8004960:	b538      	push	{r3, r4, r5, lr}
 8004962:	4c06      	ldr	r4, [pc, #24]	; (800497c <_sbrk_r+0x1c>)
 8004964:	2300      	movs	r3, #0
 8004966:	4605      	mov	r5, r0
 8004968:	4608      	mov	r0, r1
 800496a:	6023      	str	r3, [r4, #0]
 800496c:	f7fc fbe4 	bl	8001138 <_sbrk>
 8004970:	1c43      	adds	r3, r0, #1
 8004972:	d102      	bne.n	800497a <_sbrk_r+0x1a>
 8004974:	6823      	ldr	r3, [r4, #0]
 8004976:	b103      	cbz	r3, 800497a <_sbrk_r+0x1a>
 8004978:	602b      	str	r3, [r5, #0]
 800497a:	bd38      	pop	{r3, r4, r5, pc}
 800497c:	20001698 	.word	0x20001698

08004980 <__sread>:
 8004980:	b510      	push	{r4, lr}
 8004982:	460c      	mov	r4, r1
 8004984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004988:	f000 fa96 	bl	8004eb8 <_read_r>
 800498c:	2800      	cmp	r0, #0
 800498e:	bfab      	itete	ge
 8004990:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004992:	89a3      	ldrhlt	r3, [r4, #12]
 8004994:	181b      	addge	r3, r3, r0
 8004996:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800499a:	bfac      	ite	ge
 800499c:	6563      	strge	r3, [r4, #84]	; 0x54
 800499e:	81a3      	strhlt	r3, [r4, #12]
 80049a0:	bd10      	pop	{r4, pc}

080049a2 <__swrite>:
 80049a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049a6:	461f      	mov	r7, r3
 80049a8:	898b      	ldrh	r3, [r1, #12]
 80049aa:	05db      	lsls	r3, r3, #23
 80049ac:	4605      	mov	r5, r0
 80049ae:	460c      	mov	r4, r1
 80049b0:	4616      	mov	r6, r2
 80049b2:	d505      	bpl.n	80049c0 <__swrite+0x1e>
 80049b4:	2302      	movs	r3, #2
 80049b6:	2200      	movs	r2, #0
 80049b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049bc:	f000 f9b6 	bl	8004d2c <_lseek_r>
 80049c0:	89a3      	ldrh	r3, [r4, #12]
 80049c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049ca:	81a3      	strh	r3, [r4, #12]
 80049cc:	4632      	mov	r2, r6
 80049ce:	463b      	mov	r3, r7
 80049d0:	4628      	mov	r0, r5
 80049d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049d6:	f000 b869 	b.w	8004aac <_write_r>

080049da <__sseek>:
 80049da:	b510      	push	{r4, lr}
 80049dc:	460c      	mov	r4, r1
 80049de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049e2:	f000 f9a3 	bl	8004d2c <_lseek_r>
 80049e6:	1c43      	adds	r3, r0, #1
 80049e8:	89a3      	ldrh	r3, [r4, #12]
 80049ea:	bf15      	itete	ne
 80049ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80049ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80049f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80049f6:	81a3      	strheq	r3, [r4, #12]
 80049f8:	bf18      	it	ne
 80049fa:	81a3      	strhne	r3, [r4, #12]
 80049fc:	bd10      	pop	{r4, pc}

080049fe <__sclose>:
 80049fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a02:	f000 b8d3 	b.w	8004bac <_close_r>
	...

08004a08 <__swbuf_r>:
 8004a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a0a:	460e      	mov	r6, r1
 8004a0c:	4614      	mov	r4, r2
 8004a0e:	4605      	mov	r5, r0
 8004a10:	b118      	cbz	r0, 8004a1a <__swbuf_r+0x12>
 8004a12:	6983      	ldr	r3, [r0, #24]
 8004a14:	b90b      	cbnz	r3, 8004a1a <__swbuf_r+0x12>
 8004a16:	f7ff fbf7 	bl	8004208 <__sinit>
 8004a1a:	4b21      	ldr	r3, [pc, #132]	; (8004aa0 <__swbuf_r+0x98>)
 8004a1c:	429c      	cmp	r4, r3
 8004a1e:	d12a      	bne.n	8004a76 <__swbuf_r+0x6e>
 8004a20:	686c      	ldr	r4, [r5, #4]
 8004a22:	69a3      	ldr	r3, [r4, #24]
 8004a24:	60a3      	str	r3, [r4, #8]
 8004a26:	89a3      	ldrh	r3, [r4, #12]
 8004a28:	071a      	lsls	r2, r3, #28
 8004a2a:	d52e      	bpl.n	8004a8a <__swbuf_r+0x82>
 8004a2c:	6923      	ldr	r3, [r4, #16]
 8004a2e:	b363      	cbz	r3, 8004a8a <__swbuf_r+0x82>
 8004a30:	6923      	ldr	r3, [r4, #16]
 8004a32:	6820      	ldr	r0, [r4, #0]
 8004a34:	1ac0      	subs	r0, r0, r3
 8004a36:	6963      	ldr	r3, [r4, #20]
 8004a38:	b2f6      	uxtb	r6, r6
 8004a3a:	4283      	cmp	r3, r0
 8004a3c:	4637      	mov	r7, r6
 8004a3e:	dc04      	bgt.n	8004a4a <__swbuf_r+0x42>
 8004a40:	4621      	mov	r1, r4
 8004a42:	4628      	mov	r0, r5
 8004a44:	f000 f948 	bl	8004cd8 <_fflush_r>
 8004a48:	bb28      	cbnz	r0, 8004a96 <__swbuf_r+0x8e>
 8004a4a:	68a3      	ldr	r3, [r4, #8]
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	60a3      	str	r3, [r4, #8]
 8004a50:	6823      	ldr	r3, [r4, #0]
 8004a52:	1c5a      	adds	r2, r3, #1
 8004a54:	6022      	str	r2, [r4, #0]
 8004a56:	701e      	strb	r6, [r3, #0]
 8004a58:	6963      	ldr	r3, [r4, #20]
 8004a5a:	3001      	adds	r0, #1
 8004a5c:	4283      	cmp	r3, r0
 8004a5e:	d004      	beq.n	8004a6a <__swbuf_r+0x62>
 8004a60:	89a3      	ldrh	r3, [r4, #12]
 8004a62:	07db      	lsls	r3, r3, #31
 8004a64:	d519      	bpl.n	8004a9a <__swbuf_r+0x92>
 8004a66:	2e0a      	cmp	r6, #10
 8004a68:	d117      	bne.n	8004a9a <__swbuf_r+0x92>
 8004a6a:	4621      	mov	r1, r4
 8004a6c:	4628      	mov	r0, r5
 8004a6e:	f000 f933 	bl	8004cd8 <_fflush_r>
 8004a72:	b190      	cbz	r0, 8004a9a <__swbuf_r+0x92>
 8004a74:	e00f      	b.n	8004a96 <__swbuf_r+0x8e>
 8004a76:	4b0b      	ldr	r3, [pc, #44]	; (8004aa4 <__swbuf_r+0x9c>)
 8004a78:	429c      	cmp	r4, r3
 8004a7a:	d101      	bne.n	8004a80 <__swbuf_r+0x78>
 8004a7c:	68ac      	ldr	r4, [r5, #8]
 8004a7e:	e7d0      	b.n	8004a22 <__swbuf_r+0x1a>
 8004a80:	4b09      	ldr	r3, [pc, #36]	; (8004aa8 <__swbuf_r+0xa0>)
 8004a82:	429c      	cmp	r4, r3
 8004a84:	bf08      	it	eq
 8004a86:	68ec      	ldreq	r4, [r5, #12]
 8004a88:	e7cb      	b.n	8004a22 <__swbuf_r+0x1a>
 8004a8a:	4621      	mov	r1, r4
 8004a8c:	4628      	mov	r0, r5
 8004a8e:	f000 f81f 	bl	8004ad0 <__swsetup_r>
 8004a92:	2800      	cmp	r0, #0
 8004a94:	d0cc      	beq.n	8004a30 <__swbuf_r+0x28>
 8004a96:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004a9a:	4638      	mov	r0, r7
 8004a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	08004fe8 	.word	0x08004fe8
 8004aa4:	08005008 	.word	0x08005008
 8004aa8:	08004fc8 	.word	0x08004fc8

08004aac <_write_r>:
 8004aac:	b538      	push	{r3, r4, r5, lr}
 8004aae:	4c07      	ldr	r4, [pc, #28]	; (8004acc <_write_r+0x20>)
 8004ab0:	4605      	mov	r5, r0
 8004ab2:	4608      	mov	r0, r1
 8004ab4:	4611      	mov	r1, r2
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	6022      	str	r2, [r4, #0]
 8004aba:	461a      	mov	r2, r3
 8004abc:	f7fb ffb4 	bl	8000a28 <_write>
 8004ac0:	1c43      	adds	r3, r0, #1
 8004ac2:	d102      	bne.n	8004aca <_write_r+0x1e>
 8004ac4:	6823      	ldr	r3, [r4, #0]
 8004ac6:	b103      	cbz	r3, 8004aca <_write_r+0x1e>
 8004ac8:	602b      	str	r3, [r5, #0]
 8004aca:	bd38      	pop	{r3, r4, r5, pc}
 8004acc:	20001698 	.word	0x20001698

08004ad0 <__swsetup_r>:
 8004ad0:	4b32      	ldr	r3, [pc, #200]	; (8004b9c <__swsetup_r+0xcc>)
 8004ad2:	b570      	push	{r4, r5, r6, lr}
 8004ad4:	681d      	ldr	r5, [r3, #0]
 8004ad6:	4606      	mov	r6, r0
 8004ad8:	460c      	mov	r4, r1
 8004ada:	b125      	cbz	r5, 8004ae6 <__swsetup_r+0x16>
 8004adc:	69ab      	ldr	r3, [r5, #24]
 8004ade:	b913      	cbnz	r3, 8004ae6 <__swsetup_r+0x16>
 8004ae0:	4628      	mov	r0, r5
 8004ae2:	f7ff fb91 	bl	8004208 <__sinit>
 8004ae6:	4b2e      	ldr	r3, [pc, #184]	; (8004ba0 <__swsetup_r+0xd0>)
 8004ae8:	429c      	cmp	r4, r3
 8004aea:	d10f      	bne.n	8004b0c <__swsetup_r+0x3c>
 8004aec:	686c      	ldr	r4, [r5, #4]
 8004aee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	0715      	lsls	r5, r2, #28
 8004af6:	d42c      	bmi.n	8004b52 <__swsetup_r+0x82>
 8004af8:	06d0      	lsls	r0, r2, #27
 8004afa:	d411      	bmi.n	8004b20 <__swsetup_r+0x50>
 8004afc:	2209      	movs	r2, #9
 8004afe:	6032      	str	r2, [r6, #0]
 8004b00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b04:	81a3      	strh	r3, [r4, #12]
 8004b06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b0a:	e03e      	b.n	8004b8a <__swsetup_r+0xba>
 8004b0c:	4b25      	ldr	r3, [pc, #148]	; (8004ba4 <__swsetup_r+0xd4>)
 8004b0e:	429c      	cmp	r4, r3
 8004b10:	d101      	bne.n	8004b16 <__swsetup_r+0x46>
 8004b12:	68ac      	ldr	r4, [r5, #8]
 8004b14:	e7eb      	b.n	8004aee <__swsetup_r+0x1e>
 8004b16:	4b24      	ldr	r3, [pc, #144]	; (8004ba8 <__swsetup_r+0xd8>)
 8004b18:	429c      	cmp	r4, r3
 8004b1a:	bf08      	it	eq
 8004b1c:	68ec      	ldreq	r4, [r5, #12]
 8004b1e:	e7e6      	b.n	8004aee <__swsetup_r+0x1e>
 8004b20:	0751      	lsls	r1, r2, #29
 8004b22:	d512      	bpl.n	8004b4a <__swsetup_r+0x7a>
 8004b24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b26:	b141      	cbz	r1, 8004b3a <__swsetup_r+0x6a>
 8004b28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b2c:	4299      	cmp	r1, r3
 8004b2e:	d002      	beq.n	8004b36 <__swsetup_r+0x66>
 8004b30:	4630      	mov	r0, r6
 8004b32:	f000 f973 	bl	8004e1c <_free_r>
 8004b36:	2300      	movs	r3, #0
 8004b38:	6363      	str	r3, [r4, #52]	; 0x34
 8004b3a:	89a3      	ldrh	r3, [r4, #12]
 8004b3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004b40:	81a3      	strh	r3, [r4, #12]
 8004b42:	2300      	movs	r3, #0
 8004b44:	6063      	str	r3, [r4, #4]
 8004b46:	6923      	ldr	r3, [r4, #16]
 8004b48:	6023      	str	r3, [r4, #0]
 8004b4a:	89a3      	ldrh	r3, [r4, #12]
 8004b4c:	f043 0308 	orr.w	r3, r3, #8
 8004b50:	81a3      	strh	r3, [r4, #12]
 8004b52:	6923      	ldr	r3, [r4, #16]
 8004b54:	b94b      	cbnz	r3, 8004b6a <__swsetup_r+0x9a>
 8004b56:	89a3      	ldrh	r3, [r4, #12]
 8004b58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004b5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b60:	d003      	beq.n	8004b6a <__swsetup_r+0x9a>
 8004b62:	4621      	mov	r1, r4
 8004b64:	4630      	mov	r0, r6
 8004b66:	f000 f917 	bl	8004d98 <__smakebuf_r>
 8004b6a:	89a2      	ldrh	r2, [r4, #12]
 8004b6c:	f012 0301 	ands.w	r3, r2, #1
 8004b70:	d00c      	beq.n	8004b8c <__swsetup_r+0xbc>
 8004b72:	2300      	movs	r3, #0
 8004b74:	60a3      	str	r3, [r4, #8]
 8004b76:	6963      	ldr	r3, [r4, #20]
 8004b78:	425b      	negs	r3, r3
 8004b7a:	61a3      	str	r3, [r4, #24]
 8004b7c:	6923      	ldr	r3, [r4, #16]
 8004b7e:	b953      	cbnz	r3, 8004b96 <__swsetup_r+0xc6>
 8004b80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b84:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004b88:	d1ba      	bne.n	8004b00 <__swsetup_r+0x30>
 8004b8a:	bd70      	pop	{r4, r5, r6, pc}
 8004b8c:	0792      	lsls	r2, r2, #30
 8004b8e:	bf58      	it	pl
 8004b90:	6963      	ldrpl	r3, [r4, #20]
 8004b92:	60a3      	str	r3, [r4, #8]
 8004b94:	e7f2      	b.n	8004b7c <__swsetup_r+0xac>
 8004b96:	2000      	movs	r0, #0
 8004b98:	e7f7      	b.n	8004b8a <__swsetup_r+0xba>
 8004b9a:	bf00      	nop
 8004b9c:	2000000c 	.word	0x2000000c
 8004ba0:	08004fe8 	.word	0x08004fe8
 8004ba4:	08005008 	.word	0x08005008
 8004ba8:	08004fc8 	.word	0x08004fc8

08004bac <_close_r>:
 8004bac:	b538      	push	{r3, r4, r5, lr}
 8004bae:	4c06      	ldr	r4, [pc, #24]	; (8004bc8 <_close_r+0x1c>)
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	4605      	mov	r5, r0
 8004bb4:	4608      	mov	r0, r1
 8004bb6:	6023      	str	r3, [r4, #0]
 8004bb8:	f7fc fa89 	bl	80010ce <_close>
 8004bbc:	1c43      	adds	r3, r0, #1
 8004bbe:	d102      	bne.n	8004bc6 <_close_r+0x1a>
 8004bc0:	6823      	ldr	r3, [r4, #0]
 8004bc2:	b103      	cbz	r3, 8004bc6 <_close_r+0x1a>
 8004bc4:	602b      	str	r3, [r5, #0]
 8004bc6:	bd38      	pop	{r3, r4, r5, pc}
 8004bc8:	20001698 	.word	0x20001698

08004bcc <__sflush_r>:
 8004bcc:	898a      	ldrh	r2, [r1, #12]
 8004bce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bd2:	4605      	mov	r5, r0
 8004bd4:	0710      	lsls	r0, r2, #28
 8004bd6:	460c      	mov	r4, r1
 8004bd8:	d458      	bmi.n	8004c8c <__sflush_r+0xc0>
 8004bda:	684b      	ldr	r3, [r1, #4]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	dc05      	bgt.n	8004bec <__sflush_r+0x20>
 8004be0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	dc02      	bgt.n	8004bec <__sflush_r+0x20>
 8004be6:	2000      	movs	r0, #0
 8004be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004bee:	2e00      	cmp	r6, #0
 8004bf0:	d0f9      	beq.n	8004be6 <__sflush_r+0x1a>
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004bf8:	682f      	ldr	r7, [r5, #0]
 8004bfa:	6a21      	ldr	r1, [r4, #32]
 8004bfc:	602b      	str	r3, [r5, #0]
 8004bfe:	d032      	beq.n	8004c66 <__sflush_r+0x9a>
 8004c00:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004c02:	89a3      	ldrh	r3, [r4, #12]
 8004c04:	075a      	lsls	r2, r3, #29
 8004c06:	d505      	bpl.n	8004c14 <__sflush_r+0x48>
 8004c08:	6863      	ldr	r3, [r4, #4]
 8004c0a:	1ac0      	subs	r0, r0, r3
 8004c0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c0e:	b10b      	cbz	r3, 8004c14 <__sflush_r+0x48>
 8004c10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c12:	1ac0      	subs	r0, r0, r3
 8004c14:	2300      	movs	r3, #0
 8004c16:	4602      	mov	r2, r0
 8004c18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c1a:	6a21      	ldr	r1, [r4, #32]
 8004c1c:	4628      	mov	r0, r5
 8004c1e:	47b0      	blx	r6
 8004c20:	1c43      	adds	r3, r0, #1
 8004c22:	89a3      	ldrh	r3, [r4, #12]
 8004c24:	d106      	bne.n	8004c34 <__sflush_r+0x68>
 8004c26:	6829      	ldr	r1, [r5, #0]
 8004c28:	291d      	cmp	r1, #29
 8004c2a:	d848      	bhi.n	8004cbe <__sflush_r+0xf2>
 8004c2c:	4a29      	ldr	r2, [pc, #164]	; (8004cd4 <__sflush_r+0x108>)
 8004c2e:	40ca      	lsrs	r2, r1
 8004c30:	07d6      	lsls	r6, r2, #31
 8004c32:	d544      	bpl.n	8004cbe <__sflush_r+0xf2>
 8004c34:	2200      	movs	r2, #0
 8004c36:	6062      	str	r2, [r4, #4]
 8004c38:	04d9      	lsls	r1, r3, #19
 8004c3a:	6922      	ldr	r2, [r4, #16]
 8004c3c:	6022      	str	r2, [r4, #0]
 8004c3e:	d504      	bpl.n	8004c4a <__sflush_r+0x7e>
 8004c40:	1c42      	adds	r2, r0, #1
 8004c42:	d101      	bne.n	8004c48 <__sflush_r+0x7c>
 8004c44:	682b      	ldr	r3, [r5, #0]
 8004c46:	b903      	cbnz	r3, 8004c4a <__sflush_r+0x7e>
 8004c48:	6560      	str	r0, [r4, #84]	; 0x54
 8004c4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c4c:	602f      	str	r7, [r5, #0]
 8004c4e:	2900      	cmp	r1, #0
 8004c50:	d0c9      	beq.n	8004be6 <__sflush_r+0x1a>
 8004c52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c56:	4299      	cmp	r1, r3
 8004c58:	d002      	beq.n	8004c60 <__sflush_r+0x94>
 8004c5a:	4628      	mov	r0, r5
 8004c5c:	f000 f8de 	bl	8004e1c <_free_r>
 8004c60:	2000      	movs	r0, #0
 8004c62:	6360      	str	r0, [r4, #52]	; 0x34
 8004c64:	e7c0      	b.n	8004be8 <__sflush_r+0x1c>
 8004c66:	2301      	movs	r3, #1
 8004c68:	4628      	mov	r0, r5
 8004c6a:	47b0      	blx	r6
 8004c6c:	1c41      	adds	r1, r0, #1
 8004c6e:	d1c8      	bne.n	8004c02 <__sflush_r+0x36>
 8004c70:	682b      	ldr	r3, [r5, #0]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d0c5      	beq.n	8004c02 <__sflush_r+0x36>
 8004c76:	2b1d      	cmp	r3, #29
 8004c78:	d001      	beq.n	8004c7e <__sflush_r+0xb2>
 8004c7a:	2b16      	cmp	r3, #22
 8004c7c:	d101      	bne.n	8004c82 <__sflush_r+0xb6>
 8004c7e:	602f      	str	r7, [r5, #0]
 8004c80:	e7b1      	b.n	8004be6 <__sflush_r+0x1a>
 8004c82:	89a3      	ldrh	r3, [r4, #12]
 8004c84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c88:	81a3      	strh	r3, [r4, #12]
 8004c8a:	e7ad      	b.n	8004be8 <__sflush_r+0x1c>
 8004c8c:	690f      	ldr	r7, [r1, #16]
 8004c8e:	2f00      	cmp	r7, #0
 8004c90:	d0a9      	beq.n	8004be6 <__sflush_r+0x1a>
 8004c92:	0793      	lsls	r3, r2, #30
 8004c94:	680e      	ldr	r6, [r1, #0]
 8004c96:	bf08      	it	eq
 8004c98:	694b      	ldreq	r3, [r1, #20]
 8004c9a:	600f      	str	r7, [r1, #0]
 8004c9c:	bf18      	it	ne
 8004c9e:	2300      	movne	r3, #0
 8004ca0:	eba6 0807 	sub.w	r8, r6, r7
 8004ca4:	608b      	str	r3, [r1, #8]
 8004ca6:	f1b8 0f00 	cmp.w	r8, #0
 8004caa:	dd9c      	ble.n	8004be6 <__sflush_r+0x1a>
 8004cac:	4643      	mov	r3, r8
 8004cae:	463a      	mov	r2, r7
 8004cb0:	6a21      	ldr	r1, [r4, #32]
 8004cb2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004cb4:	4628      	mov	r0, r5
 8004cb6:	47b0      	blx	r6
 8004cb8:	2800      	cmp	r0, #0
 8004cba:	dc06      	bgt.n	8004cca <__sflush_r+0xfe>
 8004cbc:	89a3      	ldrh	r3, [r4, #12]
 8004cbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cc2:	81a3      	strh	r3, [r4, #12]
 8004cc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cc8:	e78e      	b.n	8004be8 <__sflush_r+0x1c>
 8004cca:	4407      	add	r7, r0
 8004ccc:	eba8 0800 	sub.w	r8, r8, r0
 8004cd0:	e7e9      	b.n	8004ca6 <__sflush_r+0xda>
 8004cd2:	bf00      	nop
 8004cd4:	20400001 	.word	0x20400001

08004cd8 <_fflush_r>:
 8004cd8:	b538      	push	{r3, r4, r5, lr}
 8004cda:	690b      	ldr	r3, [r1, #16]
 8004cdc:	4605      	mov	r5, r0
 8004cde:	460c      	mov	r4, r1
 8004ce0:	b1db      	cbz	r3, 8004d1a <_fflush_r+0x42>
 8004ce2:	b118      	cbz	r0, 8004cec <_fflush_r+0x14>
 8004ce4:	6983      	ldr	r3, [r0, #24]
 8004ce6:	b90b      	cbnz	r3, 8004cec <_fflush_r+0x14>
 8004ce8:	f7ff fa8e 	bl	8004208 <__sinit>
 8004cec:	4b0c      	ldr	r3, [pc, #48]	; (8004d20 <_fflush_r+0x48>)
 8004cee:	429c      	cmp	r4, r3
 8004cf0:	d109      	bne.n	8004d06 <_fflush_r+0x2e>
 8004cf2:	686c      	ldr	r4, [r5, #4]
 8004cf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cf8:	b17b      	cbz	r3, 8004d1a <_fflush_r+0x42>
 8004cfa:	4621      	mov	r1, r4
 8004cfc:	4628      	mov	r0, r5
 8004cfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d02:	f7ff bf63 	b.w	8004bcc <__sflush_r>
 8004d06:	4b07      	ldr	r3, [pc, #28]	; (8004d24 <_fflush_r+0x4c>)
 8004d08:	429c      	cmp	r4, r3
 8004d0a:	d101      	bne.n	8004d10 <_fflush_r+0x38>
 8004d0c:	68ac      	ldr	r4, [r5, #8]
 8004d0e:	e7f1      	b.n	8004cf4 <_fflush_r+0x1c>
 8004d10:	4b05      	ldr	r3, [pc, #20]	; (8004d28 <_fflush_r+0x50>)
 8004d12:	429c      	cmp	r4, r3
 8004d14:	bf08      	it	eq
 8004d16:	68ec      	ldreq	r4, [r5, #12]
 8004d18:	e7ec      	b.n	8004cf4 <_fflush_r+0x1c>
 8004d1a:	2000      	movs	r0, #0
 8004d1c:	bd38      	pop	{r3, r4, r5, pc}
 8004d1e:	bf00      	nop
 8004d20:	08004fe8 	.word	0x08004fe8
 8004d24:	08005008 	.word	0x08005008
 8004d28:	08004fc8 	.word	0x08004fc8

08004d2c <_lseek_r>:
 8004d2c:	b538      	push	{r3, r4, r5, lr}
 8004d2e:	4c07      	ldr	r4, [pc, #28]	; (8004d4c <_lseek_r+0x20>)
 8004d30:	4605      	mov	r5, r0
 8004d32:	4608      	mov	r0, r1
 8004d34:	4611      	mov	r1, r2
 8004d36:	2200      	movs	r2, #0
 8004d38:	6022      	str	r2, [r4, #0]
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	f7fc f9ee 	bl	800111c <_lseek>
 8004d40:	1c43      	adds	r3, r0, #1
 8004d42:	d102      	bne.n	8004d4a <_lseek_r+0x1e>
 8004d44:	6823      	ldr	r3, [r4, #0]
 8004d46:	b103      	cbz	r3, 8004d4a <_lseek_r+0x1e>
 8004d48:	602b      	str	r3, [r5, #0]
 8004d4a:	bd38      	pop	{r3, r4, r5, pc}
 8004d4c:	20001698 	.word	0x20001698

08004d50 <__swhatbuf_r>:
 8004d50:	b570      	push	{r4, r5, r6, lr}
 8004d52:	460e      	mov	r6, r1
 8004d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d58:	2900      	cmp	r1, #0
 8004d5a:	b096      	sub	sp, #88	; 0x58
 8004d5c:	4614      	mov	r4, r2
 8004d5e:	461d      	mov	r5, r3
 8004d60:	da07      	bge.n	8004d72 <__swhatbuf_r+0x22>
 8004d62:	2300      	movs	r3, #0
 8004d64:	602b      	str	r3, [r5, #0]
 8004d66:	89b3      	ldrh	r3, [r6, #12]
 8004d68:	061a      	lsls	r2, r3, #24
 8004d6a:	d410      	bmi.n	8004d8e <__swhatbuf_r+0x3e>
 8004d6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d70:	e00e      	b.n	8004d90 <__swhatbuf_r+0x40>
 8004d72:	466a      	mov	r2, sp
 8004d74:	f000 f8b2 	bl	8004edc <_fstat_r>
 8004d78:	2800      	cmp	r0, #0
 8004d7a:	dbf2      	blt.n	8004d62 <__swhatbuf_r+0x12>
 8004d7c:	9a01      	ldr	r2, [sp, #4]
 8004d7e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004d82:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004d86:	425a      	negs	r2, r3
 8004d88:	415a      	adcs	r2, r3
 8004d8a:	602a      	str	r2, [r5, #0]
 8004d8c:	e7ee      	b.n	8004d6c <__swhatbuf_r+0x1c>
 8004d8e:	2340      	movs	r3, #64	; 0x40
 8004d90:	2000      	movs	r0, #0
 8004d92:	6023      	str	r3, [r4, #0]
 8004d94:	b016      	add	sp, #88	; 0x58
 8004d96:	bd70      	pop	{r4, r5, r6, pc}

08004d98 <__smakebuf_r>:
 8004d98:	898b      	ldrh	r3, [r1, #12]
 8004d9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d9c:	079d      	lsls	r5, r3, #30
 8004d9e:	4606      	mov	r6, r0
 8004da0:	460c      	mov	r4, r1
 8004da2:	d507      	bpl.n	8004db4 <__smakebuf_r+0x1c>
 8004da4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004da8:	6023      	str	r3, [r4, #0]
 8004daa:	6123      	str	r3, [r4, #16]
 8004dac:	2301      	movs	r3, #1
 8004dae:	6163      	str	r3, [r4, #20]
 8004db0:	b002      	add	sp, #8
 8004db2:	bd70      	pop	{r4, r5, r6, pc}
 8004db4:	ab01      	add	r3, sp, #4
 8004db6:	466a      	mov	r2, sp
 8004db8:	f7ff ffca 	bl	8004d50 <__swhatbuf_r>
 8004dbc:	9900      	ldr	r1, [sp, #0]
 8004dbe:	4605      	mov	r5, r0
 8004dc0:	4630      	mov	r0, r6
 8004dc2:	f7ff faab 	bl	800431c <_malloc_r>
 8004dc6:	b948      	cbnz	r0, 8004ddc <__smakebuf_r+0x44>
 8004dc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dcc:	059a      	lsls	r2, r3, #22
 8004dce:	d4ef      	bmi.n	8004db0 <__smakebuf_r+0x18>
 8004dd0:	f023 0303 	bic.w	r3, r3, #3
 8004dd4:	f043 0302 	orr.w	r3, r3, #2
 8004dd8:	81a3      	strh	r3, [r4, #12]
 8004dda:	e7e3      	b.n	8004da4 <__smakebuf_r+0xc>
 8004ddc:	4b0d      	ldr	r3, [pc, #52]	; (8004e14 <__smakebuf_r+0x7c>)
 8004dde:	62b3      	str	r3, [r6, #40]	; 0x28
 8004de0:	89a3      	ldrh	r3, [r4, #12]
 8004de2:	6020      	str	r0, [r4, #0]
 8004de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004de8:	81a3      	strh	r3, [r4, #12]
 8004dea:	9b00      	ldr	r3, [sp, #0]
 8004dec:	6163      	str	r3, [r4, #20]
 8004dee:	9b01      	ldr	r3, [sp, #4]
 8004df0:	6120      	str	r0, [r4, #16]
 8004df2:	b15b      	cbz	r3, 8004e0c <__smakebuf_r+0x74>
 8004df4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004df8:	4630      	mov	r0, r6
 8004dfa:	f000 f881 	bl	8004f00 <_isatty_r>
 8004dfe:	b128      	cbz	r0, 8004e0c <__smakebuf_r+0x74>
 8004e00:	89a3      	ldrh	r3, [r4, #12]
 8004e02:	f023 0303 	bic.w	r3, r3, #3
 8004e06:	f043 0301 	orr.w	r3, r3, #1
 8004e0a:	81a3      	strh	r3, [r4, #12]
 8004e0c:	89a3      	ldrh	r3, [r4, #12]
 8004e0e:	431d      	orrs	r5, r3
 8004e10:	81a5      	strh	r5, [r4, #12]
 8004e12:	e7cd      	b.n	8004db0 <__smakebuf_r+0x18>
 8004e14:	080041d1 	.word	0x080041d1

08004e18 <__malloc_lock>:
 8004e18:	4770      	bx	lr

08004e1a <__malloc_unlock>:
 8004e1a:	4770      	bx	lr

08004e1c <_free_r>:
 8004e1c:	b538      	push	{r3, r4, r5, lr}
 8004e1e:	4605      	mov	r5, r0
 8004e20:	2900      	cmp	r1, #0
 8004e22:	d045      	beq.n	8004eb0 <_free_r+0x94>
 8004e24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e28:	1f0c      	subs	r4, r1, #4
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	bfb8      	it	lt
 8004e2e:	18e4      	addlt	r4, r4, r3
 8004e30:	f7ff fff2 	bl	8004e18 <__malloc_lock>
 8004e34:	4a1f      	ldr	r2, [pc, #124]	; (8004eb4 <_free_r+0x98>)
 8004e36:	6813      	ldr	r3, [r2, #0]
 8004e38:	4610      	mov	r0, r2
 8004e3a:	b933      	cbnz	r3, 8004e4a <_free_r+0x2e>
 8004e3c:	6063      	str	r3, [r4, #4]
 8004e3e:	6014      	str	r4, [r2, #0]
 8004e40:	4628      	mov	r0, r5
 8004e42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e46:	f7ff bfe8 	b.w	8004e1a <__malloc_unlock>
 8004e4a:	42a3      	cmp	r3, r4
 8004e4c:	d90c      	bls.n	8004e68 <_free_r+0x4c>
 8004e4e:	6821      	ldr	r1, [r4, #0]
 8004e50:	1862      	adds	r2, r4, r1
 8004e52:	4293      	cmp	r3, r2
 8004e54:	bf04      	itt	eq
 8004e56:	681a      	ldreq	r2, [r3, #0]
 8004e58:	685b      	ldreq	r3, [r3, #4]
 8004e5a:	6063      	str	r3, [r4, #4]
 8004e5c:	bf04      	itt	eq
 8004e5e:	1852      	addeq	r2, r2, r1
 8004e60:	6022      	streq	r2, [r4, #0]
 8004e62:	6004      	str	r4, [r0, #0]
 8004e64:	e7ec      	b.n	8004e40 <_free_r+0x24>
 8004e66:	4613      	mov	r3, r2
 8004e68:	685a      	ldr	r2, [r3, #4]
 8004e6a:	b10a      	cbz	r2, 8004e70 <_free_r+0x54>
 8004e6c:	42a2      	cmp	r2, r4
 8004e6e:	d9fa      	bls.n	8004e66 <_free_r+0x4a>
 8004e70:	6819      	ldr	r1, [r3, #0]
 8004e72:	1858      	adds	r0, r3, r1
 8004e74:	42a0      	cmp	r0, r4
 8004e76:	d10b      	bne.n	8004e90 <_free_r+0x74>
 8004e78:	6820      	ldr	r0, [r4, #0]
 8004e7a:	4401      	add	r1, r0
 8004e7c:	1858      	adds	r0, r3, r1
 8004e7e:	4282      	cmp	r2, r0
 8004e80:	6019      	str	r1, [r3, #0]
 8004e82:	d1dd      	bne.n	8004e40 <_free_r+0x24>
 8004e84:	6810      	ldr	r0, [r2, #0]
 8004e86:	6852      	ldr	r2, [r2, #4]
 8004e88:	605a      	str	r2, [r3, #4]
 8004e8a:	4401      	add	r1, r0
 8004e8c:	6019      	str	r1, [r3, #0]
 8004e8e:	e7d7      	b.n	8004e40 <_free_r+0x24>
 8004e90:	d902      	bls.n	8004e98 <_free_r+0x7c>
 8004e92:	230c      	movs	r3, #12
 8004e94:	602b      	str	r3, [r5, #0]
 8004e96:	e7d3      	b.n	8004e40 <_free_r+0x24>
 8004e98:	6820      	ldr	r0, [r4, #0]
 8004e9a:	1821      	adds	r1, r4, r0
 8004e9c:	428a      	cmp	r2, r1
 8004e9e:	bf04      	itt	eq
 8004ea0:	6811      	ldreq	r1, [r2, #0]
 8004ea2:	6852      	ldreq	r2, [r2, #4]
 8004ea4:	6062      	str	r2, [r4, #4]
 8004ea6:	bf04      	itt	eq
 8004ea8:	1809      	addeq	r1, r1, r0
 8004eaa:	6021      	streq	r1, [r4, #0]
 8004eac:	605c      	str	r4, [r3, #4]
 8004eae:	e7c7      	b.n	8004e40 <_free_r+0x24>
 8004eb0:	bd38      	pop	{r3, r4, r5, pc}
 8004eb2:	bf00      	nop
 8004eb4:	200004a0 	.word	0x200004a0

08004eb8 <_read_r>:
 8004eb8:	b538      	push	{r3, r4, r5, lr}
 8004eba:	4c07      	ldr	r4, [pc, #28]	; (8004ed8 <_read_r+0x20>)
 8004ebc:	4605      	mov	r5, r0
 8004ebe:	4608      	mov	r0, r1
 8004ec0:	4611      	mov	r1, r2
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	6022      	str	r2, [r4, #0]
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	f7fc f8e4 	bl	8001094 <_read>
 8004ecc:	1c43      	adds	r3, r0, #1
 8004ece:	d102      	bne.n	8004ed6 <_read_r+0x1e>
 8004ed0:	6823      	ldr	r3, [r4, #0]
 8004ed2:	b103      	cbz	r3, 8004ed6 <_read_r+0x1e>
 8004ed4:	602b      	str	r3, [r5, #0]
 8004ed6:	bd38      	pop	{r3, r4, r5, pc}
 8004ed8:	20001698 	.word	0x20001698

08004edc <_fstat_r>:
 8004edc:	b538      	push	{r3, r4, r5, lr}
 8004ede:	4c07      	ldr	r4, [pc, #28]	; (8004efc <_fstat_r+0x20>)
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	4605      	mov	r5, r0
 8004ee4:	4608      	mov	r0, r1
 8004ee6:	4611      	mov	r1, r2
 8004ee8:	6023      	str	r3, [r4, #0]
 8004eea:	f7fc f8fc 	bl	80010e6 <_fstat>
 8004eee:	1c43      	adds	r3, r0, #1
 8004ef0:	d102      	bne.n	8004ef8 <_fstat_r+0x1c>
 8004ef2:	6823      	ldr	r3, [r4, #0]
 8004ef4:	b103      	cbz	r3, 8004ef8 <_fstat_r+0x1c>
 8004ef6:	602b      	str	r3, [r5, #0]
 8004ef8:	bd38      	pop	{r3, r4, r5, pc}
 8004efa:	bf00      	nop
 8004efc:	20001698 	.word	0x20001698

08004f00 <_isatty_r>:
 8004f00:	b538      	push	{r3, r4, r5, lr}
 8004f02:	4c06      	ldr	r4, [pc, #24]	; (8004f1c <_isatty_r+0x1c>)
 8004f04:	2300      	movs	r3, #0
 8004f06:	4605      	mov	r5, r0
 8004f08:	4608      	mov	r0, r1
 8004f0a:	6023      	str	r3, [r4, #0]
 8004f0c:	f7fc f8fb 	bl	8001106 <_isatty>
 8004f10:	1c43      	adds	r3, r0, #1
 8004f12:	d102      	bne.n	8004f1a <_isatty_r+0x1a>
 8004f14:	6823      	ldr	r3, [r4, #0]
 8004f16:	b103      	cbz	r3, 8004f1a <_isatty_r+0x1a>
 8004f18:	602b      	str	r3, [r5, #0]
 8004f1a:	bd38      	pop	{r3, r4, r5, pc}
 8004f1c:	20001698 	.word	0x20001698

08004f20 <roundf>:
 8004f20:	ee10 0a10 	vmov	r0, s0
 8004f24:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8004f28:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8004f2c:	2a16      	cmp	r2, #22
 8004f2e:	dc15      	bgt.n	8004f5c <roundf+0x3c>
 8004f30:	2a00      	cmp	r2, #0
 8004f32:	da08      	bge.n	8004f46 <roundf+0x26>
 8004f34:	3201      	adds	r2, #1
 8004f36:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8004f3a:	d101      	bne.n	8004f40 <roundf+0x20>
 8004f3c:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8004f40:	ee00 3a10 	vmov	s0, r3
 8004f44:	4770      	bx	lr
 8004f46:	4908      	ldr	r1, [pc, #32]	; (8004f68 <roundf+0x48>)
 8004f48:	4111      	asrs	r1, r2
 8004f4a:	4208      	tst	r0, r1
 8004f4c:	d0fa      	beq.n	8004f44 <roundf+0x24>
 8004f4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004f52:	4113      	asrs	r3, r2
 8004f54:	4403      	add	r3, r0
 8004f56:	ea23 0301 	bic.w	r3, r3, r1
 8004f5a:	e7f1      	b.n	8004f40 <roundf+0x20>
 8004f5c:	2a80      	cmp	r2, #128	; 0x80
 8004f5e:	d1f1      	bne.n	8004f44 <roundf+0x24>
 8004f60:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	007fffff 	.word	0x007fffff

08004f6c <_init>:
 8004f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f6e:	bf00      	nop
 8004f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f72:	bc08      	pop	{r3}
 8004f74:	469e      	mov	lr, r3
 8004f76:	4770      	bx	lr

08004f78 <_fini>:
 8004f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f7a:	bf00      	nop
 8004f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f7e:	bc08      	pop	{r3}
 8004f80:	469e      	mov	lr, r3
 8004f82:	4770      	bx	lr
