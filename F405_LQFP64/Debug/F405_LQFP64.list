
F405_LQFP64.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a10  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003b98  08003b98  00013b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bb0  08003bb0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003bb0  08003bb0  00013bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003bb8  08003bb8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bb8  08003bb8  00013bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bbc  08003bbc  00013bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003bc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001164  2000000c  08003bcc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001170  08003bcc  00021170  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a3b1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f32  00000000  00000000  0002a3ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000820  00000000  00000000  0002c320  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000708  00000000  00000000  0002cb40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f94b  00000000  00000000  0002d248  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009e54  00000000  00000000  0004cb93  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bc5f7  00000000  00000000  000569e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00112fde  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e98  00000000  00000000  0011305c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003b80 	.word	0x08003b80

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003b80 	.word	0x08003b80

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80004ce:	463b      	mov	r3, r7
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	605a      	str	r2, [r3, #4]
 80004d6:	609a      	str	r2, [r3, #8]
 80004d8:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004da:	4b21      	ldr	r3, [pc, #132]	; (8000560 <MX_ADC1_Init+0x98>)
 80004dc:	4a21      	ldr	r2, [pc, #132]	; (8000564 <MX_ADC1_Init+0x9c>)
 80004de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004e0:	4b1f      	ldr	r3, [pc, #124]	; (8000560 <MX_ADC1_Init+0x98>)
 80004e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80004e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004e8:	4b1d      	ldr	r3, [pc, #116]	; (8000560 <MX_ADC1_Init+0x98>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80004ee:	4b1c      	ldr	r3, [pc, #112]	; (8000560 <MX_ADC1_Init+0x98>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004f4:	4b1a      	ldr	r3, [pc, #104]	; (8000560 <MX_ADC1_Init+0x98>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004fa:	4b19      	ldr	r3, [pc, #100]	; (8000560 <MX_ADC1_Init+0x98>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000502:	4b17      	ldr	r3, [pc, #92]	; (8000560 <MX_ADC1_Init+0x98>)
 8000504:	2200      	movs	r2, #0
 8000506:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000508:	4b15      	ldr	r3, [pc, #84]	; (8000560 <MX_ADC1_Init+0x98>)
 800050a:	4a17      	ldr	r2, [pc, #92]	; (8000568 <MX_ADC1_Init+0xa0>)
 800050c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800050e:	4b14      	ldr	r3, [pc, #80]	; (8000560 <MX_ADC1_Init+0x98>)
 8000510:	2200      	movs	r2, #0
 8000512:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <MX_ADC1_Init+0x98>)
 8000516:	2201      	movs	r2, #1
 8000518:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800051a:	4b11      	ldr	r3, [pc, #68]	; (8000560 <MX_ADC1_Init+0x98>)
 800051c:	2200      	movs	r2, #0
 800051e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000522:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <MX_ADC1_Init+0x98>)
 8000524:	2201      	movs	r2, #1
 8000526:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000528:	480d      	ldr	r0, [pc, #52]	; (8000560 <MX_ADC1_Init+0x98>)
 800052a:	f000 fdf1 	bl	8001110 <HAL_ADC_Init>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000534:	f000 fcc8 	bl	8000ec8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000538:	2300      	movs	r3, #0
 800053a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800053c:	2301      	movs	r3, #1
 800053e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000544:	463b      	mov	r3, r7
 8000546:	4619      	mov	r1, r3
 8000548:	4805      	ldr	r0, [pc, #20]	; (8000560 <MX_ADC1_Init+0x98>)
 800054a:	f000 fe25 	bl	8001198 <HAL_ADC_ConfigChannel>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000554:	f000 fcb8 	bl	8000ec8 <Error_Handler>
  }

}
 8000558:	bf00      	nop
 800055a:	3710      	adds	r7, #16
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000028 	.word	0x20000028
 8000564:	40012000 	.word	0x40012000
 8000568:	0f000001 	.word	0x0f000001

0800056c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08a      	sub	sp, #40	; 0x28
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000574:	f107 0314 	add.w	r3, r7, #20
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a17      	ldr	r2, [pc, #92]	; (80005e8 <HAL_ADC_MspInit+0x7c>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d127      	bne.n	80005de <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	613b      	str	r3, [r7, #16]
 8000592:	4b16      	ldr	r3, [pc, #88]	; (80005ec <HAL_ADC_MspInit+0x80>)
 8000594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000596:	4a15      	ldr	r2, [pc, #84]	; (80005ec <HAL_ADC_MspInit+0x80>)
 8000598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800059c:	6453      	str	r3, [r2, #68]	; 0x44
 800059e:	4b13      	ldr	r3, [pc, #76]	; (80005ec <HAL_ADC_MspInit+0x80>)
 80005a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005a6:	613b      	str	r3, [r7, #16]
 80005a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <HAL_ADC_MspInit+0x80>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a0e      	ldr	r2, [pc, #56]	; (80005ec <HAL_ADC_MspInit+0x80>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <HAL_ADC_MspInit+0x80>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = FootExp_IN_Pin|UserPotA_IN_Pin|UserPotB_IN_Pin;
 80005c6:	2307      	movs	r3, #7
 80005c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ca:	2303      	movs	r3, #3
 80005cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	4619      	mov	r1, r3
 80005d8:	4805      	ldr	r0, [pc, #20]	; (80005f0 <HAL_ADC_MspInit+0x84>)
 80005da:	f001 fc7b 	bl	8001ed4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005de:	bf00      	nop
 80005e0:	3728      	adds	r7, #40	; 0x28
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40012000 	.word	0x40012000
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40020000 	.word	0x40020000

080005f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	4b10      	ldr	r3, [pc, #64]	; (8000640 <MX_DMA_Init+0x4c>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a0f      	ldr	r2, [pc, #60]	; (8000640 <MX_DMA_Init+0x4c>)
 8000604:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <MX_DMA_Init+0x4c>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000616:	2200      	movs	r2, #0
 8000618:	2100      	movs	r1, #0
 800061a:	200e      	movs	r0, #14
 800061c:	f001 f8b5 	bl	800178a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000620:	200e      	movs	r0, #14
 8000622:	f001 f8ce 	bl	80017c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000626:	2200      	movs	r2, #0
 8000628:	2100      	movs	r1, #0
 800062a:	200f      	movs	r0, #15
 800062c:	f001 f8ad 	bl	800178a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000630:	200f      	movs	r0, #15
 8000632:	f001 f8c6 	bl	80017c2 <HAL_NVIC_EnableIRQ>

}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40023800 	.word	0x40023800

08000644 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b088      	sub	sp, #32
 8000648:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064a:	f107 030c 	add.w	r3, r7, #12
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	4b3a      	ldr	r3, [pc, #232]	; (8000748 <MX_GPIO_Init+0x104>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4a39      	ldr	r2, [pc, #228]	; (8000748 <MX_GPIO_Init+0x104>)
 8000664:	f043 0304 	orr.w	r3, r3, #4
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4b37      	ldr	r3, [pc, #220]	; (8000748 <MX_GPIO_Init+0x104>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0304 	and.w	r3, r3, #4
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	4b33      	ldr	r3, [pc, #204]	; (8000748 <MX_GPIO_Init+0x104>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a32      	ldr	r2, [pc, #200]	; (8000748 <MX_GPIO_Init+0x104>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b30      	ldr	r3, [pc, #192]	; (8000748 <MX_GPIO_Init+0x104>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	603b      	str	r3, [r7, #0]
 8000696:	4b2c      	ldr	r3, [pc, #176]	; (8000748 <MX_GPIO_Init+0x104>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a2b      	ldr	r2, [pc, #172]	; (8000748 <MX_GPIO_Init+0x104>)
 800069c:	f043 0302 	orr.w	r3, r3, #2
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b29      	ldr	r3, [pc, #164]	; (8000748 <MX_GPIO_Init+0x104>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0302 	and.w	r3, r3, #2
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RelayCoil_OUT_GPIO_Port, RelayCoil_OUT_Pin, GPIO_PIN_RESET);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2101      	movs	r1, #1
 80006b2:	4826      	ldr	r0, [pc, #152]	; (800074c <MX_GPIO_Init+0x108>)
 80006b4:	f001 fda8 	bl	8002208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDA_RED_Pin|LEDA_GREEN_Pin|LEDA_BLUE_Pin, GPIO_PIN_RESET);
 80006b8:	2200      	movs	r2, #0
 80006ba:	2107      	movs	r1, #7
 80006bc:	4824      	ldr	r0, [pc, #144]	; (8000750 <MX_GPIO_Init+0x10c>)
 80006be:	f001 fda3 	bl	8002208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LEDB_RED_Pin|LEDB_GREEN_Pin|LEDB_BLUE_Pin, GPIO_PIN_RESET);
 80006c2:	2200      	movs	r2, #0
 80006c4:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80006c8:	4822      	ldr	r0, [pc, #136]	; (8000754 <MX_GPIO_Init+0x110>)
 80006ca:	f001 fd9d 	bl	8002208 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = FootSwitchA_IN_Pin|FootSwitchB_IN_Pin|UserSwitchA_IN_Pin|UserSwitchB_IN_Pin;
 80006ce:	f246 0306 	movw	r3, #24582	; 0x6006
 80006d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d4:	2300      	movs	r3, #0
 80006d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	4619      	mov	r1, r3
 80006e2:	481a      	ldr	r0, [pc, #104]	; (800074c <MX_GPIO_Init+0x108>)
 80006e4:	f001 fbf6 	bl	8001ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RelayCoil_OUT_Pin;
 80006e8:	2301      	movs	r3, #1
 80006ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ec:	2301      	movs	r3, #1
 80006ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RelayCoil_OUT_GPIO_Port, &GPIO_InitStruct);
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	4619      	mov	r1, r3
 80006fe:	4813      	ldr	r0, [pc, #76]	; (800074c <MX_GPIO_Init+0x108>)
 8000700:	f001 fbe8 	bl	8001ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LEDA_RED_Pin|LEDA_GREEN_Pin|LEDA_BLUE_Pin;
 8000704:	2307      	movs	r3, #7
 8000706:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000708:	2301      	movs	r3, #1
 800070a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000710:	2300      	movs	r3, #0
 8000712:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	4619      	mov	r1, r3
 800071a:	480d      	ldr	r0, [pc, #52]	; (8000750 <MX_GPIO_Init+0x10c>)
 800071c:	f001 fbda 	bl	8001ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LEDB_RED_Pin|LEDB_GREEN_Pin|LEDB_BLUE_Pin;
 8000720:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000724:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000726:	2301      	movs	r3, #1
 8000728:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072e:	2300      	movs	r3, #0
 8000730:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000732:	f107 030c 	add.w	r3, r7, #12
 8000736:	4619      	mov	r1, r3
 8000738:	4806      	ldr	r0, [pc, #24]	; (8000754 <MX_GPIO_Init+0x110>)
 800073a:	f001 fbcb 	bl	8001ed4 <HAL_GPIO_Init>

}
 800073e:	bf00      	nop
 8000740:	3720      	adds	r7, #32
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800
 800074c:	40020800 	.word	0x40020800
 8000750:	40020400 	.word	0x40020400
 8000754:	40020000 	.word	0x40020000

08000758 <MX_I2S2_Init>:
DMA_HandleTypeDef hdma_i2s2_ext_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0

  hi2s2.Instance = SPI2;
 800075c:	4b13      	ldr	r3, [pc, #76]	; (80007ac <MX_I2S2_Init+0x54>)
 800075e:	4a14      	ldr	r2, [pc, #80]	; (80007b0 <MX_I2S2_Init+0x58>)
 8000760:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000762:	4b12      	ldr	r3, [pc, #72]	; (80007ac <MX_I2S2_Init+0x54>)
 8000764:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000768:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <MX_I2S2_Init+0x54>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000770:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <MX_I2S2_Init+0x54>)
 8000772:	2203      	movs	r2, #3
 8000774:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000776:	4b0d      	ldr	r3, [pc, #52]	; (80007ac <MX_I2S2_Init+0x54>)
 8000778:	f44f 7200 	mov.w	r2, #512	; 0x200
 800077c:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <MX_I2S2_Init+0x54>)
 8000780:	4a0c      	ldr	r2, [pc, #48]	; (80007b4 <MX_I2S2_Init+0x5c>)
 8000782:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000784:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_I2S2_Init+0x54>)
 8000786:	2200      	movs	r2, #0
 8000788:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <MX_I2S2_Init+0x54>)
 800078c:	2200      	movs	r2, #0
 800078e:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_I2S2_Init+0x54>)
 8000792:	2201      	movs	r2, #1
 8000794:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_I2S2_Init+0x54>)
 8000798:	f001 fd50 	bl	800223c <HAL_I2S_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 80007a2:	f000 fb91 	bl	8000ec8 <Error_Handler>
  }

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000130 	.word	0x20000130
 80007b0:	40003800 	.word	0x40003800
 80007b4:	00017700 	.word	0x00017700

080007b8 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08a      	sub	sp, #40	; 0x28
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a62      	ldr	r2, [pc, #392]	; (8000960 <HAL_I2S_MspInit+0x1a8>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	f040 80bd 	bne.w	8000956 <HAL_I2S_MspInit+0x19e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80007dc:	2300      	movs	r3, #0
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	4b60      	ldr	r3, [pc, #384]	; (8000964 <HAL_I2S_MspInit+0x1ac>)
 80007e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e4:	4a5f      	ldr	r2, [pc, #380]	; (8000964 <HAL_I2S_MspInit+0x1ac>)
 80007e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ea:	6413      	str	r3, [r2, #64]	; 0x40
 80007ec:	4b5d      	ldr	r3, [pc, #372]	; (8000964 <HAL_I2S_MspInit+0x1ac>)
 80007ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007f4:	613b      	str	r3, [r7, #16]
 80007f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f8:	2300      	movs	r3, #0
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	4b59      	ldr	r3, [pc, #356]	; (8000964 <HAL_I2S_MspInit+0x1ac>)
 80007fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000800:	4a58      	ldr	r2, [pc, #352]	; (8000964 <HAL_I2S_MspInit+0x1ac>)
 8000802:	f043 0302 	orr.w	r3, r3, #2
 8000806:	6313      	str	r3, [r2, #48]	; 0x30
 8000808:	4b56      	ldr	r3, [pc, #344]	; (8000964 <HAL_I2S_MspInit+0x1ac>)
 800080a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080c:	f003 0302 	and.w	r3, r3, #2
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000814:	2300      	movs	r3, #0
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	4b52      	ldr	r3, [pc, #328]	; (8000964 <HAL_I2S_MspInit+0x1ac>)
 800081a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081c:	4a51      	ldr	r2, [pc, #324]	; (8000964 <HAL_I2S_MspInit+0x1ac>)
 800081e:	f043 0304 	orr.w	r3, r3, #4
 8000822:	6313      	str	r3, [r2, #48]	; 0x30
 8000824:	4b4f      	ldr	r3, [pc, #316]	; (8000964 <HAL_I2S_MspInit+0x1ac>)
 8000826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000828:	f003 0304 	and.w	r3, r3, #4
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	68bb      	ldr	r3, [r7, #8]
    PB13     ------> I2S2_CK
    PB14     ------> I2S2_ext_SD
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000830:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000836:	2302      	movs	r3, #2
 8000838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	2300      	movs	r3, #0
 8000840:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000842:	2305      	movs	r3, #5
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	4619      	mov	r1, r3
 800084c:	4846      	ldr	r0, [pc, #280]	; (8000968 <HAL_I2S_MspInit+0x1b0>)
 800084e:	f001 fb41 	bl	8001ed4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000852:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000858:	2302      	movs	r3, #2
 800085a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000864:	2306      	movs	r3, #6
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4619      	mov	r1, r3
 800086e:	483e      	ldr	r0, [pc, #248]	; (8000968 <HAL_I2S_MspInit+0x1b0>)
 8000870:	f001 fb30 	bl	8001ed4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000874:	2340      	movs	r3, #64	; 0x40
 8000876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000878:	2302      	movs	r3, #2
 800087a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000884:	2305      	movs	r3, #5
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	4619      	mov	r1, r3
 800088e:	4837      	ldr	r0, [pc, #220]	; (800096c <HAL_I2S_MspInit+0x1b4>)
 8000890:	f001 fb20 	bl	8001ed4 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 8000894:	4b36      	ldr	r3, [pc, #216]	; (8000970 <HAL_I2S_MspInit+0x1b8>)
 8000896:	4a37      	ldr	r2, [pc, #220]	; (8000974 <HAL_I2S_MspInit+0x1bc>)
 8000898:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 800089a:	4b35      	ldr	r3, [pc, #212]	; (8000970 <HAL_I2S_MspInit+0x1b8>)
 800089c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80008a0:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008a2:	4b33      	ldr	r3, [pc, #204]	; (8000970 <HAL_I2S_MspInit+0x1b8>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008a8:	4b31      	ldr	r3, [pc, #196]	; (8000970 <HAL_I2S_MspInit+0x1b8>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008ae:	4b30      	ldr	r3, [pc, #192]	; (8000970 <HAL_I2S_MspInit+0x1b8>)
 80008b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008b4:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008b6:	4b2e      	ldr	r3, [pc, #184]	; (8000970 <HAL_I2S_MspInit+0x1b8>)
 80008b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008bc:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008be:	4b2c      	ldr	r3, [pc, #176]	; (8000970 <HAL_I2S_MspInit+0x1b8>)
 80008c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008c4:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 80008c6:	4b2a      	ldr	r3, [pc, #168]	; (8000970 <HAL_I2S_MspInit+0x1b8>)
 80008c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008cc:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008ce:	4b28      	ldr	r3, [pc, #160]	; (8000970 <HAL_I2S_MspInit+0x1b8>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008d4:	4b26      	ldr	r3, [pc, #152]	; (8000970 <HAL_I2S_MspInit+0x1b8>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 80008da:	4825      	ldr	r0, [pc, #148]	; (8000970 <HAL_I2S_MspInit+0x1b8>)
 80008dc:	f000 ff8c 	bl	80017f8 <HAL_DMA_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <HAL_I2S_MspInit+0x132>
    {
      Error_Handler();
 80008e6:	f000 faef 	bl	8000ec8 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_i2s2_ext_rx);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4a20      	ldr	r2, [pc, #128]	; (8000970 <HAL_I2S_MspInit+0x1b8>)
 80008ee:	63da      	str	r2, [r3, #60]	; 0x3c
 80008f0:	4a1f      	ldr	r2, [pc, #124]	; (8000970 <HAL_I2S_MspInit+0x1b8>)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80008f6:	4b20      	ldr	r3, [pc, #128]	; (8000978 <HAL_I2S_MspInit+0x1c0>)
 80008f8:	4a20      	ldr	r2, [pc, #128]	; (800097c <HAL_I2S_MspInit+0x1c4>)
 80008fa:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80008fc:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <HAL_I2S_MspInit+0x1c0>)
 80008fe:	2200      	movs	r2, #0
 8000900:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000902:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <HAL_I2S_MspInit+0x1c0>)
 8000904:	2240      	movs	r2, #64	; 0x40
 8000906:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000908:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <HAL_I2S_MspInit+0x1c0>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800090e:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <HAL_I2S_MspInit+0x1c0>)
 8000910:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000914:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000916:	4b18      	ldr	r3, [pc, #96]	; (8000978 <HAL_I2S_MspInit+0x1c0>)
 8000918:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800091c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800091e:	4b16      	ldr	r3, [pc, #88]	; (8000978 <HAL_I2S_MspInit+0x1c0>)
 8000920:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000924:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000926:	4b14      	ldr	r3, [pc, #80]	; (8000978 <HAL_I2S_MspInit+0x1c0>)
 8000928:	f44f 7280 	mov.w	r2, #256	; 0x100
 800092c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800092e:	4b12      	ldr	r3, [pc, #72]	; (8000978 <HAL_I2S_MspInit+0x1c0>)
 8000930:	2200      	movs	r2, #0
 8000932:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000934:	4b10      	ldr	r3, [pc, #64]	; (8000978 <HAL_I2S_MspInit+0x1c0>)
 8000936:	2200      	movs	r2, #0
 8000938:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800093a:	480f      	ldr	r0, [pc, #60]	; (8000978 <HAL_I2S_MspInit+0x1c0>)
 800093c:	f000 ff5c 	bl	80017f8 <HAL_DMA_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <HAL_I2S_MspInit+0x192>
    {
      Error_Handler();
 8000946:	f000 fabf 	bl	8000ec8 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi2_tx);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4a0a      	ldr	r2, [pc, #40]	; (8000978 <HAL_I2S_MspInit+0x1c0>)
 800094e:	639a      	str	r2, [r3, #56]	; 0x38
 8000950:	4a09      	ldr	r2, [pc, #36]	; (8000978 <HAL_I2S_MspInit+0x1c0>)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000956:	bf00      	nop
 8000958:	3728      	adds	r7, #40	; 0x28
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40003800 	.word	0x40003800
 8000964:	40023800 	.word	0x40023800
 8000968:	40020400 	.word	0x40020400
 800096c:	40020800 	.word	0x40020800
 8000970:	20000070 	.word	0x20000070
 8000974:	40026058 	.word	0x40026058
 8000978:	200000d0 	.word	0x200000d0
 800097c:	40026070 	.word	0x40026070

08000980 <Do_HighPass>:
	adc_samples_avg = adc_samples_sum / ADC_DATA_LEN;

	return adc_samples_avg;
}

int Do_HighPass (int inSample) {
 8000980:	b480      	push	{r7}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]

	//Shift = adc_data_in/100;
	//300Hz high-pass, 96k
	a0 = 0.9862117951198142f;
 8000988:	4b30      	ldr	r3, [pc, #192]	; (8000a4c <Do_HighPass+0xcc>)
 800098a:	4a31      	ldr	r2, [pc, #196]	; (8000a50 <Do_HighPass+0xd0>)
 800098c:	601a      	str	r2, [r3, #0]
	a1 = -1.9724235902396283f;
 800098e:	4b31      	ldr	r3, [pc, #196]	; (8000a54 <Do_HighPass+0xd4>)
 8000990:	4a31      	ldr	r2, [pc, #196]	; (8000a58 <Do_HighPass+0xd8>)
 8000992:	601a      	str	r2, [r3, #0]
	a2 = 0.9862117951198142f;
 8000994:	4b31      	ldr	r3, [pc, #196]	; (8000a5c <Do_HighPass+0xdc>)
 8000996:	4a2e      	ldr	r2, [pc, #184]	; (8000a50 <Do_HighPass+0xd0>)
 8000998:	601a      	str	r2, [r3, #0]
	b1 = -1.972233470205696f;
 800099a:	4b31      	ldr	r3, [pc, #196]	; (8000a60 <Do_HighPass+0xe0>)
 800099c:	4a31      	ldr	r2, [pc, #196]	; (8000a64 <Do_HighPass+0xe4>)
 800099e:	601a      	str	r2, [r3, #0]
	b2 = 0.9726137102735608f;
 80009a0:	4b31      	ldr	r3, [pc, #196]	; (8000a68 <Do_HighPass+0xe8>)
 80009a2:	4a32      	ldr	r2, [pc, #200]	; (8000a6c <Do_HighPass+0xec>)
 80009a4:	601a      	str	r2, [r3, #0]

	float inSampleF = (float)inSample;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	ee07 3a90 	vmov	s15, r3
 80009ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009b0:	edc7 7a03 	vstr	s15, [r7, #12]
	float outSampleF =
			a0 * inSampleF
 80009b4:	4b25      	ldr	r3, [pc, #148]	; (8000a4c <Do_HighPass+0xcc>)
 80009b6:	ed93 7a00 	vldr	s14, [r3]
 80009ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80009be:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ a1 * hp_in_z1
 80009c2:	4b24      	ldr	r3, [pc, #144]	; (8000a54 <Do_HighPass+0xd4>)
 80009c4:	edd3 6a00 	vldr	s13, [r3]
 80009c8:	4b29      	ldr	r3, [pc, #164]	; (8000a70 <Do_HighPass+0xf0>)
 80009ca:	edd3 7a00 	vldr	s15, [r3]
 80009ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009d2:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ a2 * hp_in_z2
 80009d6:	4b21      	ldr	r3, [pc, #132]	; (8000a5c <Do_HighPass+0xdc>)
 80009d8:	edd3 6a00 	vldr	s13, [r3]
 80009dc:	4b25      	ldr	r3, [pc, #148]	; (8000a74 <Do_HighPass+0xf4>)
 80009de:	edd3 7a00 	vldr	s15, [r3]
 80009e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009e6:	ee37 7a27 	vadd.f32	s14, s14, s15
			- b1 * hp_out_z1
 80009ea:	4b1d      	ldr	r3, [pc, #116]	; (8000a60 <Do_HighPass+0xe0>)
 80009ec:	edd3 6a00 	vldr	s13, [r3]
 80009f0:	4b21      	ldr	r3, [pc, #132]	; (8000a78 <Do_HighPass+0xf8>)
 80009f2:	edd3 7a00 	vldr	s15, [r3]
 80009f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009fa:	ee37 7a67 	vsub.f32	s14, s14, s15
			- b2 * hp_out_z2;
 80009fe:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <Do_HighPass+0xe8>)
 8000a00:	edd3 6a00 	vldr	s13, [r3]
 8000a04:	4b1d      	ldr	r3, [pc, #116]	; (8000a7c <Do_HighPass+0xfc>)
 8000a06:	edd3 7a00 	vldr	s15, [r3]
 8000a0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float outSampleF =
 8000a0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a12:	edc7 7a02 	vstr	s15, [r7, #8]
	hp_in_z2 = hp_in_z1;
 8000a16:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <Do_HighPass+0xf0>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a16      	ldr	r2, [pc, #88]	; (8000a74 <Do_HighPass+0xf4>)
 8000a1c:	6013      	str	r3, [r2, #0]
	hp_in_z1 = inSampleF;
 8000a1e:	4a14      	ldr	r2, [pc, #80]	; (8000a70 <Do_HighPass+0xf0>)
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	6013      	str	r3, [r2, #0]
	hp_out_z2 = hp_out_z1;
 8000a24:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <Do_HighPass+0xf8>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a14      	ldr	r2, [pc, #80]	; (8000a7c <Do_HighPass+0xfc>)
 8000a2a:	6013      	str	r3, [r2, #0]
	hp_out_z1 = outSampleF;
 8000a2c:	4a12      	ldr	r2, [pc, #72]	; (8000a78 <Do_HighPass+0xf8>)
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	6013      	str	r3, [r2, #0]

	return (int) outSampleF;
 8000a32:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a3a:	ee17 3a90 	vmov	r3, s15
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3714      	adds	r7, #20
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	20001164 	.word	0x20001164
 8000a50:	3f7c7860 	.word	0x3f7c7860
 8000a54:	20000188 	.word	0x20000188
 8000a58:	bffc7860 	.word	0xbffc7860
 8000a5c:	20001158 	.word	0x20001158
 8000a60:	20000180 	.word	0x20000180
 8000a64:	bffc7225 	.word	0xbffc7225
 8000a68:	2000017c 	.word	0x2000017c
 8000a6c:	3f78fd36 	.word	0x3f78fd36
 8000a70:	20001168 	.word	0x20001168
 8000a74:	2000019c 	.word	0x2000019c
 8000a78:	20001160 	.word	0x20001160
 8000a7c:	20001154 	.word	0x20001154

08000a80 <Do_PitchShift>:


int Do_PitchShift(int lSample, int rSample) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08a      	sub	sp, #40	; 0x28
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	6039      	str	r1, [r7, #0]
	int sum = lSample + rSample;
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	4413      	add	r3, r2
 8000a90:	623b      	str	r3, [r7, #32]
	//sum up and do high-pass
	sum=Do_HighPass(sum);
 8000a92:	6a38      	ldr	r0, [r7, #32]
 8000a94:	f7ff ff74 	bl	8000980 <Do_HighPass>
 8000a98:	6238      	str	r0, [r7, #32]

	//write to ringbuffer
	Buf[WtrP] = sum;
 8000a9a:	4b73      	ldr	r3, [pc, #460]	; (8000c68 <Do_PitchShift+0x1e8>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4973      	ldr	r1, [pc, #460]	; (8000c6c <Do_PitchShift+0x1ec>)
 8000aa0:	6a3a      	ldr	r2, [r7, #32]
 8000aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//read fractional readpointer and generate 0° and 180° read-pointer in integer
	int RdPtr_Int = roundf(Rd_P);
 8000aa6:	4b72      	ldr	r3, [pc, #456]	; (8000c70 <Do_PitchShift+0x1f0>)
 8000aa8:	edd3 7a00 	vldr	s15, [r3]
 8000aac:	eeb0 0a67 	vmov.f32	s0, s15
 8000ab0:	f003 f840 	bl	8003b34 <roundf>
 8000ab4:	eef0 7a40 	vmov.f32	s15, s0
 8000ab8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000abc:	ee17 3a90 	vmov	r3, s15
 8000ac0:	61fb      	str	r3, [r7, #28]
	int RdPtr_Int2 = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
	if (RdPtr_Int >= BufSize/2) RdPtr_Int2 = RdPtr_Int - (BufSize/2);
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000acc:	db04      	blt.n	8000ad8 <Do_PitchShift+0x58>
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ad6:	e003      	b.n	8000ae0 <Do_PitchShift+0x60>
	else RdPtr_Int2 = RdPtr_Int + (BufSize/2);
 8000ad8:	69fb      	ldr	r3, [r7, #28]
 8000ada:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24

	//read the two samples...
	float Rd0 = (float) Buf[RdPtr_Int];
 8000ae0:	4a62      	ldr	r2, [pc, #392]	; (8000c6c <Do_PitchShift+0x1ec>)
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae8:	ee07 3a90 	vmov	s15, r3
 8000aec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000af0:	edc7 7a06 	vstr	s15, [r7, #24]
	float Rd1 = (float) Buf[RdPtr_Int2];
 8000af4:	4a5d      	ldr	r2, [pc, #372]	; (8000c6c <Do_PitchShift+0x1ec>)
 8000af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000afc:	ee07 3a90 	vmov	s15, r3
 8000b00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b04:	edc7 7a05 	vstr	s15, [r7, #20]

	//Check if first readpointer starts overlap with write pointer?
	// if yes -> do cross-fade to second read-pointer
	if (Overlap >= (WtrP-RdPtr_Int) && (WtrP-RdPtr_Int) >= 0 && Shift!=1.0f) {
 8000b08:	4b57      	ldr	r3, [pc, #348]	; (8000c68 <Do_PitchShift+0x1e8>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	69fb      	ldr	r3, [r7, #28]
 8000b0e:	1ad3      	subs	r3, r2, r3
 8000b10:	2b64      	cmp	r3, #100	; 0x64
 8000b12:	dc21      	bgt.n	8000b58 <Do_PitchShift+0xd8>
 8000b14:	4b54      	ldr	r3, [pc, #336]	; (8000c68 <Do_PitchShift+0x1e8>)
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	69fb      	ldr	r3, [r7, #28]
 8000b1a:	1ad3      	subs	r3, r2, r3
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	db1b      	blt.n	8000b58 <Do_PitchShift+0xd8>
 8000b20:	4b54      	ldr	r3, [pc, #336]	; (8000c74 <Do_PitchShift+0x1f4>)
 8000b22:	edd3 7a00 	vldr	s15, [r3]
 8000b26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000b2a:	eef4 7a47 	vcmp.f32	s15, s14
 8000b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b32:	d011      	beq.n	8000b58 <Do_PitchShift+0xd8>
		int rel = WtrP-RdPtr_Int;
 8000b34:	4b4c      	ldr	r3, [pc, #304]	; (8000c68 <Do_PitchShift+0x1e8>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	69fb      	ldr	r3, [r7, #28]
 8000b3a:	1ad3      	subs	r3, r2, r3
 8000b3c:	613b      	str	r3, [r7, #16]
		CrossFade = ((float)rel)/(float)Overlap;
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	ee07 3a90 	vmov	s15, r3
 8000b44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b48:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8000c78 <Do_PitchShift+0x1f8>
 8000b4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b50:	4b4a      	ldr	r3, [pc, #296]	; (8000c7c <Do_PitchShift+0x1fc>)
 8000b52:	edc3 7a00 	vstr	s15, [r3]
	if (Overlap >= (WtrP-RdPtr_Int) && (WtrP-RdPtr_Int) >= 0 && Shift!=1.0f) {
 8000b56:	e008      	b.n	8000b6a <Do_PitchShift+0xea>
	}
	else if (WtrP-RdPtr_Int == 0) CrossFade = 0.0f;
 8000b58:	4b43      	ldr	r3, [pc, #268]	; (8000c68 <Do_PitchShift+0x1e8>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	69fa      	ldr	r2, [r7, #28]
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	d103      	bne.n	8000b6a <Do_PitchShift+0xea>
 8000b62:	4b46      	ldr	r3, [pc, #280]	; (8000c7c <Do_PitchShift+0x1fc>)
 8000b64:	f04f 0200 	mov.w	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]

	//Check if second readpointer starts overlap with write pointer?
	// if yes -> do cross-fade to first read-pointer
	if (Overlap >= (WtrP-RdPtr_Int2) && (WtrP-RdPtr_Int2) >= 0 && Shift!=1.0f) {
 8000b6a:	4b3f      	ldr	r3, [pc, #252]	; (8000c68 <Do_PitchShift+0x1e8>)
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	2b64      	cmp	r3, #100	; 0x64
 8000b74:	dc25      	bgt.n	8000bc2 <Do_PitchShift+0x142>
 8000b76:	4b3c      	ldr	r3, [pc, #240]	; (8000c68 <Do_PitchShift+0x1e8>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	db1f      	blt.n	8000bc2 <Do_PitchShift+0x142>
 8000b82:	4b3c      	ldr	r3, [pc, #240]	; (8000c74 <Do_PitchShift+0x1f4>)
 8000b84:	edd3 7a00 	vldr	s15, [r3]
 8000b88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000b8c:	eef4 7a47 	vcmp.f32	s15, s14
 8000b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b94:	d015      	beq.n	8000bc2 <Do_PitchShift+0x142>
			int rel = WtrP-RdPtr_Int2;
 8000b96:	4b34      	ldr	r3, [pc, #208]	; (8000c68 <Do_PitchShift+0x1e8>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	60fb      	str	r3, [r7, #12]
			CrossFade = 1.0f - ((float)rel)/(float)Overlap;
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	ee07 3a90 	vmov	s15, r3
 8000ba6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000baa:	eddf 6a33 	vldr	s13, [pc, #204]	; 8000c78 <Do_PitchShift+0x1f8>
 8000bae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000bb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bba:	4b30      	ldr	r3, [pc, #192]	; (8000c7c <Do_PitchShift+0x1fc>)
 8000bbc:	edc3 7a00 	vstr	s15, [r3]
	if (Overlap >= (WtrP-RdPtr_Int2) && (WtrP-RdPtr_Int2) >= 0 && Shift!=1.0f) {
 8000bc0:	e008      	b.n	8000bd4 <Do_PitchShift+0x154>
		}
	else if (WtrP-RdPtr_Int2 == 0) CrossFade = 1.0f;
 8000bc2:	4b29      	ldr	r3, [pc, #164]	; (8000c68 <Do_PitchShift+0x1e8>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d103      	bne.n	8000bd4 <Do_PitchShift+0x154>
 8000bcc:	4b2b      	ldr	r3, [pc, #172]	; (8000c7c <Do_PitchShift+0x1fc>)
 8000bce:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000bd2:	601a      	str	r2, [r3, #0]


	//do cross-fading and sum up
	sum = (Rd0*CrossFade + Rd1*(1.0f-CrossFade));
 8000bd4:	4b29      	ldr	r3, [pc, #164]	; (8000c7c <Do_PitchShift+0x1fc>)
 8000bd6:	ed93 7a00 	vldr	s14, [r3]
 8000bda:	edd7 7a06 	vldr	s15, [r7, #24]
 8000bde:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000be2:	4b26      	ldr	r3, [pc, #152]	; (8000c7c <Do_PitchShift+0x1fc>)
 8000be4:	edd3 7a00 	vldr	s15, [r3]
 8000be8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000bec:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000bf0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000bf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c00:	ee17 3a90 	vmov	r3, s15
 8000c04:	623b      	str	r3, [r7, #32]

	//increment fractional read-pointer and write-pointer
	Rd_P += Shift;
 8000c06:	4b1a      	ldr	r3, [pc, #104]	; (8000c70 <Do_PitchShift+0x1f0>)
 8000c08:	ed93 7a00 	vldr	s14, [r3]
 8000c0c:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <Do_PitchShift+0x1f4>)
 8000c0e:	edd3 7a00 	vldr	s15, [r3]
 8000c12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c16:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <Do_PitchShift+0x1f0>)
 8000c18:	edc3 7a00 	vstr	s15, [r3]
	WtrP++;
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <Do_PitchShift+0x1e8>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	3301      	adds	r3, #1
 8000c22:	4a11      	ldr	r2, [pc, #68]	; (8000c68 <Do_PitchShift+0x1e8>)
 8000c24:	6013      	str	r3, [r2, #0]
	if (WtrP == BufSize) WtrP = 0;
 8000c26:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <Do_PitchShift+0x1e8>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c2e:	d102      	bne.n	8000c36 <Do_PitchShift+0x1b6>
 8000c30:	4b0d      	ldr	r3, [pc, #52]	; (8000c68 <Do_PitchShift+0x1e8>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
	if (roundf(Rd_P) >= BufSize) Rd_P = 0.0f;
 8000c36:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <Do_PitchShift+0x1f0>)
 8000c38:	edd3 7a00 	vldr	s15, [r3]
 8000c3c:	eeb0 0a67 	vmov.f32	s0, s15
 8000c40:	f002 ff78 	bl	8003b34 <roundf>
 8000c44:	eeb0 7a40 	vmov.f32	s14, s0
 8000c48:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8000c80 <Do_PitchShift+0x200>
 8000c4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c54:	db03      	blt.n	8000c5e <Do_PitchShift+0x1de>
 8000c56:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <Do_PitchShift+0x1f0>)
 8000c58:	f04f 0200 	mov.w	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]

	return sum;
 8000c5e:	6a3b      	ldr	r3, [r7, #32]


}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3728      	adds	r7, #40	; 0x28
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000184 	.word	0x20000184
 8000c6c:	200001b0 	.word	0x200001b0
 8000c70:	2000115c 	.word	0x2000115c
 8000c74:	20000178 	.word	0x20000178
 8000c78:	42c80000 	.word	0x42c80000
 8000c7c:	20001150 	.word	0x20001150
 8000c80:	447a0000 	.word	0x447a0000

08000c84 <HAL_I2SEx_TxRxHalfCpltCallback>:

void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]

	//restore signed 24 bit sample from 16-bit buffers
	int lSample = (int) (rxBuf[0]<<16)|rxBuf[1];
 8000c8c:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <HAL_I2SEx_TxRxHalfCpltCallback+0x64>)
 8000c8e:	881b      	ldrh	r3, [r3, #0]
 8000c90:	041b      	lsls	r3, r3, #16
 8000c92:	4a15      	ldr	r2, [pc, #84]	; (8000ce8 <HAL_I2SEx_TxRxHalfCpltCallback+0x64>)
 8000c94:	8852      	ldrh	r2, [r2, #2]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	617b      	str	r3, [r7, #20]
	int rSample = (int) (rxBuf[2]<<16)|rxBuf[3];
 8000c9a:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <HAL_I2SEx_TxRxHalfCpltCallback+0x64>)
 8000c9c:	889b      	ldrh	r3, [r3, #4]
 8000c9e:	041b      	lsls	r3, r3, #16
 8000ca0:	4a11      	ldr	r2, [pc, #68]	; (8000ce8 <HAL_I2SEx_TxRxHalfCpltCallback+0x64>)
 8000ca2:	88d2      	ldrh	r2, [r2, #6]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]

	int ret_sample = Do_PitchShift(lSample, rSample);
 8000ca8:	6939      	ldr	r1, [r7, #16]
 8000caa:	6978      	ldr	r0, [r7, #20]
 8000cac:	f7ff fee8 	bl	8000a80 <Do_PitchShift>
 8000cb0:	60f8      	str	r0, [r7, #12]
	lSample = ret_sample;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	617b      	str	r3, [r7, #20]
	rSample = ret_sample;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	613b      	str	r3, [r7, #16]

	//restore to buffer
	txBuf[0] = (lSample>>16)&0xFFFF;
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	0c1b      	lsrs	r3, r3, #16
 8000cbe:	b29a      	uxth	r2, r3
 8000cc0:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <HAL_I2SEx_TxRxHalfCpltCallback+0x68>)
 8000cc2:	801a      	strh	r2, [r3, #0]
	txBuf[1] = lSample&0xFFFF;
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	b29a      	uxth	r2, r3
 8000cc8:	4b08      	ldr	r3, [pc, #32]	; (8000cec <HAL_I2SEx_TxRxHalfCpltCallback+0x68>)
 8000cca:	805a      	strh	r2, [r3, #2]
	txBuf[2] = (rSample>>16)&0xFFFF;
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	0c1b      	lsrs	r3, r3, #16
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	4b06      	ldr	r3, [pc, #24]	; (8000cec <HAL_I2SEx_TxRxHalfCpltCallback+0x68>)
 8000cd4:	809a      	strh	r2, [r3, #4]
	txBuf[3] = rSample&0xFFFF;
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	b29a      	uxth	r2, r3
 8000cda:	4b04      	ldr	r3, [pc, #16]	; (8000cec <HAL_I2SEx_TxRxHalfCpltCallback+0x68>)
 8000cdc:	80da      	strh	r2, [r3, #6]

}
 8000cde:	bf00      	nop
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	200001a0 	.word	0x200001a0
 8000cec:	2000018c 	.word	0x2000018c

08000cf0 <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]

	//restore signed 24 bit sample from 16-bit buffers
	int lSample = (int) (rxBuf[4]<<16)|rxBuf[5];
 8000cf8:	4b16      	ldr	r3, [pc, #88]	; (8000d54 <HAL_I2SEx_TxRxCpltCallback+0x64>)
 8000cfa:	891b      	ldrh	r3, [r3, #8]
 8000cfc:	041b      	lsls	r3, r3, #16
 8000cfe:	4a15      	ldr	r2, [pc, #84]	; (8000d54 <HAL_I2SEx_TxRxCpltCallback+0x64>)
 8000d00:	8952      	ldrh	r2, [r2, #10]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	617b      	str	r3, [r7, #20]
	int rSample = (int) (rxBuf[6]<<16)|rxBuf[7];
 8000d06:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <HAL_I2SEx_TxRxCpltCallback+0x64>)
 8000d08:	899b      	ldrh	r3, [r3, #12]
 8000d0a:	041b      	lsls	r3, r3, #16
 8000d0c:	4a11      	ldr	r2, [pc, #68]	; (8000d54 <HAL_I2SEx_TxRxCpltCallback+0x64>)
 8000d0e:	89d2      	ldrh	r2, [r2, #14]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]

	//printf("%i\n", lSample);

	int ret_sample = Do_PitchShift(lSample, rSample);
 8000d14:	6939      	ldr	r1, [r7, #16]
 8000d16:	6978      	ldr	r0, [r7, #20]
 8000d18:	f7ff feb2 	bl	8000a80 <Do_PitchShift>
 8000d1c:	60f8      	str	r0, [r7, #12]
	lSample = ret_sample;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	617b      	str	r3, [r7, #20]
	rSample = ret_sample;
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	613b      	str	r3, [r7, #16]

	//restore to buffer
	txBuf[4] = (lSample>>16)&0xFFFF;
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	0c1b      	lsrs	r3, r3, #16
 8000d2a:	b29a      	uxth	r2, r3
 8000d2c:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <HAL_I2SEx_TxRxCpltCallback+0x68>)
 8000d2e:	811a      	strh	r2, [r3, #8]
	txBuf[5] = lSample&0xFFFF;
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	b29a      	uxth	r2, r3
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <HAL_I2SEx_TxRxCpltCallback+0x68>)
 8000d36:	815a      	strh	r2, [r3, #10]
	txBuf[6] = (rSample>>16)&0xFFFF;
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	0c1b      	lsrs	r3, r3, #16
 8000d3c:	b29a      	uxth	r2, r3
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_I2SEx_TxRxCpltCallback+0x68>)
 8000d40:	819a      	strh	r2, [r3, #12]
	txBuf[7] = rSample&0xFFFF;
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	b29a      	uxth	r2, r3
 8000d46:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <HAL_I2SEx_TxRxCpltCallback+0x68>)
 8000d48:	81da      	strh	r2, [r3, #14]

}
 8000d4a:	bf00      	nop
 8000d4c:	3718      	adds	r7, #24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	200001a0 	.word	0x200001a0
 8000d58:	2000018c 	.word	0x2000018c

08000d5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d60:	f000 f964 	bl	800102c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d64:	f000 f82e 	bl	8000dc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d68:	f7ff fc6c 	bl	8000644 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d6c:	f7ff fc42 	bl	80005f4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000d70:	f7ff fbaa 	bl	80004c8 <MX_ADC1_Init>
  MX_I2S2_Init();
 8000d74:	f7ff fcf0 	bl	8000758 <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */

  HAL_I2SEx_TransmitReceive_DMA (&hi2s2, txBuf, rxBuf, 4);
 8000d78:	2304      	movs	r3, #4
 8000d7a:	4a0a      	ldr	r2, [pc, #40]	; (8000da4 <main+0x48>)
 8000d7c:	490a      	ldr	r1, [pc, #40]	; (8000da8 <main+0x4c>)
 8000d7e:	480b      	ldr	r0, [pc, #44]	; (8000dac <main+0x50>)
 8000d80:	f001 fca2 	bl	80026c8 <HAL_I2SEx_TransmitReceive_DMA>

	//0°
	WtrP = 0;
 8000d84:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <main+0x54>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]

	Rd_P = 0.0f;
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <main+0x58>)
 8000d8c:	f04f 0200 	mov.w	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
	Shift = 1.4f;
 8000d92:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <main+0x5c>)
 8000d94:	4a09      	ldr	r2, [pc, #36]	; (8000dbc <main+0x60>)
 8000d96:	601a      	str	r2, [r3, #0]
	CrossFade = 1.0f;
 8000d98:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <main+0x64>)
 8000d9a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000d9e:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <main+0x44>
 8000da2:	bf00      	nop
 8000da4:	200001a0 	.word	0x200001a0
 8000da8:	2000018c 	.word	0x2000018c
 8000dac:	20000130 	.word	0x20000130
 8000db0:	20000184 	.word	0x20000184
 8000db4:	2000115c 	.word	0x2000115c
 8000db8:	20000178 	.word	0x20000178
 8000dbc:	3fb33333 	.word	0x3fb33333
 8000dc0:	20001150 	.word	0x20001150

08000dc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b098      	sub	sp, #96	; 0x60
 8000dc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000dce:	2230      	movs	r2, #48	; 0x30
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f002 fea6 	bl	8003b24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dd8:	f107 031c 	add.w	r3, r7, #28
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000de8:	f107 030c 	add.w	r3, r7, #12
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	60bb      	str	r3, [r7, #8]
 8000dfa:	4b31      	ldr	r3, [pc, #196]	; (8000ec0 <SystemClock_Config+0xfc>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	4a30      	ldr	r2, [pc, #192]	; (8000ec0 <SystemClock_Config+0xfc>)
 8000e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e04:	6413      	str	r3, [r2, #64]	; 0x40
 8000e06:	4b2e      	ldr	r3, [pc, #184]	; (8000ec0 <SystemClock_Config+0xfc>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e12:	2300      	movs	r3, #0
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	4b2b      	ldr	r3, [pc, #172]	; (8000ec4 <SystemClock_Config+0x100>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a2a      	ldr	r2, [pc, #168]	; (8000ec4 <SystemClock_Config+0x100>)
 8000e1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e20:	6013      	str	r3, [r2, #0]
 8000e22:	4b28      	ldr	r3, [pc, #160]	; (8000ec4 <SystemClock_Config+0x100>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e32:	2301      	movs	r3, #1
 8000e34:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e36:	2310      	movs	r3, #16
 8000e38:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000e42:	2310      	movs	r3, #16
 8000e44:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e46:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000e4a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e50:	2304      	movs	r3, #4
 8000e52:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f002 f8f9 	bl	8003050 <HAL_RCC_OscConfig>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000e64:	f000 f830 	bl	8000ec8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e68:	230f      	movs	r3, #15
 8000e6a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e70:	2300      	movs	r3, #0
 8000e72:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000e74:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e78:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e80:	f107 031c 	add.w	r3, r7, #28
 8000e84:	2105      	movs	r1, #5
 8000e86:	4618      	mov	r0, r3
 8000e88:	f002 fb52 	bl	8003530 <HAL_RCC_ClockConfig>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000e92:	f000 f819 	bl	8000ec8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000e96:	2301      	movs	r3, #1
 8000e98:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000e9a:	23c0      	movs	r3, #192	; 0xc0
 8000e9c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ea2:	f107 030c 	add.w	r3, r7, #12
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f002 fcda 	bl	8003860 <HAL_RCCEx_PeriphCLKConfig>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000eb2:	f000 f809 	bl	8000ec8 <Error_Handler>
  }
}
 8000eb6:	bf00      	nop
 8000eb8:	3760      	adds	r7, #96	; 0x60
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40007000 	.word	0x40007000

08000ec8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
	...

08000ed8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	607b      	str	r3, [r7, #4]
 8000ee2:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <HAL_MspInit+0x4c>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee6:	4a0f      	ldr	r2, [pc, #60]	; (8000f24 <HAL_MspInit+0x4c>)
 8000ee8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eec:	6453      	str	r3, [r2, #68]	; 0x44
 8000eee:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <HAL_MspInit+0x4c>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	603b      	str	r3, [r7, #0]
 8000efe:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <HAL_MspInit+0x4c>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	4a08      	ldr	r2, [pc, #32]	; (8000f24 <HAL_MspInit+0x4c>)
 8000f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f08:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0a:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <HAL_MspInit+0x4c>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f12:	603b      	str	r3, [r7, #0]
 8000f14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	40023800 	.word	0x40023800

08000f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f3a:	e7fe      	b.n	8000f3a <HardFault_Handler+0x4>

08000f3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <MemManage_Handler+0x4>

08000f42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f46:	e7fe      	b.n	8000f46 <BusFault_Handler+0x4>

08000f48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <UsageFault_Handler+0x4>

08000f4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f7c:	f000 f8a8 	bl	80010d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8000f88:	4802      	ldr	r0, [pc, #8]	; (8000f94 <DMA1_Stream3_IRQHandler+0x10>)
 8000f8a:	f000 fd3b 	bl	8001a04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000070 	.word	0x20000070

08000f98 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000f9c:	4802      	ldr	r0, [pc, #8]	; (8000fa8 <DMA1_Stream4_IRQHandler+0x10>)
 8000f9e:	f000 fd31 	bl	8001a04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	200000d0 	.word	0x200000d0

08000fac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <SystemInit+0x28>)
 8000fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fb6:	4a07      	ldr	r2, [pc, #28]	; (8000fd4 <SystemInit+0x28>)
 8000fb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fc0:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <SystemInit+0x28>)
 8000fc2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fc6:	609a      	str	r2, [r3, #8]
#endif
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001010 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fdc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fde:	e003      	b.n	8000fe8 <LoopCopyDataInit>

08000fe0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000fe2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000fe4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000fe6:	3104      	adds	r1, #4

08000fe8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fe8:	480b      	ldr	r0, [pc, #44]	; (8001018 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000fea:	4b0c      	ldr	r3, [pc, #48]	; (800101c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ff0:	d3f6      	bcc.n	8000fe0 <CopyDataInit>
  ldr  r2, =_sbss
 8000ff2:	4a0b      	ldr	r2, [pc, #44]	; (8001020 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ff4:	e002      	b.n	8000ffc <LoopFillZerobss>

08000ff6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ff6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ff8:	f842 3b04 	str.w	r3, [r2], #4

08000ffc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ffc:	4b09      	ldr	r3, [pc, #36]	; (8001024 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ffe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001000:	d3f9      	bcc.n	8000ff6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001002:	f7ff ffd3 	bl	8000fac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001006:	f002 fd69 	bl	8003adc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800100a:	f7ff fea7 	bl	8000d5c <main>
  bx  lr    
 800100e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001010:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001014:	08003bc0 	.word	0x08003bc0
  ldr  r0, =_sdata
 8001018:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800101c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001020:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001024:	20001170 	.word	0x20001170

08001028 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001028:	e7fe      	b.n	8001028 <ADC_IRQHandler>
	...

0800102c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001030:	4b0e      	ldr	r3, [pc, #56]	; (800106c <HAL_Init+0x40>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a0d      	ldr	r2, [pc, #52]	; (800106c <HAL_Init+0x40>)
 8001036:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800103a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800103c:	4b0b      	ldr	r3, [pc, #44]	; (800106c <HAL_Init+0x40>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a0a      	ldr	r2, [pc, #40]	; (800106c <HAL_Init+0x40>)
 8001042:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001046:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001048:	4b08      	ldr	r3, [pc, #32]	; (800106c <HAL_Init+0x40>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a07      	ldr	r2, [pc, #28]	; (800106c <HAL_Init+0x40>)
 800104e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001052:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001054:	2003      	movs	r0, #3
 8001056:	f000 fb8d 	bl	8001774 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800105a:	2000      	movs	r0, #0
 800105c:	f000 f808 	bl	8001070 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001060:	f7ff ff3a 	bl	8000ed8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40023c00 	.word	0x40023c00

08001070 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <HAL_InitTick+0x54>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <HAL_InitTick+0x58>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	4619      	mov	r1, r3
 8001082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001086:	fbb3 f3f1 	udiv	r3, r3, r1
 800108a:	fbb2 f3f3 	udiv	r3, r2, r3
 800108e:	4618      	mov	r0, r3
 8001090:	f000 fba5 	bl	80017de <HAL_SYSTICK_Config>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e00e      	b.n	80010bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b0f      	cmp	r3, #15
 80010a2:	d80a      	bhi.n	80010ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a4:	2200      	movs	r2, #0
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010ac:	f000 fb6d 	bl	800178a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b0:	4a06      	ldr	r2, [pc, #24]	; (80010cc <HAL_InitTick+0x5c>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010b6:	2300      	movs	r3, #0
 80010b8:	e000      	b.n	80010bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000000 	.word	0x20000000
 80010c8:	20000008 	.word	0x20000008
 80010cc:	20000004 	.word	0x20000004

080010d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <HAL_IncTick+0x20>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	461a      	mov	r2, r3
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_IncTick+0x24>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4413      	add	r3, r2
 80010e0:	4a04      	ldr	r2, [pc, #16]	; (80010f4 <HAL_IncTick+0x24>)
 80010e2:	6013      	str	r3, [r2, #0]
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	20000008 	.word	0x20000008
 80010f4:	2000116c 	.word	0x2000116c

080010f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return uwTick;
 80010fc:	4b03      	ldr	r3, [pc, #12]	; (800110c <HAL_GetTick+0x14>)
 80010fe:	681b      	ldr	r3, [r3, #0]
}
 8001100:	4618      	mov	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	2000116c 	.word	0x2000116c

08001110 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001118:	2300      	movs	r3, #0
 800111a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d101      	bne.n	8001126 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e033      	b.n	800118e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	2b00      	cmp	r3, #0
 800112c:	d109      	bne.n	8001142 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff fa1c 	bl	800056c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2200      	movs	r2, #0
 800113e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001146:	f003 0310 	and.w	r3, r3, #16
 800114a:	2b00      	cmp	r3, #0
 800114c:	d118      	bne.n	8001180 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001156:	f023 0302 	bic.w	r3, r3, #2
 800115a:	f043 0202 	orr.w	r2, r3, #2
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f000 f93a 	bl	80013dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	f023 0303 	bic.w	r3, r3, #3
 8001176:	f043 0201 	orr.w	r2, r3, #1
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	641a      	str	r2, [r3, #64]	; 0x40
 800117e:	e001      	b.n	8001184 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800118c:	7bfb      	ldrb	r3, [r7, #15]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d101      	bne.n	80011b4 <HAL_ADC_ConfigChannel+0x1c>
 80011b0:	2302      	movs	r3, #2
 80011b2:	e105      	b.n	80013c0 <HAL_ADC_ConfigChannel+0x228>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2201      	movs	r2, #1
 80011b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b09      	cmp	r3, #9
 80011c2:	d925      	bls.n	8001210 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	68d9      	ldr	r1, [r3, #12]
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	461a      	mov	r2, r3
 80011d2:	4613      	mov	r3, r2
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	4413      	add	r3, r2
 80011d8:	3b1e      	subs	r3, #30
 80011da:	2207      	movs	r2, #7
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43da      	mvns	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	400a      	ands	r2, r1
 80011e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	68d9      	ldr	r1, [r3, #12]
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	4618      	mov	r0, r3
 80011fc:	4603      	mov	r3, r0
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	4403      	add	r3, r0
 8001202:	3b1e      	subs	r3, #30
 8001204:	409a      	lsls	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	430a      	orrs	r2, r1
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	e022      	b.n	8001256 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	6919      	ldr	r1, [r3, #16]
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	b29b      	uxth	r3, r3
 800121c:	461a      	mov	r2, r3
 800121e:	4613      	mov	r3, r2
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	4413      	add	r3, r2
 8001224:	2207      	movs	r2, #7
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43da      	mvns	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	400a      	ands	r2, r1
 8001232:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	6919      	ldr	r1, [r3, #16]
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	689a      	ldr	r2, [r3, #8]
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	b29b      	uxth	r3, r3
 8001244:	4618      	mov	r0, r3
 8001246:	4603      	mov	r3, r0
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	4403      	add	r3, r0
 800124c:	409a      	lsls	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	430a      	orrs	r2, r1
 8001254:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	2b06      	cmp	r3, #6
 800125c:	d824      	bhi.n	80012a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685a      	ldr	r2, [r3, #4]
 8001268:	4613      	mov	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4413      	add	r3, r2
 800126e:	3b05      	subs	r3, #5
 8001270:	221f      	movs	r2, #31
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43da      	mvns	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	400a      	ands	r2, r1
 800127e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	b29b      	uxth	r3, r3
 800128c:	4618      	mov	r0, r3
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685a      	ldr	r2, [r3, #4]
 8001292:	4613      	mov	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4413      	add	r3, r2
 8001298:	3b05      	subs	r3, #5
 800129a:	fa00 f203 	lsl.w	r2, r0, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	430a      	orrs	r2, r1
 80012a4:	635a      	str	r2, [r3, #52]	; 0x34
 80012a6:	e04c      	b.n	8001342 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	2b0c      	cmp	r3, #12
 80012ae:	d824      	bhi.n	80012fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685a      	ldr	r2, [r3, #4]
 80012ba:	4613      	mov	r3, r2
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	4413      	add	r3, r2
 80012c0:	3b23      	subs	r3, #35	; 0x23
 80012c2:	221f      	movs	r2, #31
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43da      	mvns	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	400a      	ands	r2, r1
 80012d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	b29b      	uxth	r3, r3
 80012de:	4618      	mov	r0, r3
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685a      	ldr	r2, [r3, #4]
 80012e4:	4613      	mov	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	4413      	add	r3, r2
 80012ea:	3b23      	subs	r3, #35	; 0x23
 80012ec:	fa00 f203 	lsl.w	r2, r0, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	430a      	orrs	r2, r1
 80012f6:	631a      	str	r2, [r3, #48]	; 0x30
 80012f8:	e023      	b.n	8001342 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685a      	ldr	r2, [r3, #4]
 8001304:	4613      	mov	r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	3b41      	subs	r3, #65	; 0x41
 800130c:	221f      	movs	r2, #31
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43da      	mvns	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	400a      	ands	r2, r1
 800131a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	b29b      	uxth	r3, r3
 8001328:	4618      	mov	r0, r3
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685a      	ldr	r2, [r3, #4]
 800132e:	4613      	mov	r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	4413      	add	r3, r2
 8001334:	3b41      	subs	r3, #65	; 0x41
 8001336:	fa00 f203 	lsl.w	r2, r0, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	430a      	orrs	r2, r1
 8001340:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001342:	4b22      	ldr	r3, [pc, #136]	; (80013cc <HAL_ADC_ConfigChannel+0x234>)
 8001344:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a21      	ldr	r2, [pc, #132]	; (80013d0 <HAL_ADC_ConfigChannel+0x238>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d109      	bne.n	8001364 <HAL_ADC_ConfigChannel+0x1cc>
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b12      	cmp	r3, #18
 8001356:	d105      	bne.n	8001364 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a19      	ldr	r2, [pc, #100]	; (80013d0 <HAL_ADC_ConfigChannel+0x238>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d123      	bne.n	80013b6 <HAL_ADC_ConfigChannel+0x21e>
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2b10      	cmp	r3, #16
 8001374:	d003      	beq.n	800137e <HAL_ADC_ConfigChannel+0x1e6>
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2b11      	cmp	r3, #17
 800137c:	d11b      	bne.n	80013b6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2b10      	cmp	r3, #16
 8001390:	d111      	bne.n	80013b6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001392:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <HAL_ADC_ConfigChannel+0x23c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a10      	ldr	r2, [pc, #64]	; (80013d8 <HAL_ADC_ConfigChannel+0x240>)
 8001398:	fba2 2303 	umull	r2, r3, r2, r3
 800139c:	0c9a      	lsrs	r2, r3, #18
 800139e:	4613      	mov	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80013a8:	e002      	b.n	80013b0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	3b01      	subs	r3, #1
 80013ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1f9      	bne.n	80013aa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80013be:	2300      	movs	r3, #0
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	40012300 	.word	0x40012300
 80013d0:	40012000 	.word	0x40012000
 80013d4:	20000000 	.word	0x20000000
 80013d8:	431bde83 	.word	0x431bde83

080013dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013e4:	4b79      	ldr	r3, [pc, #484]	; (80015cc <ADC_Init+0x1f0>)
 80013e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	685a      	ldr	r2, [r3, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	431a      	orrs	r2, r3
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	685a      	ldr	r2, [r3, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001410:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6859      	ldr	r1, [r3, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	021a      	lsls	r2, r3, #8
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	430a      	orrs	r2, r1
 8001424:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	685a      	ldr	r2, [r3, #4]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001434:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6859      	ldr	r1, [r3, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	430a      	orrs	r2, r1
 8001446:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	689a      	ldr	r2, [r3, #8]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001456:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6899      	ldr	r1, [r3, #8]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	68da      	ldr	r2, [r3, #12]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	430a      	orrs	r2, r1
 8001468:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800146e:	4a58      	ldr	r2, [pc, #352]	; (80015d0 <ADC_Init+0x1f4>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d022      	beq.n	80014ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	689a      	ldr	r2, [r3, #8]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001482:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	6899      	ldr	r1, [r3, #8]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	430a      	orrs	r2, r1
 8001494:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6899      	ldr	r1, [r3, #8]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	430a      	orrs	r2, r1
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	e00f      	b.n	80014da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	689a      	ldr	r2, [r3, #8]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f022 0202 	bic.w	r2, r2, #2
 80014e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6899      	ldr	r1, [r3, #8]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	7e1b      	ldrb	r3, [r3, #24]
 80014f4:	005a      	lsls	r2, r3, #1
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	430a      	orrs	r2, r1
 80014fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d01b      	beq.n	8001540 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	685a      	ldr	r2, [r3, #4]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001516:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	685a      	ldr	r2, [r3, #4]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001526:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6859      	ldr	r1, [r3, #4]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001532:	3b01      	subs	r3, #1
 8001534:	035a      	lsls	r2, r3, #13
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	430a      	orrs	r2, r1
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	e007      	b.n	8001550 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	685a      	ldr	r2, [r3, #4]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800154e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800155e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	3b01      	subs	r3, #1
 800156c:	051a      	lsls	r2, r3, #20
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	430a      	orrs	r2, r1
 8001574:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	689a      	ldr	r2, [r3, #8]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001584:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6899      	ldr	r1, [r3, #8]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001592:	025a      	lsls	r2, r3, #9
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	430a      	orrs	r2, r1
 800159a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	689a      	ldr	r2, [r3, #8]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6899      	ldr	r1, [r3, #8]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	029a      	lsls	r2, r3, #10
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	430a      	orrs	r2, r1
 80015be:	609a      	str	r2, [r3, #8]
}
 80015c0:	bf00      	nop
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	40012300 	.word	0x40012300
 80015d0:	0f000001 	.word	0x0f000001

080015d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <__NVIC_SetPriorityGrouping+0x44>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ea:	68ba      	ldr	r2, [r7, #8]
 80015ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015f0:	4013      	ands	r3, r2
 80015f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001604:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001606:	4a04      	ldr	r2, [pc, #16]	; (8001618 <__NVIC_SetPriorityGrouping+0x44>)
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	60d3      	str	r3, [r2, #12]
}
 800160c:	bf00      	nop
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001620:	4b04      	ldr	r3, [pc, #16]	; (8001634 <__NVIC_GetPriorityGrouping+0x18>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	0a1b      	lsrs	r3, r3, #8
 8001626:	f003 0307 	and.w	r3, r3, #7
}
 800162a:	4618      	mov	r0, r3
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001646:	2b00      	cmp	r3, #0
 8001648:	db0b      	blt.n	8001662 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	f003 021f 	and.w	r2, r3, #31
 8001650:	4907      	ldr	r1, [pc, #28]	; (8001670 <__NVIC_EnableIRQ+0x38>)
 8001652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001656:	095b      	lsrs	r3, r3, #5
 8001658:	2001      	movs	r0, #1
 800165a:	fa00 f202 	lsl.w	r2, r0, r2
 800165e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	e000e100 	.word	0xe000e100

08001674 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	6039      	str	r1, [r7, #0]
 800167e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001684:	2b00      	cmp	r3, #0
 8001686:	db0a      	blt.n	800169e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	b2da      	uxtb	r2, r3
 800168c:	490c      	ldr	r1, [pc, #48]	; (80016c0 <__NVIC_SetPriority+0x4c>)
 800168e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001692:	0112      	lsls	r2, r2, #4
 8001694:	b2d2      	uxtb	r2, r2
 8001696:	440b      	add	r3, r1
 8001698:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800169c:	e00a      	b.n	80016b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	4908      	ldr	r1, [pc, #32]	; (80016c4 <__NVIC_SetPriority+0x50>)
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	f003 030f 	and.w	r3, r3, #15
 80016aa:	3b04      	subs	r3, #4
 80016ac:	0112      	lsls	r2, r2, #4
 80016ae:	b2d2      	uxtb	r2, r2
 80016b0:	440b      	add	r3, r1
 80016b2:	761a      	strb	r2, [r3, #24]
}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	e000e100 	.word	0xe000e100
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b089      	sub	sp, #36	; 0x24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	f1c3 0307 	rsb	r3, r3, #7
 80016e2:	2b04      	cmp	r3, #4
 80016e4:	bf28      	it	cs
 80016e6:	2304      	movcs	r3, #4
 80016e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	3304      	adds	r3, #4
 80016ee:	2b06      	cmp	r3, #6
 80016f0:	d902      	bls.n	80016f8 <NVIC_EncodePriority+0x30>
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	3b03      	subs	r3, #3
 80016f6:	e000      	b.n	80016fa <NVIC_EncodePriority+0x32>
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	43da      	mvns	r2, r3
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	401a      	ands	r2, r3
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001710:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	fa01 f303 	lsl.w	r3, r1, r3
 800171a:	43d9      	mvns	r1, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001720:	4313      	orrs	r3, r2
         );
}
 8001722:	4618      	mov	r0, r3
 8001724:	3724      	adds	r7, #36	; 0x24
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
	...

08001730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3b01      	subs	r3, #1
 800173c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001740:	d301      	bcc.n	8001746 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001742:	2301      	movs	r3, #1
 8001744:	e00f      	b.n	8001766 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001746:	4a0a      	ldr	r2, [pc, #40]	; (8001770 <SysTick_Config+0x40>)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3b01      	subs	r3, #1
 800174c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800174e:	210f      	movs	r1, #15
 8001750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001754:	f7ff ff8e 	bl	8001674 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001758:	4b05      	ldr	r3, [pc, #20]	; (8001770 <SysTick_Config+0x40>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800175e:	4b04      	ldr	r3, [pc, #16]	; (8001770 <SysTick_Config+0x40>)
 8001760:	2207      	movs	r2, #7
 8001762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	e000e010 	.word	0xe000e010

08001774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff ff29 	bl	80015d4 <__NVIC_SetPriorityGrouping>
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800178a:	b580      	push	{r7, lr}
 800178c:	b086      	sub	sp, #24
 800178e:	af00      	add	r7, sp, #0
 8001790:	4603      	mov	r3, r0
 8001792:	60b9      	str	r1, [r7, #8]
 8001794:	607a      	str	r2, [r7, #4]
 8001796:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800179c:	f7ff ff3e 	bl	800161c <__NVIC_GetPriorityGrouping>
 80017a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	68b9      	ldr	r1, [r7, #8]
 80017a6:	6978      	ldr	r0, [r7, #20]
 80017a8:	f7ff ff8e 	bl	80016c8 <NVIC_EncodePriority>
 80017ac:	4602      	mov	r2, r0
 80017ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017b2:	4611      	mov	r1, r2
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff ff5d 	bl	8001674 <__NVIC_SetPriority>
}
 80017ba:	bf00      	nop
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b082      	sub	sp, #8
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	4603      	mov	r3, r0
 80017ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff ff31 	bl	8001638 <__NVIC_EnableIRQ>
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff ffa2 	bl	8001730 <SysTick_Config>
 80017ec:	4603      	mov	r3, r0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001804:	f7ff fc78 	bl	80010f8 <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d101      	bne.n	8001814 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e099      	b.n	8001948 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2202      	movs	r2, #2
 8001820:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f022 0201 	bic.w	r2, r2, #1
 8001832:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001834:	e00f      	b.n	8001856 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001836:	f7ff fc5f 	bl	80010f8 <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b05      	cmp	r3, #5
 8001842:	d908      	bls.n	8001856 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2220      	movs	r2, #32
 8001848:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2203      	movs	r2, #3
 800184e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e078      	b.n	8001948 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	2b00      	cmp	r3, #0
 8001862:	d1e8      	bne.n	8001836 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800186c:	697a      	ldr	r2, [r7, #20]
 800186e:	4b38      	ldr	r3, [pc, #224]	; (8001950 <HAL_DMA_Init+0x158>)
 8001870:	4013      	ands	r3, r2
 8001872:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001882:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	691b      	ldr	r3, [r3, #16]
 8001888:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800188e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800189a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018a2:	697a      	ldr	r2, [r7, #20]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ac:	2b04      	cmp	r3, #4
 80018ae:	d107      	bne.n	80018c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b8:	4313      	orrs	r3, r2
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	4313      	orrs	r3, r2
 80018be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	697a      	ldr	r2, [r7, #20]
 80018c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	f023 0307 	bic.w	r3, r3, #7
 80018d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	4313      	orrs	r3, r2
 80018e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e6:	2b04      	cmp	r3, #4
 80018e8:	d117      	bne.n	800191a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ee:	697a      	ldr	r2, [r7, #20]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d00e      	beq.n	800191a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f000 fa6f 	bl	8001de0 <DMA_CheckFifoParam>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d008      	beq.n	800191a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2240      	movs	r2, #64	; 0x40
 800190c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2201      	movs	r2, #1
 8001912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001916:	2301      	movs	r3, #1
 8001918:	e016      	b.n	8001948 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 fa26 	bl	8001d74 <DMA_CalcBaseAndBitshift>
 8001928:	4603      	mov	r3, r0
 800192a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001930:	223f      	movs	r2, #63	; 0x3f
 8001932:	409a      	lsls	r2, r3
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2201      	movs	r2, #1
 8001942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	f010803f 	.word	0xf010803f

08001954 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
 8001960:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001962:	2300      	movs	r3, #0
 8001964:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001972:	2b01      	cmp	r3, #1
 8001974:	d101      	bne.n	800197a <HAL_DMA_Start_IT+0x26>
 8001976:	2302      	movs	r3, #2
 8001978:	e040      	b.n	80019fc <HAL_DMA_Start_IT+0xa8>
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2201      	movs	r2, #1
 800197e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b01      	cmp	r3, #1
 800198c:	d12f      	bne.n	80019ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2202      	movs	r2, #2
 8001992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2200      	movs	r2, #0
 800199a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	68b9      	ldr	r1, [r7, #8]
 80019a2:	68f8      	ldr	r0, [r7, #12]
 80019a4:	f000 f9b8 	bl	8001d18 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ac:	223f      	movs	r2, #63	; 0x3f
 80019ae:	409a      	lsls	r2, r3
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f042 0216 	orr.w	r2, r2, #22
 80019c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d007      	beq.n	80019dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f042 0208 	orr.w	r2, r2, #8
 80019da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f042 0201 	orr.w	r2, r2, #1
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	e005      	b.n	80019fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80019f6:	2302      	movs	r3, #2
 80019f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80019fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3718      	adds	r7, #24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a10:	4b92      	ldr	r3, [pc, #584]	; (8001c5c <HAL_DMA_IRQHandler+0x258>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a92      	ldr	r2, [pc, #584]	; (8001c60 <HAL_DMA_IRQHandler+0x25c>)
 8001a16:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1a:	0a9b      	lsrs	r3, r3, #10
 8001a1c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a22:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a2e:	2208      	movs	r2, #8
 8001a30:	409a      	lsls	r2, r3
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	4013      	ands	r3, r2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d01a      	beq.n	8001a70 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0304 	and.w	r3, r3, #4
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d013      	beq.n	8001a70 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f022 0204 	bic.w	r2, r2, #4
 8001a56:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a5c:	2208      	movs	r2, #8
 8001a5e:	409a      	lsls	r2, r3
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a68:	f043 0201 	orr.w	r2, r3, #1
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a74:	2201      	movs	r2, #1
 8001a76:	409a      	lsls	r2, r3
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d012      	beq.n	8001aa6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d00b      	beq.n	8001aa6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a92:	2201      	movs	r2, #1
 8001a94:	409a      	lsls	r2, r3
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a9e:	f043 0202 	orr.w	r2, r3, #2
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aaa:	2204      	movs	r2, #4
 8001aac:	409a      	lsls	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d012      	beq.n	8001adc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d00b      	beq.n	8001adc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac8:	2204      	movs	r2, #4
 8001aca:	409a      	lsls	r2, r3
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad4:	f043 0204 	orr.w	r2, r3, #4
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae0:	2210      	movs	r2, #16
 8001ae2:	409a      	lsls	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d043      	beq.n	8001b74 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0308 	and.w	r3, r3, #8
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d03c      	beq.n	8001b74 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001afe:	2210      	movs	r2, #16
 8001b00:	409a      	lsls	r2, r3
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d018      	beq.n	8001b46 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d108      	bne.n	8001b34 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d024      	beq.n	8001b74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	4798      	blx	r3
 8001b32:	e01f      	b.n	8001b74 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d01b      	beq.n	8001b74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	4798      	blx	r3
 8001b44:	e016      	b.n	8001b74 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d107      	bne.n	8001b64 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 0208 	bic.w	r2, r2, #8
 8001b62:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d003      	beq.n	8001b74 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b78:	2220      	movs	r2, #32
 8001b7a:	409a      	lsls	r2, r3
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f000 808e 	beq.w	8001ca2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0310 	and.w	r3, r3, #16
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f000 8086 	beq.w	8001ca2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b9a:	2220      	movs	r2, #32
 8001b9c:	409a      	lsls	r2, r3
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b05      	cmp	r3, #5
 8001bac:	d136      	bne.n	8001c1c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 0216 	bic.w	r2, r2, #22
 8001bbc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	695a      	ldr	r2, [r3, #20]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bcc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d103      	bne.n	8001bde <HAL_DMA_IRQHandler+0x1da>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d007      	beq.n	8001bee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f022 0208 	bic.w	r2, r2, #8
 8001bec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf2:	223f      	movs	r2, #63	; 0x3f
 8001bf4:	409a      	lsls	r2, r3
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2201      	movs	r2, #1
 8001c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d07d      	beq.n	8001d0e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	4798      	blx	r3
        }
        return;
 8001c1a:	e078      	b.n	8001d0e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d01c      	beq.n	8001c64 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d108      	bne.n	8001c4a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d030      	beq.n	8001ca2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	4798      	blx	r3
 8001c48:	e02b      	b.n	8001ca2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d027      	beq.n	8001ca2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	4798      	blx	r3
 8001c5a:	e022      	b.n	8001ca2 <HAL_DMA_IRQHandler+0x29e>
 8001c5c:	20000000 	.word	0x20000000
 8001c60:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d10f      	bne.n	8001c92 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 0210 	bic.w	r2, r2, #16
 8001c80:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d032      	beq.n	8001d10 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d022      	beq.n	8001cfc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2205      	movs	r2, #5
 8001cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 0201 	bic.w	r2, r2, #1
 8001ccc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	60bb      	str	r3, [r7, #8]
 8001cd4:	697a      	ldr	r2, [r7, #20]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d307      	bcc.n	8001cea <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1f2      	bne.n	8001cce <HAL_DMA_IRQHandler+0x2ca>
 8001ce8:	e000      	b.n	8001cec <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001cea:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d005      	beq.n	8001d10 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	4798      	blx	r3
 8001d0c:	e000      	b.n	8001d10 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001d0e:	bf00      	nop
    }
  }
}
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop

08001d18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
 8001d24:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d34:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	2b40      	cmp	r3, #64	; 0x40
 8001d44:	d108      	bne.n	8001d58 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68ba      	ldr	r2, [r7, #8]
 8001d54:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001d56:	e007      	b.n	8001d68 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68ba      	ldr	r2, [r7, #8]
 8001d5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	60da      	str	r2, [r3, #12]
}
 8001d68:	bf00      	nop
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	3b10      	subs	r3, #16
 8001d84:	4a14      	ldr	r2, [pc, #80]	; (8001dd8 <DMA_CalcBaseAndBitshift+0x64>)
 8001d86:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8a:	091b      	lsrs	r3, r3, #4
 8001d8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d8e:	4a13      	ldr	r2, [pc, #76]	; (8001ddc <DMA_CalcBaseAndBitshift+0x68>)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	4413      	add	r3, r2
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	461a      	mov	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2b03      	cmp	r3, #3
 8001da0:	d909      	bls.n	8001db6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001daa:	f023 0303 	bic.w	r3, r3, #3
 8001dae:	1d1a      	adds	r2, r3, #4
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	659a      	str	r2, [r3, #88]	; 0x58
 8001db4:	e007      	b.n	8001dc6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001dbe:	f023 0303 	bic.w	r3, r3, #3
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	aaaaaaab 	.word	0xaaaaaaab
 8001ddc:	08003ba8 	.word	0x08003ba8

08001de0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001de8:	2300      	movs	r3, #0
 8001dea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d11f      	bne.n	8001e3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	2b03      	cmp	r3, #3
 8001dfe:	d855      	bhi.n	8001eac <DMA_CheckFifoParam+0xcc>
 8001e00:	a201      	add	r2, pc, #4	; (adr r2, 8001e08 <DMA_CheckFifoParam+0x28>)
 8001e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e06:	bf00      	nop
 8001e08:	08001e19 	.word	0x08001e19
 8001e0c:	08001e2b 	.word	0x08001e2b
 8001e10:	08001e19 	.word	0x08001e19
 8001e14:	08001ead 	.word	0x08001ead
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d045      	beq.n	8001eb0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e28:	e042      	b.n	8001eb0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e32:	d13f      	bne.n	8001eb4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e38:	e03c      	b.n	8001eb4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e42:	d121      	bne.n	8001e88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	2b03      	cmp	r3, #3
 8001e48:	d836      	bhi.n	8001eb8 <DMA_CheckFifoParam+0xd8>
 8001e4a:	a201      	add	r2, pc, #4	; (adr r2, 8001e50 <DMA_CheckFifoParam+0x70>)
 8001e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e50:	08001e61 	.word	0x08001e61
 8001e54:	08001e67 	.word	0x08001e67
 8001e58:	08001e61 	.word	0x08001e61
 8001e5c:	08001e79 	.word	0x08001e79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	73fb      	strb	r3, [r7, #15]
      break;
 8001e64:	e02f      	b.n	8001ec6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d024      	beq.n	8001ebc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e76:	e021      	b.n	8001ebc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e80:	d11e      	bne.n	8001ec0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e86:	e01b      	b.n	8001ec0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d902      	bls.n	8001e94 <DMA_CheckFifoParam+0xb4>
 8001e8e:	2b03      	cmp	r3, #3
 8001e90:	d003      	beq.n	8001e9a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e92:	e018      	b.n	8001ec6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	73fb      	strb	r3, [r7, #15]
      break;
 8001e98:	e015      	b.n	8001ec6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00e      	beq.n	8001ec4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	73fb      	strb	r3, [r7, #15]
      break;
 8001eaa:	e00b      	b.n	8001ec4 <DMA_CheckFifoParam+0xe4>
      break;
 8001eac:	bf00      	nop
 8001eae:	e00a      	b.n	8001ec6 <DMA_CheckFifoParam+0xe6>
      break;
 8001eb0:	bf00      	nop
 8001eb2:	e008      	b.n	8001ec6 <DMA_CheckFifoParam+0xe6>
      break;
 8001eb4:	bf00      	nop
 8001eb6:	e006      	b.n	8001ec6 <DMA_CheckFifoParam+0xe6>
      break;
 8001eb8:	bf00      	nop
 8001eba:	e004      	b.n	8001ec6 <DMA_CheckFifoParam+0xe6>
      break;
 8001ebc:	bf00      	nop
 8001ebe:	e002      	b.n	8001ec6 <DMA_CheckFifoParam+0xe6>
      break;   
 8001ec0:	bf00      	nop
 8001ec2:	e000      	b.n	8001ec6 <DMA_CheckFifoParam+0xe6>
      break;
 8001ec4:	bf00      	nop
    }
  } 
  
  return status; 
 8001ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3714      	adds	r7, #20
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b089      	sub	sp, #36	; 0x24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eea:	2300      	movs	r3, #0
 8001eec:	61fb      	str	r3, [r7, #28]
 8001eee:	e16b      	b.n	80021c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	4013      	ands	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	f040 815a 	bne.w	80021c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d00b      	beq.n	8001f2e <HAL_GPIO_Init+0x5a>
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d007      	beq.n	8001f2e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f22:	2b11      	cmp	r3, #17
 8001f24:	d003      	beq.n	8001f2e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b12      	cmp	r3, #18
 8001f2c:	d130      	bne.n	8001f90 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	2203      	movs	r2, #3
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	4013      	ands	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	68da      	ldr	r2, [r3, #12]
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f64:	2201      	movs	r2, #1
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4013      	ands	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	091b      	lsrs	r3, r3, #4
 8001f7a:	f003 0201 	and.w	r2, r3, #1
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	2203      	movs	r2, #3
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d003      	beq.n	8001fd0 <HAL_GPIO_Init+0xfc>
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	2b12      	cmp	r3, #18
 8001fce:	d123      	bne.n	8002018 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	08da      	lsrs	r2, r3, #3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3208      	adds	r2, #8
 8001fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	220f      	movs	r2, #15
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	691a      	ldr	r2, [r3, #16]
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4313      	orrs	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	08da      	lsrs	r2, r3, #3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	3208      	adds	r2, #8
 8002012:	69b9      	ldr	r1, [r7, #24]
 8002014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	2203      	movs	r2, #3
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	43db      	mvns	r3, r3
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4013      	ands	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 0203 	and.w	r2, r3, #3
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4313      	orrs	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 80b4 	beq.w	80021c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	4b5f      	ldr	r3, [pc, #380]	; (80021dc <HAL_GPIO_Init+0x308>)
 8002060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002062:	4a5e      	ldr	r2, [pc, #376]	; (80021dc <HAL_GPIO_Init+0x308>)
 8002064:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002068:	6453      	str	r3, [r2, #68]	; 0x44
 800206a:	4b5c      	ldr	r3, [pc, #368]	; (80021dc <HAL_GPIO_Init+0x308>)
 800206c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002076:	4a5a      	ldr	r2, [pc, #360]	; (80021e0 <HAL_GPIO_Init+0x30c>)
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	089b      	lsrs	r3, r3, #2
 800207c:	3302      	adds	r3, #2
 800207e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002082:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f003 0303 	and.w	r3, r3, #3
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	220f      	movs	r2, #15
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43db      	mvns	r3, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4013      	ands	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a51      	ldr	r2, [pc, #324]	; (80021e4 <HAL_GPIO_Init+0x310>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d02b      	beq.n	80020fa <HAL_GPIO_Init+0x226>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a50      	ldr	r2, [pc, #320]	; (80021e8 <HAL_GPIO_Init+0x314>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d025      	beq.n	80020f6 <HAL_GPIO_Init+0x222>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a4f      	ldr	r2, [pc, #316]	; (80021ec <HAL_GPIO_Init+0x318>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d01f      	beq.n	80020f2 <HAL_GPIO_Init+0x21e>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a4e      	ldr	r2, [pc, #312]	; (80021f0 <HAL_GPIO_Init+0x31c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d019      	beq.n	80020ee <HAL_GPIO_Init+0x21a>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a4d      	ldr	r2, [pc, #308]	; (80021f4 <HAL_GPIO_Init+0x320>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d013      	beq.n	80020ea <HAL_GPIO_Init+0x216>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a4c      	ldr	r2, [pc, #304]	; (80021f8 <HAL_GPIO_Init+0x324>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d00d      	beq.n	80020e6 <HAL_GPIO_Init+0x212>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a4b      	ldr	r2, [pc, #300]	; (80021fc <HAL_GPIO_Init+0x328>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d007      	beq.n	80020e2 <HAL_GPIO_Init+0x20e>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a4a      	ldr	r2, [pc, #296]	; (8002200 <HAL_GPIO_Init+0x32c>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d101      	bne.n	80020de <HAL_GPIO_Init+0x20a>
 80020da:	2307      	movs	r3, #7
 80020dc:	e00e      	b.n	80020fc <HAL_GPIO_Init+0x228>
 80020de:	2308      	movs	r3, #8
 80020e0:	e00c      	b.n	80020fc <HAL_GPIO_Init+0x228>
 80020e2:	2306      	movs	r3, #6
 80020e4:	e00a      	b.n	80020fc <HAL_GPIO_Init+0x228>
 80020e6:	2305      	movs	r3, #5
 80020e8:	e008      	b.n	80020fc <HAL_GPIO_Init+0x228>
 80020ea:	2304      	movs	r3, #4
 80020ec:	e006      	b.n	80020fc <HAL_GPIO_Init+0x228>
 80020ee:	2303      	movs	r3, #3
 80020f0:	e004      	b.n	80020fc <HAL_GPIO_Init+0x228>
 80020f2:	2302      	movs	r3, #2
 80020f4:	e002      	b.n	80020fc <HAL_GPIO_Init+0x228>
 80020f6:	2301      	movs	r3, #1
 80020f8:	e000      	b.n	80020fc <HAL_GPIO_Init+0x228>
 80020fa:	2300      	movs	r3, #0
 80020fc:	69fa      	ldr	r2, [r7, #28]
 80020fe:	f002 0203 	and.w	r2, r2, #3
 8002102:	0092      	lsls	r2, r2, #2
 8002104:	4093      	lsls	r3, r2
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4313      	orrs	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800210c:	4934      	ldr	r1, [pc, #208]	; (80021e0 <HAL_GPIO_Init+0x30c>)
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	089b      	lsrs	r3, r3, #2
 8002112:	3302      	adds	r3, #2
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800211a:	4b3a      	ldr	r3, [pc, #232]	; (8002204 <HAL_GPIO_Init+0x330>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	43db      	mvns	r3, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4013      	ands	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	4313      	orrs	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800213e:	4a31      	ldr	r2, [pc, #196]	; (8002204 <HAL_GPIO_Init+0x330>)
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002144:	4b2f      	ldr	r3, [pc, #188]	; (8002204 <HAL_GPIO_Init+0x330>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	43db      	mvns	r3, r3
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4013      	ands	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	4313      	orrs	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002168:	4a26      	ldr	r2, [pc, #152]	; (8002204 <HAL_GPIO_Init+0x330>)
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800216e:	4b25      	ldr	r3, [pc, #148]	; (8002204 <HAL_GPIO_Init+0x330>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	43db      	mvns	r3, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4013      	ands	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	4313      	orrs	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002192:	4a1c      	ldr	r2, [pc, #112]	; (8002204 <HAL_GPIO_Init+0x330>)
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002198:	4b1a      	ldr	r3, [pc, #104]	; (8002204 <HAL_GPIO_Init+0x330>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	43db      	mvns	r3, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4013      	ands	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021bc:	4a11      	ldr	r2, [pc, #68]	; (8002204 <HAL_GPIO_Init+0x330>)
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	3301      	adds	r3, #1
 80021c6:	61fb      	str	r3, [r7, #28]
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	2b0f      	cmp	r3, #15
 80021cc:	f67f ae90 	bls.w	8001ef0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021d0:	bf00      	nop
 80021d2:	3724      	adds	r7, #36	; 0x24
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	40023800 	.word	0x40023800
 80021e0:	40013800 	.word	0x40013800
 80021e4:	40020000 	.word	0x40020000
 80021e8:	40020400 	.word	0x40020400
 80021ec:	40020800 	.word	0x40020800
 80021f0:	40020c00 	.word	0x40020c00
 80021f4:	40021000 	.word	0x40021000
 80021f8:	40021400 	.word	0x40021400
 80021fc:	40021800 	.word	0x40021800
 8002200:	40021c00 	.word	0x40021c00
 8002204:	40013c00 	.word	0x40013c00

08002208 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	460b      	mov	r3, r1
 8002212:	807b      	strh	r3, [r7, #2]
 8002214:	4613      	mov	r3, r2
 8002216:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002218:	787b      	ldrb	r3, [r7, #1]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800221e:	887a      	ldrh	r2, [r7, #2]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002224:	e003      	b.n	800222e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002226:	887b      	ldrh	r3, [r7, #2]
 8002228:	041a      	lsls	r2, r3, #16
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	619a      	str	r2, [r3, #24]
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
	...

0800223c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b088      	sub	sp, #32
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e128      	b.n	80024a0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d109      	bne.n	800226e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a90      	ldr	r2, [pc, #576]	; (80024a8 <HAL_I2S_Init+0x26c>)
 8002266:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7fe faa5 	bl	80007b8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2202      	movs	r2, #2
 8002272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	69db      	ldr	r3, [r3, #28]
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	6812      	ldr	r2, [r2, #0]
 8002280:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002284:	f023 030f 	bic.w	r3, r3, #15
 8002288:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2202      	movs	r2, #2
 8002290:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	2b02      	cmp	r3, #2
 8002298:	d060      	beq.n	800235c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d102      	bne.n	80022a8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80022a2:	2310      	movs	r3, #16
 80022a4:	617b      	str	r3, [r7, #20]
 80022a6:	e001      	b.n	80022ac <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80022a8:	2320      	movs	r3, #32
 80022aa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	2b20      	cmp	r3, #32
 80022b2:	d802      	bhi.n	80022ba <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80022ba:	2001      	movs	r0, #1
 80022bc:	f001 fbb2 	bl	8003a24 <HAL_RCCEx_GetPeriphCLKFreq>
 80022c0:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022ca:	d125      	bne.n	8002318 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d010      	beq.n	80022f6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	fbb2 f2f3 	udiv	r2, r2, r3
 80022de:	4613      	mov	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	461a      	mov	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f0:	3305      	adds	r3, #5
 80022f2:	613b      	str	r3, [r7, #16]
 80022f4:	e01f      	b.n	8002336 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002300:	4613      	mov	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4413      	add	r3, r2
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	461a      	mov	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002312:	3305      	adds	r3, #5
 8002314:	613b      	str	r3, [r7, #16]
 8002316:	e00e      	b.n	8002336 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002320:	4613      	mov	r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4413      	add	r3, r2
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	461a      	mov	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002332:	3305      	adds	r3, #5
 8002334:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4a5c      	ldr	r2, [pc, #368]	; (80024ac <HAL_I2S_Init+0x270>)
 800233a:	fba2 2303 	umull	r2, r3, r2, r3
 800233e:	08db      	lsrs	r3, r3, #3
 8002340:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	085b      	lsrs	r3, r3, #1
 8002352:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	021b      	lsls	r3, r3, #8
 8002358:	61bb      	str	r3, [r7, #24]
 800235a:	e003      	b.n	8002364 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800235c:	2302      	movs	r3, #2
 800235e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002360:	2300      	movs	r3, #0
 8002362:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d902      	bls.n	8002370 <HAL_I2S_Init+0x134>
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	2bff      	cmp	r3, #255	; 0xff
 800236e:	d907      	bls.n	8002380 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002374:	f043 0210 	orr.w	r2, r3, #16
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e08f      	b.n	80024a0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	691a      	ldr	r2, [r3, #16]
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	ea42 0103 	orr.w	r1, r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	69fa      	ldr	r2, [r7, #28]
 8002390:	430a      	orrs	r2, r1
 8002392:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800239e:	f023 030f 	bic.w	r3, r3, #15
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	6851      	ldr	r1, [r2, #4]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6892      	ldr	r2, [r2, #8]
 80023aa:	4311      	orrs	r1, r2
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	68d2      	ldr	r2, [r2, #12]
 80023b0:	4311      	orrs	r1, r2
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	6992      	ldr	r2, [r2, #24]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	431a      	orrs	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023c2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d161      	bne.n	8002490 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a38      	ldr	r2, [pc, #224]	; (80024b0 <HAL_I2S_Init+0x274>)
 80023d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a37      	ldr	r2, [pc, #220]	; (80024b4 <HAL_I2S_Init+0x278>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d101      	bne.n	80023e0 <HAL_I2S_Init+0x1a4>
 80023dc:	4b36      	ldr	r3, [pc, #216]	; (80024b8 <HAL_I2S_Init+0x27c>)
 80023de:	e001      	b.n	80023e4 <HAL_I2S_Init+0x1a8>
 80023e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	6812      	ldr	r2, [r2, #0]
 80023ea:	4932      	ldr	r1, [pc, #200]	; (80024b4 <HAL_I2S_Init+0x278>)
 80023ec:	428a      	cmp	r2, r1
 80023ee:	d101      	bne.n	80023f4 <HAL_I2S_Init+0x1b8>
 80023f0:	4a31      	ldr	r2, [pc, #196]	; (80024b8 <HAL_I2S_Init+0x27c>)
 80023f2:	e001      	b.n	80023f8 <HAL_I2S_Init+0x1bc>
 80023f4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80023f8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80023fc:	f023 030f 	bic.w	r3, r3, #15
 8002400:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a2b      	ldr	r2, [pc, #172]	; (80024b4 <HAL_I2S_Init+0x278>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d101      	bne.n	8002410 <HAL_I2S_Init+0x1d4>
 800240c:	4b2a      	ldr	r3, [pc, #168]	; (80024b8 <HAL_I2S_Init+0x27c>)
 800240e:	e001      	b.n	8002414 <HAL_I2S_Init+0x1d8>
 8002410:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002414:	2202      	movs	r2, #2
 8002416:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a25      	ldr	r2, [pc, #148]	; (80024b4 <HAL_I2S_Init+0x278>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d101      	bne.n	8002426 <HAL_I2S_Init+0x1ea>
 8002422:	4b25      	ldr	r3, [pc, #148]	; (80024b8 <HAL_I2S_Init+0x27c>)
 8002424:	e001      	b.n	800242a <HAL_I2S_Init+0x1ee>
 8002426:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800242a:	69db      	ldr	r3, [r3, #28]
 800242c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002436:	d003      	beq.n	8002440 <HAL_I2S_Init+0x204>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d103      	bne.n	8002448 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002440:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002444:	613b      	str	r3, [r7, #16]
 8002446:	e001      	b.n	800244c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002448:	2300      	movs	r3, #0
 800244a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	b299      	uxth	r1, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002462:	4303      	orrs	r3, r0
 8002464:	b29b      	uxth	r3, r3
 8002466:	430b      	orrs	r3, r1
 8002468:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800246a:	4313      	orrs	r3, r2
 800246c:	b29a      	uxth	r2, r3
 800246e:	897b      	ldrh	r3, [r7, #10]
 8002470:	4313      	orrs	r3, r2
 8002472:	b29b      	uxth	r3, r3
 8002474:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002478:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a0d      	ldr	r2, [pc, #52]	; (80024b4 <HAL_I2S_Init+0x278>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d101      	bne.n	8002488 <HAL_I2S_Init+0x24c>
 8002484:	4b0c      	ldr	r3, [pc, #48]	; (80024b8 <HAL_I2S_Init+0x27c>)
 8002486:	e001      	b.n	800248c <HAL_I2S_Init+0x250>
 8002488:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800248c:	897a      	ldrh	r2, [r7, #10]
 800248e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3720      	adds	r7, #32
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	080025b3 	.word	0x080025b3
 80024ac:	cccccccd 	.word	0xcccccccd
 80024b0:	080029dd 	.word	0x080029dd
 80024b4:	40003800 	.word	0x40003800
 80024b8:	40003400 	.word	0x40003400

080024bc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002504:	881a      	ldrh	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	1c9a      	adds	r2, r3, #2
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251a:	b29b      	uxth	r3, r3
 800251c:	3b01      	subs	r3, #1
 800251e:	b29a      	uxth	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002528:	b29b      	uxth	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10e      	bne.n	800254c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800253c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7ff ffb8 	bl	80024bc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800254c:	bf00      	nop
 800254e:	3708      	adds	r7, #8
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68da      	ldr	r2, [r3, #12]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002566:	b292      	uxth	r2, r2
 8002568:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256e:	1c9a      	adds	r2, r3, #2
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002578:	b29b      	uxth	r3, r3
 800257a:	3b01      	subs	r3, #1
 800257c:	b29a      	uxth	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002586:	b29b      	uxth	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	d10e      	bne.n	80025aa <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800259a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f7ff ff93 	bl	80024d0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80025aa:	bf00      	nop
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b086      	sub	sp, #24
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	d13a      	bne.n	8002644 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d109      	bne.n	80025ec <I2S_IRQHandler+0x3a>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e2:	2b40      	cmp	r3, #64	; 0x40
 80025e4:	d102      	bne.n	80025ec <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7ff ffb4 	bl	8002554 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f2:	2b40      	cmp	r3, #64	; 0x40
 80025f4:	d126      	bne.n	8002644 <I2S_IRQHandler+0x92>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 0320 	and.w	r3, r3, #32
 8002600:	2b20      	cmp	r3, #32
 8002602:	d11f      	bne.n	8002644 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	685a      	ldr	r2, [r3, #4]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002612:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002614:	2300      	movs	r3, #0
 8002616:	613b      	str	r3, [r7, #16]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	613b      	str	r3, [r7, #16]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	613b      	str	r3, [r7, #16]
 8002628:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002636:	f043 0202 	orr.w	r2, r3, #2
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7ff ff50 	bl	80024e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b03      	cmp	r3, #3
 800264e:	d136      	bne.n	80026be <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b02      	cmp	r3, #2
 8002658:	d109      	bne.n	800266e <I2S_IRQHandler+0xbc>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002664:	2b80      	cmp	r3, #128	; 0x80
 8002666:	d102      	bne.n	800266e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f7ff ff45 	bl	80024f8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	f003 0308 	and.w	r3, r3, #8
 8002674:	2b08      	cmp	r3, #8
 8002676:	d122      	bne.n	80026be <I2S_IRQHandler+0x10c>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f003 0320 	and.w	r3, r3, #32
 8002682:	2b20      	cmp	r3, #32
 8002684:	d11b      	bne.n	80026be <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002694:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002696:	2300      	movs	r3, #0
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b0:	f043 0204 	orr.w	r2, r3, #4
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f7ff ff13 	bl	80024e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80026be:	bf00      	nop
 80026c0:	3718      	adds	r7, #24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
	...

080026c8 <HAL_I2SEx_TransmitReceive_DMA>:
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pTxData, uint16_t *pRxData,
                                                uint16_t Size)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b088      	sub	sp, #32
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
 80026d4:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 80026da:	2300      	movs	r3, #0
 80026dc:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80026de:	2300      	movs	r3, #0
 80026e0:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d002      	beq.n	80026f4 <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 80026ee:	2302      	movs	r3, #2
 80026f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80026f2:	e160      	b.n	80029b6 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d005      	beq.n	8002706 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d002      	beq.n	8002706 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8002700:	887b      	ldrh	r3, [r7, #2]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e15a      	b.n	80029c0 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b01      	cmp	r3, #1
 8002714:	d101      	bne.n	800271a <HAL_I2SEx_TransmitReceive_DMA+0x52>
 8002716:	2302      	movs	r3, #2
 8002718:	e152      	b.n	80029c0 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	69db      	ldr	r3, [r3, #28]
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	2b03      	cmp	r3, #3
 800273e:	d002      	beq.n	8002746 <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	2b05      	cmp	r3, #5
 8002744:	d114      	bne.n	8002770 <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 8002746:	887b      	ldrh	r3, [r7, #2]
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	b29a      	uxth	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002750:	887b      	ldrh	r3, [r7, #2]
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	b29a      	uxth	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 800275a:	887b      	ldrh	r3, [r7, #2]
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	b29a      	uxth	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002764:	887b      	ldrh	r3, [r7, #2]
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	b29a      	uxth	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	865a      	strh	r2, [r3, #50]	; 0x32
 800276e:	e00b      	b.n	8002788 <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	887a      	ldrh	r2, [r7, #2]
 8002774:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	887a      	ldrh	r2, [r7, #2]
 800277a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	887a      	ldrh	r2, [r7, #2]
 8002780:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	887a      	ldrh	r2, [r7, #2]
 8002786:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2200      	movs	r2, #0
 800278c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2205      	movs	r2, #5
 8002792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800279a:	4a8b      	ldr	r2, [pc, #556]	; (80029c8 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 800279c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a2:	4a8a      	ldr	r2, [pc, #552]	; (80029cc <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 80027a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027aa:	4a89      	ldr	r2, [pc, #548]	; (80029d0 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 80027ac:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback  = I2SEx_TxRxDMAHalfCplt;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b2:	4a85      	ldr	r2, [pc, #532]	; (80029c8 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 80027b4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ba:	4a84      	ldr	r2, [pc, #528]	; (80029cc <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 80027bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c2:	4a83      	ldr	r2, [pc, #524]	; (80029d0 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 80027c4:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	69db      	ldr	r3, [r3, #28]
 80027cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027d0:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027d8:	d002      	beq.n	80027e0 <HAL_I2SEx_TransmitReceive_DMA+0x118>
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d16b      	bne.n	80028b8 <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 80027e0:	1d3b      	adds	r3, r7, #4
 80027e2:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a79      	ldr	r2, [pc, #484]	; (80029d4 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d101      	bne.n	80027f6 <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 80027f2:	4b79      	ldr	r3, [pc, #484]	; (80029d8 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80027f4:	e001      	b.n	80027fa <HAL_I2SEx_TransmitReceive_DMA+0x132>
 80027f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027fa:	330c      	adds	r3, #12
 80027fc:	4619      	mov	r1, r3
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002806:	b29b      	uxth	r3, r3
 8002808:	f7ff f8a4 	bl	8001954 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a70      	ldr	r2, [pc, #448]	; (80029d4 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d101      	bne.n	800281a <HAL_I2SEx_TransmitReceive_DMA+0x152>
 8002816:	4b70      	ldr	r3, [pc, #448]	; (80029d8 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002818:	e001      	b.n	800281e <HAL_I2SEx_TransmitReceive_DMA+0x156>
 800281a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	496b      	ldr	r1, [pc, #428]	; (80029d4 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002826:	428b      	cmp	r3, r1
 8002828:	d101      	bne.n	800282e <HAL_I2SEx_TransmitReceive_DMA+0x166>
 800282a:	4b6b      	ldr	r3, [pc, #428]	; (80029d8 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800282c:	e001      	b.n	8002832 <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 800282e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002832:	f042 0201 	orr.w	r2, r2, #1
 8002836:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8002838:	f107 0308 	add.w	r3, r7, #8
 800283c:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	6819      	ldr	r1, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	330c      	adds	r3, #12
 800284c:	461a      	mov	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002852:	b29b      	uxth	r3, r3
 8002854:	f7ff f87e 	bl	8001954 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f042 0202 	orr.w	r2, r2, #2
 8002866:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002876:	f000 809e 	beq.w	80029b6 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a55      	ldr	r2, [pc, #340]	; (80029d4 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d101      	bne.n	8002888 <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 8002884:	4b54      	ldr	r3, [pc, #336]	; (80029d8 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002886:	e001      	b.n	800288c <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 8002888:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800288c:	69da      	ldr	r2, [r3, #28]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4950      	ldr	r1, [pc, #320]	; (80029d4 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002894:	428b      	cmp	r3, r1
 8002896:	d101      	bne.n	800289c <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 8002898:	4b4f      	ldr	r3, [pc, #316]	; (80029d8 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800289a:	e001      	b.n	80028a0 <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 800289c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028a4:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	69da      	ldr	r2, [r3, #28]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028b4:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80028b6:	e07e      	b.n	80029b6 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028c6:	d10a      	bne.n	80028de <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80028c8:	2300      	movs	r3, #0
 80028ca:	613b      	str	r3, [r7, #16]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	613b      	str	r3, [r7, #16]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	613b      	str	r3, [r7, #16]
 80028dc:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 80028de:	f107 0308 	add.w	r3, r7, #8
 80028e2:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	6819      	ldr	r1, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a38      	ldr	r2, [pc, #224]	; (80029d4 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d101      	bne.n	80028fa <HAL_I2SEx_TransmitReceive_DMA+0x232>
 80028f6:	4b38      	ldr	r3, [pc, #224]	; (80029d8 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80028f8:	e001      	b.n	80028fe <HAL_I2SEx_TransmitReceive_DMA+0x236>
 80028fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028fe:	330c      	adds	r3, #12
 8002900:	461a      	mov	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002906:	b29b      	uxth	r3, r3
 8002908:	f7ff f824 	bl	8001954 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a30      	ldr	r2, [pc, #192]	; (80029d4 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d101      	bne.n	800291a <HAL_I2SEx_TransmitReceive_DMA+0x252>
 8002916:	4b30      	ldr	r3, [pc, #192]	; (80029d8 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002918:	e001      	b.n	800291e <HAL_I2SEx_TransmitReceive_DMA+0x256>
 800291a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	492b      	ldr	r1, [pc, #172]	; (80029d4 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002926:	428b      	cmp	r3, r1
 8002928:	d101      	bne.n	800292e <HAL_I2SEx_TransmitReceive_DMA+0x266>
 800292a:	4b2b      	ldr	r3, [pc, #172]	; (80029d8 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800292c:	e001      	b.n	8002932 <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 800292e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002932:	f042 0202 	orr.w	r2, r2, #2
 8002936:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8002938:	1d3b      	adds	r3, r7, #4
 800293a:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	330c      	adds	r3, #12
 8002946:	4619      	mov	r1, r3
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002950:	b29b      	uxth	r3, r3
 8002952:	f7fe ffff 	bl	8001954 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f042 0201 	orr.w	r2, r2, #1
 8002964:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	69db      	ldr	r3, [r3, #28]
 800296c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002974:	d01e      	beq.n	80029b4 <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a16      	ldr	r2, [pc, #88]	; (80029d4 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d101      	bne.n	8002984 <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 8002980:	4b15      	ldr	r3, [pc, #84]	; (80029d8 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002982:	e001      	b.n	8002988 <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 8002984:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002988:	69da      	ldr	r2, [r3, #28]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4911      	ldr	r1, [pc, #68]	; (80029d4 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002990:	428b      	cmp	r3, r1
 8002992:	d101      	bne.n	8002998 <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 8002994:	4b10      	ldr	r3, [pc, #64]	; (80029d8 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002996:	e001      	b.n	800299c <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 8002998:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800299c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029a0:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	69da      	ldr	r2, [r3, #28]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029b0:	61da      	str	r2, [r3, #28]
 80029b2:	e000      	b.n	80029b6 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 80029b4:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 80029be:	7ffb      	ldrb	r3, [r7, #31]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3720      	adds	r7, #32
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	08002c85 	.word	0x08002c85
 80029cc:	08002ca1 	.word	0x08002ca1
 80029d0:	08002dd9 	.word	0x08002dd9
 80029d4:	40003800 	.word	0x40003800
 80029d8:	40003400 	.word	0x40003400

080029dc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b088      	sub	sp, #32
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4aa2      	ldr	r2, [pc, #648]	; (8002c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d101      	bne.n	80029fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80029f6:	4ba2      	ldr	r3, [pc, #648]	; (8002c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80029f8:	e001      	b.n	80029fe <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80029fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a9b      	ldr	r2, [pc, #620]	; (8002c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d101      	bne.n	8002a18 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002a14:	4b9a      	ldr	r3, [pc, #616]	; (8002c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002a16:	e001      	b.n	8002a1c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002a18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a28:	d004      	beq.n	8002a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f040 8099 	bne.w	8002b66 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d107      	bne.n	8002a4e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d002      	beq.n	8002a4e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 fa05 	bl	8002e58 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d107      	bne.n	8002a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d002      	beq.n	8002a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 faa8 	bl	8002fb8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a6e:	2b40      	cmp	r3, #64	; 0x40
 8002a70:	d13a      	bne.n	8002ae8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	f003 0320 	and.w	r3, r3, #32
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d035      	beq.n	8002ae8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a7e      	ldr	r2, [pc, #504]	; (8002c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d101      	bne.n	8002a8a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002a86:	4b7e      	ldr	r3, [pc, #504]	; (8002c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002a88:	e001      	b.n	8002a8e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002a8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4979      	ldr	r1, [pc, #484]	; (8002c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002a96:	428b      	cmp	r3, r1
 8002a98:	d101      	bne.n	8002a9e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002a9a:	4b79      	ldr	r3, [pc, #484]	; (8002c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002a9c:	e001      	b.n	8002aa2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002a9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002aa2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002aa6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ab6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002ab8:	2300      	movs	r3, #0
 8002aba:	60fb      	str	r3, [r7, #12]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ada:	f043 0202 	orr.w	r2, r3, #2
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7ff fcfe 	bl	80024e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b08      	cmp	r3, #8
 8002af0:	f040 80be 	bne.w	8002c70 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	f003 0320 	and.w	r3, r3, #32
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f000 80b8 	beq.w	8002c70 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b0e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a59      	ldr	r2, [pc, #356]	; (8002c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d101      	bne.n	8002b1e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002b1a:	4b59      	ldr	r3, [pc, #356]	; (8002c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002b1c:	e001      	b.n	8002b22 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002b1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4954      	ldr	r1, [pc, #336]	; (8002c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002b2a:	428b      	cmp	r3, r1
 8002b2c:	d101      	bne.n	8002b32 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002b2e:	4b54      	ldr	r3, [pc, #336]	; (8002c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002b30:	e001      	b.n	8002b36 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002b32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b36:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b3a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	60bb      	str	r3, [r7, #8]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	60bb      	str	r3, [r7, #8]
 8002b48:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b56:	f043 0204 	orr.w	r2, r3, #4
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7ff fcc0 	bl	80024e4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002b64:	e084      	b.n	8002c70 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d107      	bne.n	8002b80 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d002      	beq.n	8002b80 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f99e 	bl	8002ebc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d107      	bne.n	8002b9a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d002      	beq.n	8002b9a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f9dd 	bl	8002f54 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba0:	2b40      	cmp	r3, #64	; 0x40
 8002ba2:	d12f      	bne.n	8002c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	f003 0320 	and.w	r3, r3, #32
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d02a      	beq.n	8002c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002bbc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a2e      	ldr	r2, [pc, #184]	; (8002c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d101      	bne.n	8002bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002bc8:	4b2d      	ldr	r3, [pc, #180]	; (8002c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002bca:	e001      	b.n	8002bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002bcc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4929      	ldr	r1, [pc, #164]	; (8002c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002bd8:	428b      	cmp	r3, r1
 8002bda:	d101      	bne.n	8002be0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002bdc:	4b28      	ldr	r3, [pc, #160]	; (8002c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002bde:	e001      	b.n	8002be4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002be0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002be4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002be8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf6:	f043 0202 	orr.w	r2, r3, #2
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7ff fc70 	bl	80024e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b08      	cmp	r3, #8
 8002c0c:	d131      	bne.n	8002c72 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	f003 0320 	and.w	r3, r3, #32
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d02c      	beq.n	8002c72 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a17      	ldr	r2, [pc, #92]	; (8002c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d101      	bne.n	8002c26 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002c22:	4b17      	ldr	r3, [pc, #92]	; (8002c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c24:	e001      	b.n	8002c2a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002c26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4912      	ldr	r1, [pc, #72]	; (8002c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c32:	428b      	cmp	r3, r1
 8002c34:	d101      	bne.n	8002c3a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8002c36:	4b12      	ldr	r3, [pc, #72]	; (8002c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c38:	e001      	b.n	8002c3e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002c3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c3e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c42:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c52:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c60:	f043 0204 	orr.w	r2, r3, #4
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f7ff fc3b 	bl	80024e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002c6e:	e000      	b.n	8002c72 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002c70:	bf00      	nop
}
 8002c72:	bf00      	nop
 8002c74:	3720      	adds	r7, #32
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40003800 	.word	0x40003800
 8002c80:	40003400 	.word	0x40003400

08002c84 <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c90:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f7fd fff6 	bl	8000c84 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002c98:	bf00      	nop
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cac:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f040 8084 	bne.w	8002dc0 <I2SEx_TxRxDMACplt+0x120>
  {
    if (hi2s->hdmarx == hdma)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d13c      	bne.n	8002d3c <I2SEx_TxRxDMACplt+0x9c>
    {
      /* Disable Rx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	69db      	ldr	r3, [r3, #28]
 8002cc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cd0:	d006      	beq.n	8002ce0 <I2SEx_TxRxDMACplt+0x40>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	69db      	ldr	r3, [r3, #28]
 8002cd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d116      	bne.n	8002d0e <I2SEx_TxRxDMACplt+0x6e>
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a3a      	ldr	r2, [pc, #232]	; (8002dd0 <I2SEx_TxRxDMACplt+0x130>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d101      	bne.n	8002cee <I2SEx_TxRxDMACplt+0x4e>
 8002cea:	4b3a      	ldr	r3, [pc, #232]	; (8002dd4 <I2SEx_TxRxDMACplt+0x134>)
 8002cec:	e001      	b.n	8002cf2 <I2SEx_TxRxDMACplt+0x52>
 8002cee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cf2:	685a      	ldr	r2, [r3, #4]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4935      	ldr	r1, [pc, #212]	; (8002dd0 <I2SEx_TxRxDMACplt+0x130>)
 8002cfa:	428b      	cmp	r3, r1
 8002cfc:	d101      	bne.n	8002d02 <I2SEx_TxRxDMACplt+0x62>
 8002cfe:	4b35      	ldr	r3, [pc, #212]	; (8002dd4 <I2SEx_TxRxDMACplt+0x134>)
 8002d00:	e001      	b.n	8002d06 <I2SEx_TxRxDMACplt+0x66>
 8002d02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d06:	f022 0201 	bic.w	r2, r2, #1
 8002d0a:	605a      	str	r2, [r3, #4]
 8002d0c:	e007      	b.n	8002d1e <I2SEx_TxRxDMACplt+0x7e>
      }
      else
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	685a      	ldr	r2, [r3, #4]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 0201 	bic.w	r2, r2, #1
 8002d1c:	605a      	str	r2, [r3, #4]
      }

      hi2s->RxXferCount = 0U;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	865a      	strh	r2, [r3, #50]	; 0x32

      if (hi2s->TxXferCount == 0U)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d106      	bne.n	8002d3c <I2SEx_TxRxDMACplt+0x9c>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f7fd ffda 	bl	8000cf0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }

    if (hi2s->hdmatx == hdma)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d13c      	bne.n	8002dc0 <I2SEx_TxRxDMACplt+0x120>
    {
      /* Disable Tx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d54:	d006      	beq.n	8002d64 <I2SEx_TxRxDMACplt+0xc4>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	69db      	ldr	r3, [r3, #28]
 8002d5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d108      	bne.n	8002d76 <I2SEx_TxRxDMACplt+0xd6>
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0202 	bic.w	r2, r2, #2
 8002d72:	605a      	str	r2, [r3, #4]
 8002d74:	e015      	b.n	8002da2 <I2SEx_TxRxDMACplt+0x102>
      }
      else
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a15      	ldr	r2, [pc, #84]	; (8002dd0 <I2SEx_TxRxDMACplt+0x130>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d101      	bne.n	8002d84 <I2SEx_TxRxDMACplt+0xe4>
 8002d80:	4b14      	ldr	r3, [pc, #80]	; (8002dd4 <I2SEx_TxRxDMACplt+0x134>)
 8002d82:	e001      	b.n	8002d88 <I2SEx_TxRxDMACplt+0xe8>
 8002d84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4910      	ldr	r1, [pc, #64]	; (8002dd0 <I2SEx_TxRxDMACplt+0x130>)
 8002d90:	428b      	cmp	r3, r1
 8002d92:	d101      	bne.n	8002d98 <I2SEx_TxRxDMACplt+0xf8>
 8002d94:	4b0f      	ldr	r3, [pc, #60]	; (8002dd4 <I2SEx_TxRxDMACplt+0x134>)
 8002d96:	e001      	b.n	8002d9c <I2SEx_TxRxDMACplt+0xfc>
 8002d98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d9c:	f022 0202 	bic.w	r2, r2, #2
 8002da0:	605a      	str	r2, [r3, #4]
      }

      hi2s->TxXferCount = 0U;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2s->RxXferCount == 0U)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d106      	bne.n	8002dc0 <I2SEx_TxRxDMACplt+0x120>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f7fd ff98 	bl	8000cf0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }
  }
  // Fixes bug - https://github.com/STMicroelectronics/STM32CubeF4/issues/8
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f7fd ff95 	bl	8000cf0 <HAL_I2SEx_TxRxCpltCallback>

}
 8002dc6:	bf00      	nop
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40003800 	.word	0x40003800
 8002dd4:	40003400 	.word	0x40003400

08002dd8 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de4:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 0203 	bic.w	r2, r2, #3
 8002df4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a15      	ldr	r2, [pc, #84]	; (8002e50 <I2SEx_TxRxDMAError+0x78>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d101      	bne.n	8002e04 <I2SEx_TxRxDMAError+0x2c>
 8002e00:	4b14      	ldr	r3, [pc, #80]	; (8002e54 <I2SEx_TxRxDMAError+0x7c>)
 8002e02:	e001      	b.n	8002e08 <I2SEx_TxRxDMAError+0x30>
 8002e04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4910      	ldr	r1, [pc, #64]	; (8002e50 <I2SEx_TxRxDMAError+0x78>)
 8002e10:	428b      	cmp	r3, r1
 8002e12:	d101      	bne.n	8002e18 <I2SEx_TxRxDMAError+0x40>
 8002e14:	4b0f      	ldr	r3, [pc, #60]	; (8002e54 <I2SEx_TxRxDMAError+0x7c>)
 8002e16:	e001      	b.n	8002e1c <I2SEx_TxRxDMAError+0x44>
 8002e18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e1c:	f022 0203 	bic.w	r2, r2, #3
 8002e20:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3a:	f043 0208 	orr.w	r2, r3, #8
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f7ff fb4e 	bl	80024e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002e48:	bf00      	nop
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	40003800 	.word	0x40003800
 8002e54:	40003400 	.word	0x40003400

08002e58 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	1c99      	adds	r1, r3, #2
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	6251      	str	r1, [r2, #36]	; 0x24
 8002e6a:	881a      	ldrh	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d113      	bne.n	8002eb2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e98:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d106      	bne.n	8002eb2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f7fd ff1f 	bl	8000cf0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002eb2:	bf00      	nop
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
	...

08002ebc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec8:	1c99      	adds	r1, r3, #2
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	6251      	str	r1, [r2, #36]	; 0x24
 8002ece:	8819      	ldrh	r1, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a1d      	ldr	r2, [pc, #116]	; (8002f4c <I2SEx_TxISR_I2SExt+0x90>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d101      	bne.n	8002ede <I2SEx_TxISR_I2SExt+0x22>
 8002eda:	4b1d      	ldr	r3, [pc, #116]	; (8002f50 <I2SEx_TxISR_I2SExt+0x94>)
 8002edc:	e001      	b.n	8002ee2 <I2SEx_TxISR_I2SExt+0x26>
 8002ede:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ee2:	460a      	mov	r2, r1
 8002ee4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	3b01      	subs	r3, #1
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d121      	bne.n	8002f42 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a12      	ldr	r2, [pc, #72]	; (8002f4c <I2SEx_TxISR_I2SExt+0x90>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d101      	bne.n	8002f0c <I2SEx_TxISR_I2SExt+0x50>
 8002f08:	4b11      	ldr	r3, [pc, #68]	; (8002f50 <I2SEx_TxISR_I2SExt+0x94>)
 8002f0a:	e001      	b.n	8002f10 <I2SEx_TxISR_I2SExt+0x54>
 8002f0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	490d      	ldr	r1, [pc, #52]	; (8002f4c <I2SEx_TxISR_I2SExt+0x90>)
 8002f18:	428b      	cmp	r3, r1
 8002f1a:	d101      	bne.n	8002f20 <I2SEx_TxISR_I2SExt+0x64>
 8002f1c:	4b0c      	ldr	r3, [pc, #48]	; (8002f50 <I2SEx_TxISR_I2SExt+0x94>)
 8002f1e:	e001      	b.n	8002f24 <I2SEx_TxISR_I2SExt+0x68>
 8002f20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f24:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f28:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d106      	bne.n	8002f42 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f7fd fed7 	bl	8000cf0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f42:	bf00      	nop
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	40003800 	.word	0x40003800
 8002f50:	40003400 	.word	0x40003400

08002f54 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68d8      	ldr	r0, [r3, #12]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f66:	1c99      	adds	r1, r3, #2
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002f6c:	b282      	uxth	r2, r0
 8002f6e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	3b01      	subs	r3, #1
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d113      	bne.n	8002fb0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f96:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d106      	bne.n	8002fb0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7fd fea0 	bl	8000cf0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002fb0:	bf00      	nop
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a20      	ldr	r2, [pc, #128]	; (8003048 <I2SEx_RxISR_I2SExt+0x90>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d101      	bne.n	8002fce <I2SEx_RxISR_I2SExt+0x16>
 8002fca:	4b20      	ldr	r3, [pc, #128]	; (800304c <I2SEx_RxISR_I2SExt+0x94>)
 8002fcc:	e001      	b.n	8002fd2 <I2SEx_RxISR_I2SExt+0x1a>
 8002fce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fd2:	68d8      	ldr	r0, [r3, #12]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd8:	1c99      	adds	r1, r3, #2
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002fde:	b282      	uxth	r2, r0
 8002fe0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d121      	bne.n	800303e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a12      	ldr	r2, [pc, #72]	; (8003048 <I2SEx_RxISR_I2SExt+0x90>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d101      	bne.n	8003008 <I2SEx_RxISR_I2SExt+0x50>
 8003004:	4b11      	ldr	r3, [pc, #68]	; (800304c <I2SEx_RxISR_I2SExt+0x94>)
 8003006:	e001      	b.n	800300c <I2SEx_RxISR_I2SExt+0x54>
 8003008:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	490d      	ldr	r1, [pc, #52]	; (8003048 <I2SEx_RxISR_I2SExt+0x90>)
 8003014:	428b      	cmp	r3, r1
 8003016:	d101      	bne.n	800301c <I2SEx_RxISR_I2SExt+0x64>
 8003018:	4b0c      	ldr	r3, [pc, #48]	; (800304c <I2SEx_RxISR_I2SExt+0x94>)
 800301a:	e001      	b.n	8003020 <I2SEx_RxISR_I2SExt+0x68>
 800301c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003020:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003024:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302a:	b29b      	uxth	r3, r3
 800302c:	2b00      	cmp	r3, #0
 800302e:	d106      	bne.n	800303e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f7fd fe59 	bl	8000cf0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800303e:	bf00      	nop
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40003800 	.word	0x40003800
 800304c:	40003400 	.word	0x40003400

08003050 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e25b      	b.n	800351a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b00      	cmp	r3, #0
 800306c:	d075      	beq.n	800315a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800306e:	4ba3      	ldr	r3, [pc, #652]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 030c 	and.w	r3, r3, #12
 8003076:	2b04      	cmp	r3, #4
 8003078:	d00c      	beq.n	8003094 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800307a:	4ba0      	ldr	r3, [pc, #640]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003082:	2b08      	cmp	r3, #8
 8003084:	d112      	bne.n	80030ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003086:	4b9d      	ldr	r3, [pc, #628]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800308e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003092:	d10b      	bne.n	80030ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003094:	4b99      	ldr	r3, [pc, #612]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d05b      	beq.n	8003158 <HAL_RCC_OscConfig+0x108>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d157      	bne.n	8003158 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e236      	b.n	800351a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030b4:	d106      	bne.n	80030c4 <HAL_RCC_OscConfig+0x74>
 80030b6:	4b91      	ldr	r3, [pc, #580]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a90      	ldr	r2, [pc, #576]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 80030bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	e01d      	b.n	8003100 <HAL_RCC_OscConfig+0xb0>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030cc:	d10c      	bne.n	80030e8 <HAL_RCC_OscConfig+0x98>
 80030ce:	4b8b      	ldr	r3, [pc, #556]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a8a      	ldr	r2, [pc, #552]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 80030d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	4b88      	ldr	r3, [pc, #544]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a87      	ldr	r2, [pc, #540]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 80030e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030e4:	6013      	str	r3, [r2, #0]
 80030e6:	e00b      	b.n	8003100 <HAL_RCC_OscConfig+0xb0>
 80030e8:	4b84      	ldr	r3, [pc, #528]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a83      	ldr	r2, [pc, #524]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 80030ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030f2:	6013      	str	r3, [r2, #0]
 80030f4:	4b81      	ldr	r3, [pc, #516]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a80      	ldr	r2, [pc, #512]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 80030fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d013      	beq.n	8003130 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003108:	f7fd fff6 	bl	80010f8 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003110:	f7fd fff2 	bl	80010f8 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b64      	cmp	r3, #100	; 0x64
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e1fb      	b.n	800351a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003122:	4b76      	ldr	r3, [pc, #472]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0f0      	beq.n	8003110 <HAL_RCC_OscConfig+0xc0>
 800312e:	e014      	b.n	800315a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003130:	f7fd ffe2 	bl	80010f8 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003138:	f7fd ffde 	bl	80010f8 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b64      	cmp	r3, #100	; 0x64
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e1e7      	b.n	800351a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800314a:	4b6c      	ldr	r3, [pc, #432]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1f0      	bne.n	8003138 <HAL_RCC_OscConfig+0xe8>
 8003156:	e000      	b.n	800315a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d063      	beq.n	800322e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003166:	4b65      	ldr	r3, [pc, #404]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 030c 	and.w	r3, r3, #12
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00b      	beq.n	800318a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003172:	4b62      	ldr	r3, [pc, #392]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800317a:	2b08      	cmp	r3, #8
 800317c:	d11c      	bne.n	80031b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800317e:	4b5f      	ldr	r3, [pc, #380]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d116      	bne.n	80031b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800318a:	4b5c      	ldr	r3, [pc, #368]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d005      	beq.n	80031a2 <HAL_RCC_OscConfig+0x152>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d001      	beq.n	80031a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e1bb      	b.n	800351a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a2:	4b56      	ldr	r3, [pc, #344]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	4952      	ldr	r1, [pc, #328]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031b6:	e03a      	b.n	800322e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d020      	beq.n	8003202 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031c0:	4b4f      	ldr	r3, [pc, #316]	; (8003300 <HAL_RCC_OscConfig+0x2b0>)
 80031c2:	2201      	movs	r2, #1
 80031c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c6:	f7fd ff97 	bl	80010f8 <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031cc:	e008      	b.n	80031e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031ce:	f7fd ff93 	bl	80010f8 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e19c      	b.n	800351a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e0:	4b46      	ldr	r3, [pc, #280]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0f0      	beq.n	80031ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ec:	4b43      	ldr	r3, [pc, #268]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	4940      	ldr	r1, [pc, #256]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	600b      	str	r3, [r1, #0]
 8003200:	e015      	b.n	800322e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003202:	4b3f      	ldr	r3, [pc, #252]	; (8003300 <HAL_RCC_OscConfig+0x2b0>)
 8003204:	2200      	movs	r2, #0
 8003206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003208:	f7fd ff76 	bl	80010f8 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003210:	f7fd ff72 	bl	80010f8 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e17b      	b.n	800351a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003222:	4b36      	ldr	r3, [pc, #216]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f0      	bne.n	8003210 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b00      	cmp	r3, #0
 8003238:	d030      	beq.n	800329c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d016      	beq.n	8003270 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003242:	4b30      	ldr	r3, [pc, #192]	; (8003304 <HAL_RCC_OscConfig+0x2b4>)
 8003244:	2201      	movs	r2, #1
 8003246:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003248:	f7fd ff56 	bl	80010f8 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003250:	f7fd ff52 	bl	80010f8 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e15b      	b.n	800351a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003262:	4b26      	ldr	r3, [pc, #152]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 8003264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d0f0      	beq.n	8003250 <HAL_RCC_OscConfig+0x200>
 800326e:	e015      	b.n	800329c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003270:	4b24      	ldr	r3, [pc, #144]	; (8003304 <HAL_RCC_OscConfig+0x2b4>)
 8003272:	2200      	movs	r2, #0
 8003274:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003276:	f7fd ff3f 	bl	80010f8 <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800327c:	e008      	b.n	8003290 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800327e:	f7fd ff3b 	bl	80010f8 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e144      	b.n	800351a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003290:	4b1a      	ldr	r3, [pc, #104]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 8003292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1f0      	bne.n	800327e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0304 	and.w	r3, r3, #4
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 80a0 	beq.w	80033ea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032aa:	2300      	movs	r3, #0
 80032ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ae:	4b13      	ldr	r3, [pc, #76]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10f      	bne.n	80032da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032ba:	2300      	movs	r3, #0
 80032bc:	60bb      	str	r3, [r7, #8]
 80032be:	4b0f      	ldr	r3, [pc, #60]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	4a0e      	ldr	r2, [pc, #56]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 80032c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032c8:	6413      	str	r3, [r2, #64]	; 0x40
 80032ca:	4b0c      	ldr	r3, [pc, #48]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d2:	60bb      	str	r3, [r7, #8]
 80032d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032d6:	2301      	movs	r3, #1
 80032d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032da:	4b0b      	ldr	r3, [pc, #44]	; (8003308 <HAL_RCC_OscConfig+0x2b8>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d121      	bne.n	800332a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032e6:	4b08      	ldr	r3, [pc, #32]	; (8003308 <HAL_RCC_OscConfig+0x2b8>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a07      	ldr	r2, [pc, #28]	; (8003308 <HAL_RCC_OscConfig+0x2b8>)
 80032ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032f2:	f7fd ff01 	bl	80010f8 <HAL_GetTick>
 80032f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f8:	e011      	b.n	800331e <HAL_RCC_OscConfig+0x2ce>
 80032fa:	bf00      	nop
 80032fc:	40023800 	.word	0x40023800
 8003300:	42470000 	.word	0x42470000
 8003304:	42470e80 	.word	0x42470e80
 8003308:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800330c:	f7fd fef4 	bl	80010f8 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e0fd      	b.n	800351a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800331e:	4b81      	ldr	r3, [pc, #516]	; (8003524 <HAL_RCC_OscConfig+0x4d4>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0f0      	beq.n	800330c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d106      	bne.n	8003340 <HAL_RCC_OscConfig+0x2f0>
 8003332:	4b7d      	ldr	r3, [pc, #500]	; (8003528 <HAL_RCC_OscConfig+0x4d8>)
 8003334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003336:	4a7c      	ldr	r2, [pc, #496]	; (8003528 <HAL_RCC_OscConfig+0x4d8>)
 8003338:	f043 0301 	orr.w	r3, r3, #1
 800333c:	6713      	str	r3, [r2, #112]	; 0x70
 800333e:	e01c      	b.n	800337a <HAL_RCC_OscConfig+0x32a>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	2b05      	cmp	r3, #5
 8003346:	d10c      	bne.n	8003362 <HAL_RCC_OscConfig+0x312>
 8003348:	4b77      	ldr	r3, [pc, #476]	; (8003528 <HAL_RCC_OscConfig+0x4d8>)
 800334a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334c:	4a76      	ldr	r2, [pc, #472]	; (8003528 <HAL_RCC_OscConfig+0x4d8>)
 800334e:	f043 0304 	orr.w	r3, r3, #4
 8003352:	6713      	str	r3, [r2, #112]	; 0x70
 8003354:	4b74      	ldr	r3, [pc, #464]	; (8003528 <HAL_RCC_OscConfig+0x4d8>)
 8003356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003358:	4a73      	ldr	r2, [pc, #460]	; (8003528 <HAL_RCC_OscConfig+0x4d8>)
 800335a:	f043 0301 	orr.w	r3, r3, #1
 800335e:	6713      	str	r3, [r2, #112]	; 0x70
 8003360:	e00b      	b.n	800337a <HAL_RCC_OscConfig+0x32a>
 8003362:	4b71      	ldr	r3, [pc, #452]	; (8003528 <HAL_RCC_OscConfig+0x4d8>)
 8003364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003366:	4a70      	ldr	r2, [pc, #448]	; (8003528 <HAL_RCC_OscConfig+0x4d8>)
 8003368:	f023 0301 	bic.w	r3, r3, #1
 800336c:	6713      	str	r3, [r2, #112]	; 0x70
 800336e:	4b6e      	ldr	r3, [pc, #440]	; (8003528 <HAL_RCC_OscConfig+0x4d8>)
 8003370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003372:	4a6d      	ldr	r2, [pc, #436]	; (8003528 <HAL_RCC_OscConfig+0x4d8>)
 8003374:	f023 0304 	bic.w	r3, r3, #4
 8003378:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d015      	beq.n	80033ae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003382:	f7fd feb9 	bl	80010f8 <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003388:	e00a      	b.n	80033a0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800338a:	f7fd feb5 	bl	80010f8 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	f241 3288 	movw	r2, #5000	; 0x1388
 8003398:	4293      	cmp	r3, r2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e0bc      	b.n	800351a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a0:	4b61      	ldr	r3, [pc, #388]	; (8003528 <HAL_RCC_OscConfig+0x4d8>)
 80033a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0ee      	beq.n	800338a <HAL_RCC_OscConfig+0x33a>
 80033ac:	e014      	b.n	80033d8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ae:	f7fd fea3 	bl	80010f8 <HAL_GetTick>
 80033b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033b4:	e00a      	b.n	80033cc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033b6:	f7fd fe9f 	bl	80010f8 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e0a6      	b.n	800351a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033cc:	4b56      	ldr	r3, [pc, #344]	; (8003528 <HAL_RCC_OscConfig+0x4d8>)
 80033ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1ee      	bne.n	80033b6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033d8:	7dfb      	ldrb	r3, [r7, #23]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d105      	bne.n	80033ea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033de:	4b52      	ldr	r3, [pc, #328]	; (8003528 <HAL_RCC_OscConfig+0x4d8>)
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	4a51      	ldr	r2, [pc, #324]	; (8003528 <HAL_RCC_OscConfig+0x4d8>)
 80033e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f000 8092 	beq.w	8003518 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033f4:	4b4c      	ldr	r3, [pc, #304]	; (8003528 <HAL_RCC_OscConfig+0x4d8>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f003 030c 	and.w	r3, r3, #12
 80033fc:	2b08      	cmp	r3, #8
 80033fe:	d05c      	beq.n	80034ba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	2b02      	cmp	r3, #2
 8003406:	d141      	bne.n	800348c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003408:	4b48      	ldr	r3, [pc, #288]	; (800352c <HAL_RCC_OscConfig+0x4dc>)
 800340a:	2200      	movs	r2, #0
 800340c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800340e:	f7fd fe73 	bl	80010f8 <HAL_GetTick>
 8003412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003414:	e008      	b.n	8003428 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003416:	f7fd fe6f 	bl	80010f8 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b02      	cmp	r3, #2
 8003422:	d901      	bls.n	8003428 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e078      	b.n	800351a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003428:	4b3f      	ldr	r3, [pc, #252]	; (8003528 <HAL_RCC_OscConfig+0x4d8>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1f0      	bne.n	8003416 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	69da      	ldr	r2, [r3, #28]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	431a      	orrs	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	019b      	lsls	r3, r3, #6
 8003444:	431a      	orrs	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344a:	085b      	lsrs	r3, r3, #1
 800344c:	3b01      	subs	r3, #1
 800344e:	041b      	lsls	r3, r3, #16
 8003450:	431a      	orrs	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003456:	061b      	lsls	r3, r3, #24
 8003458:	4933      	ldr	r1, [pc, #204]	; (8003528 <HAL_RCC_OscConfig+0x4d8>)
 800345a:	4313      	orrs	r3, r2
 800345c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800345e:	4b33      	ldr	r3, [pc, #204]	; (800352c <HAL_RCC_OscConfig+0x4dc>)
 8003460:	2201      	movs	r2, #1
 8003462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003464:	f7fd fe48 	bl	80010f8 <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800346c:	f7fd fe44 	bl	80010f8 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b02      	cmp	r3, #2
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e04d      	b.n	800351a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800347e:	4b2a      	ldr	r3, [pc, #168]	; (8003528 <HAL_RCC_OscConfig+0x4d8>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d0f0      	beq.n	800346c <HAL_RCC_OscConfig+0x41c>
 800348a:	e045      	b.n	8003518 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800348c:	4b27      	ldr	r3, [pc, #156]	; (800352c <HAL_RCC_OscConfig+0x4dc>)
 800348e:	2200      	movs	r2, #0
 8003490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003492:	f7fd fe31 	bl	80010f8 <HAL_GetTick>
 8003496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003498:	e008      	b.n	80034ac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800349a:	f7fd fe2d 	bl	80010f8 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d901      	bls.n	80034ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e036      	b.n	800351a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ac:	4b1e      	ldr	r3, [pc, #120]	; (8003528 <HAL_RCC_OscConfig+0x4d8>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1f0      	bne.n	800349a <HAL_RCC_OscConfig+0x44a>
 80034b8:	e02e      	b.n	8003518 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d101      	bne.n	80034c6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e029      	b.n	800351a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034c6:	4b18      	ldr	r3, [pc, #96]	; (8003528 <HAL_RCC_OscConfig+0x4d8>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d11c      	bne.n	8003514 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d115      	bne.n	8003514 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034ee:	4013      	ands	r3, r2
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d10d      	bne.n	8003514 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003502:	429a      	cmp	r2, r3
 8003504:	d106      	bne.n	8003514 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003510:	429a      	cmp	r2, r3
 8003512:	d001      	beq.n	8003518 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e000      	b.n	800351a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3718      	adds	r7, #24
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	40007000 	.word	0x40007000
 8003528:	40023800 	.word	0x40023800
 800352c:	42470060 	.word	0x42470060

08003530 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d101      	bne.n	8003544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e0cc      	b.n	80036de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003544:	4b68      	ldr	r3, [pc, #416]	; (80036e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 030f 	and.w	r3, r3, #15
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	429a      	cmp	r2, r3
 8003550:	d90c      	bls.n	800356c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003552:	4b65      	ldr	r3, [pc, #404]	; (80036e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	b2d2      	uxtb	r2, r2
 8003558:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800355a:	4b63      	ldr	r3, [pc, #396]	; (80036e8 <HAL_RCC_ClockConfig+0x1b8>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 030f 	and.w	r3, r3, #15
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	429a      	cmp	r2, r3
 8003566:	d001      	beq.n	800356c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e0b8      	b.n	80036de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d020      	beq.n	80035ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	2b00      	cmp	r3, #0
 8003582:	d005      	beq.n	8003590 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003584:	4b59      	ldr	r3, [pc, #356]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	4a58      	ldr	r2, [pc, #352]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 800358a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800358e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0308 	and.w	r3, r3, #8
 8003598:	2b00      	cmp	r3, #0
 800359a:	d005      	beq.n	80035a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800359c:	4b53      	ldr	r3, [pc, #332]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	4a52      	ldr	r2, [pc, #328]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 80035a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035a8:	4b50      	ldr	r3, [pc, #320]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	494d      	ldr	r1, [pc, #308]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d044      	beq.n	8003650 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d107      	bne.n	80035de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ce:	4b47      	ldr	r3, [pc, #284]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d119      	bne.n	800360e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e07f      	b.n	80036de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d003      	beq.n	80035ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035ea:	2b03      	cmp	r3, #3
 80035ec:	d107      	bne.n	80035fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ee:	4b3f      	ldr	r3, [pc, #252]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d109      	bne.n	800360e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e06f      	b.n	80036de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035fe:	4b3b      	ldr	r3, [pc, #236]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e067      	b.n	80036de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800360e:	4b37      	ldr	r3, [pc, #220]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f023 0203 	bic.w	r2, r3, #3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	4934      	ldr	r1, [pc, #208]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 800361c:	4313      	orrs	r3, r2
 800361e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003620:	f7fd fd6a 	bl	80010f8 <HAL_GetTick>
 8003624:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003626:	e00a      	b.n	800363e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003628:	f7fd fd66 	bl	80010f8 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	f241 3288 	movw	r2, #5000	; 0x1388
 8003636:	4293      	cmp	r3, r2
 8003638:	d901      	bls.n	800363e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e04f      	b.n	80036de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800363e:	4b2b      	ldr	r3, [pc, #172]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 020c 	and.w	r2, r3, #12
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	429a      	cmp	r2, r3
 800364e:	d1eb      	bne.n	8003628 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003650:	4b25      	ldr	r3, [pc, #148]	; (80036e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 030f 	and.w	r3, r3, #15
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	429a      	cmp	r2, r3
 800365c:	d20c      	bcs.n	8003678 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800365e:	4b22      	ldr	r3, [pc, #136]	; (80036e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	b2d2      	uxtb	r2, r2
 8003664:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003666:	4b20      	ldr	r3, [pc, #128]	; (80036e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 030f 	and.w	r3, r3, #15
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	429a      	cmp	r2, r3
 8003672:	d001      	beq.n	8003678 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e032      	b.n	80036de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	2b00      	cmp	r3, #0
 8003682:	d008      	beq.n	8003696 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003684:	4b19      	ldr	r3, [pc, #100]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	4916      	ldr	r1, [pc, #88]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 8003692:	4313      	orrs	r3, r2
 8003694:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0308 	and.w	r3, r3, #8
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d009      	beq.n	80036b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036a2:	4b12      	ldr	r3, [pc, #72]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	490e      	ldr	r1, [pc, #56]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036b6:	f000 f821 	bl	80036fc <HAL_RCC_GetSysClockFreq>
 80036ba:	4601      	mov	r1, r0
 80036bc:	4b0b      	ldr	r3, [pc, #44]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	091b      	lsrs	r3, r3, #4
 80036c2:	f003 030f 	and.w	r3, r3, #15
 80036c6:	4a0a      	ldr	r2, [pc, #40]	; (80036f0 <HAL_RCC_ClockConfig+0x1c0>)
 80036c8:	5cd3      	ldrb	r3, [r2, r3]
 80036ca:	fa21 f303 	lsr.w	r3, r1, r3
 80036ce:	4a09      	ldr	r2, [pc, #36]	; (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 80036d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036d2:	4b09      	ldr	r3, [pc, #36]	; (80036f8 <HAL_RCC_ClockConfig+0x1c8>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7fd fcca 	bl	8001070 <HAL_InitTick>

  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	40023c00 	.word	0x40023c00
 80036ec:	40023800 	.word	0x40023800
 80036f0:	08003b98 	.word	0x08003b98
 80036f4:	20000000 	.word	0x20000000
 80036f8:	20000004 	.word	0x20000004

080036fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003702:	2300      	movs	r3, #0
 8003704:	607b      	str	r3, [r7, #4]
 8003706:	2300      	movs	r3, #0
 8003708:	60fb      	str	r3, [r7, #12]
 800370a:	2300      	movs	r3, #0
 800370c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800370e:	2300      	movs	r3, #0
 8003710:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003712:	4b50      	ldr	r3, [pc, #320]	; (8003854 <HAL_RCC_GetSysClockFreq+0x158>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f003 030c 	and.w	r3, r3, #12
 800371a:	2b04      	cmp	r3, #4
 800371c:	d007      	beq.n	800372e <HAL_RCC_GetSysClockFreq+0x32>
 800371e:	2b08      	cmp	r3, #8
 8003720:	d008      	beq.n	8003734 <HAL_RCC_GetSysClockFreq+0x38>
 8003722:	2b00      	cmp	r3, #0
 8003724:	f040 808d 	bne.w	8003842 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003728:	4b4b      	ldr	r3, [pc, #300]	; (8003858 <HAL_RCC_GetSysClockFreq+0x15c>)
 800372a:	60bb      	str	r3, [r7, #8]
       break;
 800372c:	e08c      	b.n	8003848 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800372e:	4b4b      	ldr	r3, [pc, #300]	; (800385c <HAL_RCC_GetSysClockFreq+0x160>)
 8003730:	60bb      	str	r3, [r7, #8]
      break;
 8003732:	e089      	b.n	8003848 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003734:	4b47      	ldr	r3, [pc, #284]	; (8003854 <HAL_RCC_GetSysClockFreq+0x158>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800373c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800373e:	4b45      	ldr	r3, [pc, #276]	; (8003854 <HAL_RCC_GetSysClockFreq+0x158>)
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d023      	beq.n	8003792 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800374a:	4b42      	ldr	r3, [pc, #264]	; (8003854 <HAL_RCC_GetSysClockFreq+0x158>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	099b      	lsrs	r3, r3, #6
 8003750:	f04f 0400 	mov.w	r4, #0
 8003754:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003758:	f04f 0200 	mov.w	r2, #0
 800375c:	ea03 0501 	and.w	r5, r3, r1
 8003760:	ea04 0602 	and.w	r6, r4, r2
 8003764:	4a3d      	ldr	r2, [pc, #244]	; (800385c <HAL_RCC_GetSysClockFreq+0x160>)
 8003766:	fb02 f106 	mul.w	r1, r2, r6
 800376a:	2200      	movs	r2, #0
 800376c:	fb02 f205 	mul.w	r2, r2, r5
 8003770:	440a      	add	r2, r1
 8003772:	493a      	ldr	r1, [pc, #232]	; (800385c <HAL_RCC_GetSysClockFreq+0x160>)
 8003774:	fba5 0101 	umull	r0, r1, r5, r1
 8003778:	1853      	adds	r3, r2, r1
 800377a:	4619      	mov	r1, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f04f 0400 	mov.w	r4, #0
 8003782:	461a      	mov	r2, r3
 8003784:	4623      	mov	r3, r4
 8003786:	f7fc fd1f 	bl	80001c8 <__aeabi_uldivmod>
 800378a:	4603      	mov	r3, r0
 800378c:	460c      	mov	r4, r1
 800378e:	60fb      	str	r3, [r7, #12]
 8003790:	e049      	b.n	8003826 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003792:	4b30      	ldr	r3, [pc, #192]	; (8003854 <HAL_RCC_GetSysClockFreq+0x158>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	099b      	lsrs	r3, r3, #6
 8003798:	f04f 0400 	mov.w	r4, #0
 800379c:	f240 11ff 	movw	r1, #511	; 0x1ff
 80037a0:	f04f 0200 	mov.w	r2, #0
 80037a4:	ea03 0501 	and.w	r5, r3, r1
 80037a8:	ea04 0602 	and.w	r6, r4, r2
 80037ac:	4629      	mov	r1, r5
 80037ae:	4632      	mov	r2, r6
 80037b0:	f04f 0300 	mov.w	r3, #0
 80037b4:	f04f 0400 	mov.w	r4, #0
 80037b8:	0154      	lsls	r4, r2, #5
 80037ba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80037be:	014b      	lsls	r3, r1, #5
 80037c0:	4619      	mov	r1, r3
 80037c2:	4622      	mov	r2, r4
 80037c4:	1b49      	subs	r1, r1, r5
 80037c6:	eb62 0206 	sbc.w	r2, r2, r6
 80037ca:	f04f 0300 	mov.w	r3, #0
 80037ce:	f04f 0400 	mov.w	r4, #0
 80037d2:	0194      	lsls	r4, r2, #6
 80037d4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80037d8:	018b      	lsls	r3, r1, #6
 80037da:	1a5b      	subs	r3, r3, r1
 80037dc:	eb64 0402 	sbc.w	r4, r4, r2
 80037e0:	f04f 0100 	mov.w	r1, #0
 80037e4:	f04f 0200 	mov.w	r2, #0
 80037e8:	00e2      	lsls	r2, r4, #3
 80037ea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80037ee:	00d9      	lsls	r1, r3, #3
 80037f0:	460b      	mov	r3, r1
 80037f2:	4614      	mov	r4, r2
 80037f4:	195b      	adds	r3, r3, r5
 80037f6:	eb44 0406 	adc.w	r4, r4, r6
 80037fa:	f04f 0100 	mov.w	r1, #0
 80037fe:	f04f 0200 	mov.w	r2, #0
 8003802:	02a2      	lsls	r2, r4, #10
 8003804:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003808:	0299      	lsls	r1, r3, #10
 800380a:	460b      	mov	r3, r1
 800380c:	4614      	mov	r4, r2
 800380e:	4618      	mov	r0, r3
 8003810:	4621      	mov	r1, r4
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f04f 0400 	mov.w	r4, #0
 8003818:	461a      	mov	r2, r3
 800381a:	4623      	mov	r3, r4
 800381c:	f7fc fcd4 	bl	80001c8 <__aeabi_uldivmod>
 8003820:	4603      	mov	r3, r0
 8003822:	460c      	mov	r4, r1
 8003824:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003826:	4b0b      	ldr	r3, [pc, #44]	; (8003854 <HAL_RCC_GetSysClockFreq+0x158>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	0c1b      	lsrs	r3, r3, #16
 800382c:	f003 0303 	and.w	r3, r3, #3
 8003830:	3301      	adds	r3, #1
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	fbb2 f3f3 	udiv	r3, r2, r3
 800383e:	60bb      	str	r3, [r7, #8]
      break;
 8003840:	e002      	b.n	8003848 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003842:	4b05      	ldr	r3, [pc, #20]	; (8003858 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003844:	60bb      	str	r3, [r7, #8]
      break;
 8003846:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003848:	68bb      	ldr	r3, [r7, #8]
}
 800384a:	4618      	mov	r0, r3
 800384c:	3714      	adds	r7, #20
 800384e:	46bd      	mov	sp, r7
 8003850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003852:	bf00      	nop
 8003854:	40023800 	.word	0x40023800
 8003858:	00f42400 	.word	0x00f42400
 800385c:	017d7840 	.word	0x017d7840

08003860 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003868:	2300      	movs	r3, #0
 800386a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800386c:	2300      	movs	r3, #0
 800386e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b00      	cmp	r3, #0
 800387a:	d105      	bne.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003884:	2b00      	cmp	r3, #0
 8003886:	d035      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003888:	4b62      	ldr	r3, [pc, #392]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800388a:	2200      	movs	r2, #0
 800388c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800388e:	f7fd fc33 	bl	80010f8 <HAL_GetTick>
 8003892:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003894:	e008      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003896:	f7fd fc2f 	bl	80010f8 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d901      	bls.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e0b0      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038a8:	4b5b      	ldr	r3, [pc, #364]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1f0      	bne.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	019a      	lsls	r2, r3, #6
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	071b      	lsls	r3, r3, #28
 80038c0:	4955      	ldr	r1, [pc, #340]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80038c8:	4b52      	ldr	r3, [pc, #328]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80038ca:	2201      	movs	r2, #1
 80038cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80038ce:	f7fd fc13 	bl	80010f8 <HAL_GetTick>
 80038d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038d4:	e008      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80038d6:	f7fd fc0f 	bl	80010f8 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e090      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038e8:	4b4b      	ldr	r3, [pc, #300]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0f0      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f000 8083 	beq.w	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003902:	2300      	movs	r3, #0
 8003904:	60fb      	str	r3, [r7, #12]
 8003906:	4b44      	ldr	r3, [pc, #272]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	4a43      	ldr	r2, [pc, #268]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800390c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003910:	6413      	str	r3, [r2, #64]	; 0x40
 8003912:	4b41      	ldr	r3, [pc, #260]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800391a:	60fb      	str	r3, [r7, #12]
 800391c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800391e:	4b3f      	ldr	r3, [pc, #252]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a3e      	ldr	r2, [pc, #248]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003928:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800392a:	f7fd fbe5 	bl	80010f8 <HAL_GetTick>
 800392e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003930:	e008      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003932:	f7fd fbe1 	bl	80010f8 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d901      	bls.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e062      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003944:	4b35      	ldr	r3, [pc, #212]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0f0      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003950:	4b31      	ldr	r3, [pc, #196]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003954:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003958:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d02f      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	429a      	cmp	r2, r3
 800396c:	d028      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800396e:	4b2a      	ldr	r3, [pc, #168]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003972:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003976:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003978:	4b29      	ldr	r3, [pc, #164]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800397a:	2201      	movs	r2, #1
 800397c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800397e:	4b28      	ldr	r3, [pc, #160]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003980:	2200      	movs	r2, #0
 8003982:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003984:	4a24      	ldr	r2, [pc, #144]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800398a:	4b23      	ldr	r3, [pc, #140]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800398c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b01      	cmp	r3, #1
 8003994:	d114      	bne.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003996:	f7fd fbaf 	bl	80010f8 <HAL_GetTick>
 800399a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800399c:	e00a      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800399e:	f7fd fbab 	bl	80010f8 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d901      	bls.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e02a      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039b4:	4b18      	ldr	r3, [pc, #96]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b8:	f003 0302 	and.w	r3, r3, #2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d0ee      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039cc:	d10d      	bne.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80039ce:	4b12      	ldr	r3, [pc, #72]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80039de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039e2:	490d      	ldr	r1, [pc, #52]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	608b      	str	r3, [r1, #8]
 80039e8:	e005      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80039ea:	4b0b      	ldr	r3, [pc, #44]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	4a0a      	ldr	r2, [pc, #40]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039f0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80039f4:	6093      	str	r3, [r2, #8]
 80039f6:	4b08      	ldr	r3, [pc, #32]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a02:	4905      	ldr	r1, [pc, #20]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3718      	adds	r7, #24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	42470068 	.word	0x42470068
 8003a18:	40023800 	.word	0x40023800
 8003a1c:	40007000 	.word	0x40007000
 8003a20:	42470e40 	.word	0x42470e40

08003a24 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b087      	sub	sp, #28
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003a30:	2300      	movs	r3, #0
 8003a32:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003a34:	2300      	movs	r3, #0
 8003a36:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d13d      	bne.n	8003abe <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003a42:	4b22      	ldr	r3, [pc, #136]	; (8003acc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a4a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d004      	beq.n	8003a5c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d12f      	bne.n	8003ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003a56:	4b1e      	ldr	r3, [pc, #120]	; (8003ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003a58:	617b      	str	r3, [r7, #20]
          break;
 8003a5a:	e02f      	b.n	8003abc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003a5c:	4b1b      	ldr	r3, [pc, #108]	; (8003acc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a68:	d108      	bne.n	8003a7c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003a6a:	4b18      	ldr	r3, [pc, #96]	; (8003acc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a72:	4a18      	ldr	r2, [pc, #96]	; (8003ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a78:	613b      	str	r3, [r7, #16]
 8003a7a:	e007      	b.n	8003a8c <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003a7c:	4b13      	ldr	r3, [pc, #76]	; (8003acc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a84:	4a14      	ldr	r2, [pc, #80]	; (8003ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a8a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003a8c:	4b0f      	ldr	r3, [pc, #60]	; (8003acc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003a8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a92:	099b      	lsrs	r3, r3, #6
 8003a94:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	fb02 f303 	mul.w	r3, r2, r3
 8003a9e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003aa0:	4b0a      	ldr	r3, [pc, #40]	; (8003acc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003aa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aa6:	0f1b      	lsrs	r3, r3, #28
 8003aa8:	f003 0307 	and.w	r3, r3, #7
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab2:	617b      	str	r3, [r7, #20]
          break;
 8003ab4:	e002      	b.n	8003abc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	617b      	str	r3, [r7, #20]
          break;
 8003aba:	bf00      	nop
        }
      }
      break;
 8003abc:	bf00      	nop
    }
  }
  return frequency;
 8003abe:	697b      	ldr	r3, [r7, #20]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	371c      	adds	r7, #28
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	40023800 	.word	0x40023800
 8003ad0:	00bb8000 	.word	0x00bb8000
 8003ad4:	017d7840 	.word	0x017d7840
 8003ad8:	00f42400 	.word	0x00f42400

08003adc <__libc_init_array>:
 8003adc:	b570      	push	{r4, r5, r6, lr}
 8003ade:	4e0d      	ldr	r6, [pc, #52]	; (8003b14 <__libc_init_array+0x38>)
 8003ae0:	4c0d      	ldr	r4, [pc, #52]	; (8003b18 <__libc_init_array+0x3c>)
 8003ae2:	1ba4      	subs	r4, r4, r6
 8003ae4:	10a4      	asrs	r4, r4, #2
 8003ae6:	2500      	movs	r5, #0
 8003ae8:	42a5      	cmp	r5, r4
 8003aea:	d109      	bne.n	8003b00 <__libc_init_array+0x24>
 8003aec:	4e0b      	ldr	r6, [pc, #44]	; (8003b1c <__libc_init_array+0x40>)
 8003aee:	4c0c      	ldr	r4, [pc, #48]	; (8003b20 <__libc_init_array+0x44>)
 8003af0:	f000 f846 	bl	8003b80 <_init>
 8003af4:	1ba4      	subs	r4, r4, r6
 8003af6:	10a4      	asrs	r4, r4, #2
 8003af8:	2500      	movs	r5, #0
 8003afa:	42a5      	cmp	r5, r4
 8003afc:	d105      	bne.n	8003b0a <__libc_init_array+0x2e>
 8003afe:	bd70      	pop	{r4, r5, r6, pc}
 8003b00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b04:	4798      	blx	r3
 8003b06:	3501      	adds	r5, #1
 8003b08:	e7ee      	b.n	8003ae8 <__libc_init_array+0xc>
 8003b0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b0e:	4798      	blx	r3
 8003b10:	3501      	adds	r5, #1
 8003b12:	e7f2      	b.n	8003afa <__libc_init_array+0x1e>
 8003b14:	08003bb8 	.word	0x08003bb8
 8003b18:	08003bb8 	.word	0x08003bb8
 8003b1c:	08003bb8 	.word	0x08003bb8
 8003b20:	08003bbc 	.word	0x08003bbc

08003b24 <memset>:
 8003b24:	4402      	add	r2, r0
 8003b26:	4603      	mov	r3, r0
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d100      	bne.n	8003b2e <memset+0xa>
 8003b2c:	4770      	bx	lr
 8003b2e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b32:	e7f9      	b.n	8003b28 <memset+0x4>

08003b34 <roundf>:
 8003b34:	ee10 0a10 	vmov	r0, s0
 8003b38:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8003b3c:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8003b40:	2a16      	cmp	r2, #22
 8003b42:	dc15      	bgt.n	8003b70 <roundf+0x3c>
 8003b44:	2a00      	cmp	r2, #0
 8003b46:	da08      	bge.n	8003b5a <roundf+0x26>
 8003b48:	3201      	adds	r2, #1
 8003b4a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8003b4e:	d101      	bne.n	8003b54 <roundf+0x20>
 8003b50:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8003b54:	ee00 3a10 	vmov	s0, r3
 8003b58:	4770      	bx	lr
 8003b5a:	4908      	ldr	r1, [pc, #32]	; (8003b7c <roundf+0x48>)
 8003b5c:	4111      	asrs	r1, r2
 8003b5e:	4208      	tst	r0, r1
 8003b60:	d0fa      	beq.n	8003b58 <roundf+0x24>
 8003b62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b66:	4113      	asrs	r3, r2
 8003b68:	4403      	add	r3, r0
 8003b6a:	ea23 0301 	bic.w	r3, r3, r1
 8003b6e:	e7f1      	b.n	8003b54 <roundf+0x20>
 8003b70:	2a80      	cmp	r2, #128	; 0x80
 8003b72:	d1f1      	bne.n	8003b58 <roundf+0x24>
 8003b74:	ee30 0a00 	vadd.f32	s0, s0, s0
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	007fffff 	.word	0x007fffff

08003b80 <_init>:
 8003b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b82:	bf00      	nop
 8003b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b86:	bc08      	pop	{r3}
 8003b88:	469e      	mov	lr, r3
 8003b8a:	4770      	bx	lr

08003b8c <_fini>:
 8003b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b8e:	bf00      	nop
 8003b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b92:	bc08      	pop	{r3}
 8003b94:	469e      	mov	lr, r3
 8003b96:	4770      	bx	lr
